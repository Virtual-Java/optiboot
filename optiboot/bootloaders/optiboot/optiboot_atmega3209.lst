
optiboot_atmega3209.elf:     Dateiformat elf32-avr


Disassembly of section .text:

00000000 <pre_main>:
/* everything that needs to run VERY early */
void pre_main (void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, independent
  //    of compilation, features, etc
  __asm__ __volatile__ (
   0:	01 c0       	rjmp	.+2      	; 0x4 <main>
   2:	d8 c0       	rjmp	.+432    	; 0x1b4 <do_nvmctrl>

00000004 <main>:
   4:	11 24       	eor	r1, r1
   6:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
   a:	88 23       	and	r24, r24
   c:	59 f0       	breq	.+22     	; 0x24 <main+0x20>
   e:	83 fd       	sbrc	r24, 3
  10:	03 c0       	rjmp	.+6      	; 0x18 <main+0x14>
  12:	98 2f       	mov	r25, r24
  14:	9d 7f       	andi	r25, 0xFD	; 253
  16:	31 f4       	brne	.+12     	; 0x24 <main+0x20>
  18:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  1c:	8c bb       	out	0x1c, r24	; 28
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	b1 d0       	rcall	.+354    	; 0x184 <watchdogConfig>
  22:	ee c0       	rjmp	.+476    	; 0x200 <app>
  24:	a8 95       	wdr
  26:	44 9a       	sbi	0x08, 4	; 8
  28:	4c 9a       	sbi	0x09, 4	; 9
  2a:	84 e0       	ldi	r24, 0x04	; 4
  2c:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7005e2>
  30:	80 91 82 12 	lds	r24, 0x1282	; 0x801282 <__TEXT_REGION_LENGTH__+0x701282>
  34:	83 70       	andi	r24, 0x03	; 3
  36:	81 30       	cpi	r24, 0x01	; 1
  38:	19 f4       	brne	.+6      	; 0x40 <__SREG__+0x1>
  3a:	8c e5       	ldi	r24, 0x5C	; 92
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	83 e7       	ldi	r24, 0x73	; 115
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
  48:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
  58:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__TEXT_REGION_LENGTH__+0x700825>
  5c:	80 ec       	ldi	r24, 0xC0	; 192
  5e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	8f d0       	rcall	.+286    	; 0x184 <watchdogConfig>
  66:	66 9a       	sbi	0x0c, 6	; 12
  68:	87 e0       	ldi	r24, 0x07	; 7
  6a:	81 50       	subi	r24, 0x01	; 1
  6c:	61 f0       	breq	.+24     	; 0x86 <__SREG__+0x47>
  6e:	76 9a       	sbi	0x0e, 6	; 14
  70:	2e ec       	ldi	r18, 0xCE	; 206
  72:	36 e5       	ldi	r19, 0x56	; 86
  74:	a8 95       	wdr
  76:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
  7a:	97 fd       	sbrc	r25, 7
  7c:	05 c0       	rjmp	.+10     	; 0x88 <__SREG__+0x49>
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	31 09       	sbc	r19, r1
  82:	c1 f7       	brne	.-16     	; 0x74 <__SREG__+0x35>
  84:	f2 cf       	rjmp	.-28     	; 0x6a <__SREG__+0x2b>
  86:	a8 95       	wdr
  88:	0d e9       	ldi	r16, 0x9D	; 157
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	d8 2e       	mov	r13, r24
  8e:	6e d0       	rcall	.+220    	; 0x16c <getch>
  90:	81 34       	cpi	r24, 0x41	; 65
  92:	71 f4       	brne	.+28     	; 0xb0 <__SREG__+0x71>
  94:	6b d0       	rcall	.+214    	; 0x16c <getch>
  96:	18 2f       	mov	r17, r24
  98:	7e d0       	rcall	.+252    	; 0x196 <verifySpace>
  9a:	12 38       	cpi	r17, 0x82	; 130
  9c:	11 f4       	brne	.+4      	; 0xa2 <__SREG__+0x63>
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	05 c0       	rjmp	.+10     	; 0xac <__SREG__+0x6d>
  a2:	11 38       	cpi	r17, 0x81	; 129
  a4:	11 f4       	brne	.+4      	; 0xaa <__SREG__+0x6b>
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	01 c0       	rjmp	.+2      	; 0xac <__SREG__+0x6d>
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	58 d0       	rcall	.+176    	; 0x15e <putch>
  ae:	54 c0       	rjmp	.+168    	; 0x158 <__SREG__+0x119>
  b0:	82 34       	cpi	r24, 0x42	; 66
  b2:	11 f4       	brne	.+4      	; 0xb8 <__SREG__+0x79>
  b4:	84 e1       	ldi	r24, 0x14	; 20
  b6:	03 c0       	rjmp	.+6      	; 0xbe <__SREG__+0x7f>
  b8:	85 34       	cpi	r24, 0x45	; 69
  ba:	19 f4       	brne	.+6      	; 0xc2 <__SREG__+0x83>
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	73 d0       	rcall	.+230    	; 0x1a6 <getNch>
  c0:	4b c0       	rjmp	.+150    	; 0x158 <__SREG__+0x119>
  c2:	85 35       	cpi	r24, 0x55	; 85
  c4:	29 f4       	brne	.+10     	; 0xd0 <__SREG__+0x91>
  c6:	52 d0       	rcall	.+164    	; 0x16c <getch>
  c8:	c8 2f       	mov	r28, r24
  ca:	50 d0       	rcall	.+160    	; 0x16c <getch>
  cc:	d8 2f       	mov	r29, r24
  ce:	43 c0       	rjmp	.+134    	; 0x156 <__SREG__+0x117>
  d0:	86 35       	cpi	r24, 0x56	; 86
  d2:	21 f4       	brne	.+8      	; 0xdc <__SREG__+0x9d>
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	67 d0       	rcall	.+206    	; 0x1a6 <getNch>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	e8 cf       	rjmp	.-48     	; 0xac <__SREG__+0x6d>
  dc:	84 36       	cpi	r24, 0x64	; 100
  de:	b9 f4       	brne	.+46     	; 0x10e <__SREG__+0xcf>
  e0:	45 d0       	rcall	.+138    	; 0x16c <getch>
  e2:	44 d0       	rcall	.+136    	; 0x16c <getch>
  e4:	18 2f       	mov	r17, r24
  e6:	42 d0       	rcall	.+132    	; 0x16c <getch>
  e8:	86 34       	cpi	r24, 0x46	; 70
  ea:	11 f4       	brne	.+4      	; 0xf0 <__SREG__+0xb1>
  ec:	d0 5c       	subi	r29, 0xC0	; 192
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__SREG__+0xb3>
  f0:	dc 5e       	subi	r29, 0xEC	; 236
  f2:	3c d0       	rcall	.+120    	; 0x16c <getch>
  f4:	88 83       	st	Y, r24
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	11 50       	subi	r17, 0x01	; 1
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__SREG__+0xb3>
  fc:	4c d0       	rcall	.+152    	; 0x196 <verifySpace>
  fe:	04 bf       	out	0x34, r16	; 52
 100:	d0 92 00 10 	sts	0x1000, r13	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
 104:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
 108:	83 70       	andi	r24, 0x03	; 3
 10a:	e1 f7       	brne	.-8      	; 0x104 <__SREG__+0xc5>
 10c:	25 c0       	rjmp	.+74     	; 0x158 <__SREG__+0x119>
 10e:	84 37       	cpi	r24, 0x74	; 116
 110:	91 f4       	brne	.+36     	; 0x136 <__SREG__+0xf7>
 112:	2c d0       	rcall	.+88     	; 0x16c <getch>
 114:	2b d0       	rcall	.+86     	; 0x16c <getch>
 116:	18 2f       	mov	r17, r24
 118:	29 d0       	rcall	.+82     	; 0x16c <getch>
 11a:	f8 2e       	mov	r15, r24
 11c:	3c d0       	rcall	.+120    	; 0x196 <verifySpace>
 11e:	86 e4       	ldi	r24, 0x46	; 70
 120:	f8 12       	cpse	r15, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <__SREG__+0xe9>
 124:	d0 5c       	subi	r29, 0xC0	; 192
 126:	01 c0       	rjmp	.+2      	; 0x12a <__SREG__+0xeb>
 128:	dc 5e       	subi	r29, 0xEC	; 236
 12a:	88 81       	ld	r24, Y
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	17 d0       	rcall	.+46     	; 0x15e <putch>
 130:	11 50       	subi	r17, 0x01	; 1
 132:	d9 f7       	brne	.-10     	; 0x12a <__SREG__+0xeb>
 134:	11 c0       	rjmp	.+34     	; 0x158 <__SREG__+0x119>
 136:	85 37       	cpi	r24, 0x75	; 117
 138:	51 f4       	brne	.+20     	; 0x14e <__SREG__+0x10f>
 13a:	2d d0       	rcall	.+90     	; 0x196 <verifySpace>
 13c:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <__TEXT_REGION_LENGTH__+0x701100>
 140:	0e d0       	rcall	.+28     	; 0x15e <putch>
 142:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <__TEXT_REGION_LENGTH__+0x701101>
 146:	0b d0       	rcall	.+22     	; 0x15e <putch>
 148:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <__TEXT_REGION_LENGTH__+0x701102>
 14c:	af cf       	rjmp	.-162    	; 0xac <__SREG__+0x6d>
 14e:	81 35       	cpi	r24, 0x51	; 81
 150:	11 f4       	brne	.+4      	; 0x156 <__SREG__+0x117>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	17 d0       	rcall	.+46     	; 0x184 <watchdogConfig>
 156:	1f d0       	rcall	.+62     	; 0x196 <verifySpace>
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	01 d0       	rcall	.+2      	; 0x15e <putch>
 15c:	98 cf       	rjmp	.-208    	; 0x8e <__SREG__+0x4f>

0000015e <putch>:
inline void rs485_txoff() {}
#endif

void putch (char ch) {
  rs485_txon();  // turn on and leave on till we're done xmitting.
  while (0 == (MYUART.STATUS & USART_DREIF_bm))
 15e:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <putch>
    ;
  MYUART.TXDATAL = ch;
 166:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x700822>
 16a:	08 95       	ret

0000016c <getch>:
  rs485_txoff();    // To receive, turn off transmitter
}

uint8_t getch (void) {
  uint8_t ch, flags;
  while (!(MYUART.STATUS & USART_RXCIF_bm))
 16c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 170:	87 ff       	sbrs	r24, 7
 172:	fc cf       	rjmp	.-8      	; 0x16c <getch>
    ;
  flags = MYUART.RXDATAH;
 174:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
  ch = MYUART.RXDATAL;
 178:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
  if ((flags & USART_FERR_bm) == 0)
 17c:	92 fd       	sbrc	r25, 2
 17e:	01 c0       	rjmp	.+2      	; 0x182 <getch+0x16>
    watchdogReset();
 180:	a8 95       	wdr
#ifdef LED_DATA_FLASH
  LED_PORT.IN |= LED;
#endif

  return ch;
}
 182:	08 95       	ret

00000184 <watchdogConfig>:
/*
 * Change the watchdog configuration.
 *  Could be a new timeout, could be off...
 */
void watchdogConfig (uint8_t x) {
  while(WDT.STATUS & WDT_SYNCBUSY_bm)
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 188:	90 fd       	sbrc	r25, 0
 18a:	fc cf       	rjmp	.-8      	; 0x184 <watchdogConfig>
    ;  // Busy wait for sycnhronization is required!
  _PROTECTED_WRITE(WDT.CTRLA, x);
 18c:	98 ed       	ldi	r25, 0xD8	; 216
 18e:	94 bf       	out	0x34, r25	; 52
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 194:	08 95       	ret

00000196 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace () {
  if (getch() != CRC_EOP) {
 196:	ea df       	rcall	.-44     	; 0x16c <getch>
 198:	80 32       	cpi	r24, 0x20	; 32
 19a:	19 f0       	breq	.+6      	; 0x1a2 <verifySpace+0xc>
    watchdogConfig(WDT_PERIOD_8CLK_gc);    // shorten WD timeout
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	f2 df       	rcall	.-28     	; 0x184 <watchdogConfig>
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
 1a2:	84 e1       	ldi	r24, 0x14	; 20
 1a4:	dc cf       	rjmp	.-72     	; 0x15e <putch>

000001a6 <getNch>:
#endif

  return ch;
}

void getNch (uint8_t count) {
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
 1aa:	e0 df       	rcall	.-64     	; 0x16c <getch>
 1ac:	c1 50       	subi	r28, 0x01	; 1
 1ae:	e9 f7       	brne	.-6      	; 0x1aa <getNch+0x4>
  verifySpace();
}
 1b0:	cf 91       	pop	r28
  return ch;
}

void getNch (uint8_t count) {
  do getch(); while (--count);
  verifySpace();
 1b2:	f1 cf       	rjmp	.-30     	; 0x196 <verifySpace>

000001b4 <do_nvmctrl>:
 * Erase and write page with
 *   do_nvmctrl(0, NVMCTRL_CMD_PAGEERASEWRITE_gc, 0);
 */
static void do_nvmctrl(uint16_t address, uint8_t command, uint8_t data)  __attribute__ ((used));
static void do_nvmctrl (uint16_t address, uint8_t command, uint8_t data) {
  if (command <= NVMCTRL_CMD_gm) {
 1b4:	68 30       	cpi	r22, 0x08	; 8
 1b6:	48 f4       	brcc	.+18     	; 0x1ca <do_nvmctrl+0x16>
    _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, command);
 1b8:	8d e9       	ldi	r24, 0x9D	; 157
 1ba:	84 bf       	out	0x34, r24	; 52
 1bc:	60 93 00 10 	sts	0x1000, r22	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    while (NVMCTRL.STATUS & (NVMCTRL_FBUSY_bm|NVMCTRL_EEBUSY_bm))
 1c0:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
 1c4:	83 70       	andi	r24, 0x03	; 3
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <do_nvmctrl+0xc>
 1c8:	08 95       	ret
      ; // wait for flash and EEPROM not busy, just in case.
  } else {
    *(uint8_t *)address = data;
 1ca:	fc 01       	movw	r30, r24
 1cc:	40 83       	st	Z, r20
 1ce:	08 95       	ret

Disassembly of section .application:

00000200 <app>:
      __attribute__((naked)) app();
void app()
{
  uint8_t ch;

  ch = RSTCTRL.RSTFR;
 200:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  RSTCTRL.RSTFR = ch; // reset causes
 204:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  *(volatile uint16_t *)(&optiboot_version);   // reference the version
 208:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__TEXT_REGION_LENGTH__+0x7001fe>
 20c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <__TEXT_REGION_LENGTH__+0x7001ff>
 *   do_nvmctrl(0, NVMCTRL_CMD_PAGEERASEWRITE_gc, 0);
 */
static void do_nvmctrl(uint16_t address, uint8_t command, uint8_t data)  __attribute__ ((used));
static void do_nvmctrl (uint16_t address, uint8_t command, uint8_t data) {
  if (command <= NVMCTRL_CMD_gm) {
    _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, command);
 210:	94 e0       	ldi	r25, 0x04	; 4
 212:	8d e9       	ldi	r24, 0x9D	; 157
 214:	84 bf       	out	0x34, r24	; 52
 216:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    while (NVMCTRL.STATUS & (NVMCTRL_FBUSY_bm|NVMCTRL_EEBUSY_bm))
 21a:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
 21e:	83 70       	andi	r24, 0x03	; 3
 220:	e1 f7       	brne	.-8      	; 0x21a <app+0x1a>

  ch = RSTCTRL.RSTFR;
  RSTCTRL.RSTFR = ch; // reset causes
  *(volatile uint16_t *)(&optiboot_version);   // reference the version
  do_nvmctrl(0, NVMCTRL_CMD_PAGEBUFCLR_gc, 0); // reference this function!
  __asm__ __volatile__ (
 222:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
