
optiboot_attiny1634.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fbe  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00003d80  00003d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000dbc  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa2  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <main>
    3d82:	14 c1       	rjmp	.+552    	; 0x3fac <do_spm>

00003d84 <main>:
    3d84:	11 24       	eor	r1, r1
    3d86:	85 b7       	in	r24, 0x35	; 53
    3d88:	88 23       	and	r24, r24
    3d8a:	71 f0       	breq	.+28     	; 0x3da8 <main+0x24>
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	9a 70       	andi	r25, 0x0A	; 10
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	51 f0       	breq	.+20     	; 0x3da8 <main+0x24>
    3d94:	81 ff       	sbrs	r24, 1
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <main+0x18>
    3d98:	97 ef       	ldi	r25, 0xF7	; 247
    3d9a:	95 bf       	out	0x35, r25	; 53
    3d9c:	28 2e       	mov	r2, r24
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	f2 d0       	rcall	.+484    	; 0x3f86 <watchdogConfig>
    3da2:	e4 e3       	ldi	r30, 0x34	; 52
    3da4:	ff 27       	eor	r31, r31
    3da6:	09 94       	ijmp
    3da8:	85 e0       	ldi	r24, 0x05	; 5
    3daa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	86 bd       	out	0x26, r24	; 38
    3db2:	88 e1       	ldi	r24, 0x18	; 24
    3db4:	85 bd       	out	0x25, r24	; 37
    3db6:	86 e0       	ldi	r24, 0x06	; 6
    3db8:	84 bd       	out	0x24, r24	; 36
    3dba:	80 e1       	ldi	r24, 0x10	; 16
    3dbc:	81 bd       	out	0x21, r24	; 33
    3dbe:	8e e0       	ldi	r24, 0x0E	; 14
    3dc0:	e2 d0       	rcall	.+452    	; 0x3f86 <watchdogConfig>
    3dc2:	40 9a       	sbi	0x08, 0	; 8
    3dc4:	86 e0       	ldi	r24, 0x06	; 6
    3dc6:	28 e1       	ldi	r18, 0x18	; 24
    3dc8:	3e ef       	ldi	r19, 0xFE	; 254
    3dca:	90 e8       	ldi	r25, 0x80	; 128
    3dcc:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    3dd0:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    3dd4:	99 bf       	out	0x39, r25	; 57
    3dd6:	09 b6       	in	r0, 0x39	; 57
    3dd8:	07 fe       	sbrs	r0, 7
    3dda:	fd cf       	rjmp	.-6      	; 0x3dd6 <main+0x52>
    3ddc:	38 9a       	sbi	0x07, 0	; 7
    3dde:	a8 95       	wdr
    3de0:	06 b4       	in	r0, 0x26	; 38
    3de2:	07 fc       	sbrc	r0, 7
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <main+0x66>
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	89 f7       	brne	.-30     	; 0x3dcc <main+0x48>
    3dea:	80 ec       	ldi	r24, 0xC0	; 192
    3dec:	9e e1       	ldi	r25, 0x1E	; 30
    3dee:	c9 2e       	mov	r12, r25
    3df0:	bb 24       	eor	r11, r11
    3df2:	b3 94       	inc	r11
    3df4:	25 e0       	ldi	r18, 0x05	; 5
    3df6:	a2 2e       	mov	r10, r18
    3df8:	33 e0       	ldi	r19, 0x03	; 3
    3dfa:	93 2e       	mov	r9, r19
    3dfc:	7c 01       	movw	r14, r24
    3dfe:	ba d0       	rcall	.+372    	; 0x3f74 <getch>
    3e00:	81 34       	cpi	r24, 0x41	; 65
    3e02:	71 f4       	brne	.+28     	; 0x3e20 <main+0x9c>
    3e04:	b7 d0       	rcall	.+366    	; 0x3f74 <getch>
    3e06:	18 2f       	mov	r17, r24
    3e08:	c2 d0       	rcall	.+388    	; 0x3f8e <verifySpace>
    3e0a:	12 38       	cpi	r17, 0x82	; 130
    3e0c:	11 f4       	brne	.+4      	; 0x3e12 <main+0x8e>
    3e0e:	82 e0       	ldi	r24, 0x02	; 2
    3e10:	05 c0       	rjmp	.+10     	; 0x3e1c <main+0x98>
    3e12:	11 38       	cpi	r17, 0x81	; 129
    3e14:	11 f4       	brne	.+4      	; 0x3e1a <main+0x96>
    3e16:	88 e0       	ldi	r24, 0x08	; 8
    3e18:	01 c0       	rjmp	.+2      	; 0x3e1c <main+0x98>
    3e1a:	83 e0       	ldi	r24, 0x03	; 3
    3e1c:	a6 d0       	rcall	.+332    	; 0x3f6a <putch>
    3e1e:	a2 c0       	rjmp	.+324    	; 0x3f64 <main+0x1e0>
    3e20:	82 34       	cpi	r24, 0x42	; 66
    3e22:	11 f4       	brne	.+4      	; 0x3e28 <main+0xa4>
    3e24:	84 e1       	ldi	r24, 0x14	; 20
    3e26:	03 c0       	rjmp	.+6      	; 0x3e2e <main+0xaa>
    3e28:	85 34       	cpi	r24, 0x45	; 69
    3e2a:	19 f4       	brne	.+6      	; 0x3e32 <main+0xae>
    3e2c:	85 e0       	ldi	r24, 0x05	; 5
    3e2e:	b7 d0       	rcall	.+366    	; 0x3f9e <getNch>
    3e30:	99 c0       	rjmp	.+306    	; 0x3f64 <main+0x1e0>
    3e32:	85 35       	cpi	r24, 0x55	; 85
    3e34:	39 f4       	brne	.+14     	; 0x3e44 <main+0xc0>
    3e36:	9e d0       	rcall	.+316    	; 0x3f74 <getch>
    3e38:	c8 2f       	mov	r28, r24
    3e3a:	9c d0       	rcall	.+312    	; 0x3f74 <getch>
    3e3c:	d8 2f       	mov	r29, r24
    3e3e:	cc 0f       	add	r28, r28
    3e40:	dd 1f       	adc	r29, r29
    3e42:	8f c0       	rjmp	.+286    	; 0x3f62 <main+0x1de>
    3e44:	86 35       	cpi	r24, 0x56	; 86
    3e46:	21 f4       	brne	.+8      	; 0x3e50 <main+0xcc>
    3e48:	84 e0       	ldi	r24, 0x04	; 4
    3e4a:	a9 d0       	rcall	.+338    	; 0x3f9e <getNch>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	e6 cf       	rjmp	.-52     	; 0x3e1c <main+0x98>
    3e50:	84 36       	cpi	r24, 0x64	; 100
    3e52:	09 f0       	breq	.+2      	; 0x3e56 <main+0xd2>
    3e54:	50 c0       	rjmp	.+160    	; 0x3ef6 <main+0x172>
    3e56:	8e d0       	rcall	.+284    	; 0x3f74 <getch>
    3e58:	8d d0       	rcall	.+282    	; 0x3f74 <getch>
    3e5a:	d8 2e       	mov	r13, r24
    3e5c:	8b d0       	rcall	.+278    	; 0x3f74 <getch>
    3e5e:	88 2e       	mov	r8, r24
    3e60:	00 e0       	ldi	r16, 0x00	; 0
    3e62:	11 e0       	ldi	r17, 0x01	; 1
    3e64:	87 d0       	rcall	.+270    	; 0x3f74 <getch>
    3e66:	f8 01       	movw	r30, r16
    3e68:	81 93       	st	Z+, r24
    3e6a:	8f 01       	movw	r16, r30
    3e6c:	de 12       	cpse	r13, r30
    3e6e:	fa cf       	rjmp	.-12     	; 0x3e64 <main+0xe0>
    3e70:	8e d0       	rcall	.+284    	; 0x3f8e <verifySpace>
    3e72:	20 97       	sbiw	r28, 0x00	; 0
    3e74:	69 f4       	brne	.+26     	; 0x3e90 <main+0x10c>
    3e76:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    3e7a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_edata+0x44>
    3e7e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
    3e82:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_edata+0x45>
    3e86:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_edata+0x2>
    3e8a:	c0 92 03 01 	sts	0x0103, r12	; 0x800103 <_edata+0x3>
    3e8e:	13 c0       	rjmp	.+38     	; 0x3eb6 <main+0x132>
    3e90:	c0 36       	cpi	r28, 0x60	; 96
    3e92:	d1 05       	cpc	r29, r1
    3e94:	81 f4       	brne	.+32     	; 0x3eb6 <main+0x132>
    3e96:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_edata+0xa>
    3e9a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_edata+0x46>
    3e9e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_edata+0xb>
    3ea2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_edata+0x47>
    3ea6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3eaa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_edata+0xa>
    3eae:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3eb2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_edata+0xb>
    3eb6:	f5 e4       	ldi	r31, 0x45	; 69
    3eb8:	8f 12       	cpse	r8, r31
    3eba:	01 c0       	rjmp	.+2      	; 0x3ebe <main+0x13a>
    3ebc:	ff cf       	rjmp	.-2      	; 0x3ebc <main+0x138>
    3ebe:	8c 2f       	mov	r24, r28
    3ec0:	8f 77       	andi	r24, 0x7F	; 127
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	31 f4       	brne	.+12     	; 0x3ed2 <main+0x14e>
    3ec6:	97 be       	out	0x37, r9	; 55
    3ec8:	e8 95       	spm
    3eca:	07 b6       	in	r0, 0x37	; 55
    3ecc:	00 fc       	sbrc	r0, 0
    3ece:	fd cf       	rjmp	.-6      	; 0x3eca <main+0x146>
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	a0 e0       	ldi	r26, 0x00	; 0
    3ed4:	b1 e0       	ldi	r27, 0x01	; 1
    3ed6:	8d 91       	ld	r24, X+
    3ed8:	9d 91       	ld	r25, X+
    3eda:	0c 01       	movw	r0, r24
    3edc:	b7 be       	out	0x37, r11	; 55
    3ede:	e8 95       	spm
    3ee0:	11 24       	eor	r1, r1
    3ee2:	32 96       	adiw	r30, 0x02	; 2
    3ee4:	da 12       	cpse	r13, r26
    3ee6:	f7 cf       	rjmp	.-18     	; 0x3ed6 <main+0x152>
    3ee8:	fe 01       	movw	r30, r28
    3eea:	a7 be       	out	0x37, r10	; 55
    3eec:	e8 95       	spm
    3eee:	07 b6       	in	r0, 0x37	; 55
    3ef0:	00 fc       	sbrc	r0, 0
    3ef2:	fd cf       	rjmp	.-6      	; 0x3eee <main+0x16a>
    3ef4:	37 c0       	rjmp	.+110    	; 0x3f64 <main+0x1e0>
    3ef6:	84 37       	cpi	r24, 0x74	; 116
    3ef8:	39 f5       	brne	.+78     	; 0x3f48 <main+0x1c4>
    3efa:	3c d0       	rcall	.+120    	; 0x3f74 <getch>
    3efc:	3b d0       	rcall	.+118    	; 0x3f74 <getch>
    3efe:	d8 2e       	mov	r13, r24
    3f00:	39 d0       	rcall	.+114    	; 0x3f74 <getch>
    3f02:	45 d0       	rcall	.+138    	; 0x3f8e <verifySpace>
    3f04:	8e 01       	movw	r16, r28
    3f06:	02 30       	cpi	r16, 0x02	; 2
    3f08:	11 05       	cpc	r17, r1
    3f0a:	19 f4       	brne	.+6      	; 0x3f12 <main+0x18e>
    3f0c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3f10:	14 c0       	rjmp	.+40     	; 0x3f3a <main+0x1b6>
    3f12:	03 30       	cpi	r16, 0x03	; 3
    3f14:	11 05       	cpc	r17, r1
    3f16:	19 f4       	brne	.+6      	; 0x3f1e <main+0x19a>
    3f18:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3f1c:	0e c0       	rjmp	.+28     	; 0x3f3a <main+0x1b6>
    3f1e:	0a 36       	cpi	r16, 0x6A	; 106
    3f20:	11 05       	cpc	r17, r1
    3f22:	19 f4       	brne	.+6      	; 0x3f2a <main+0x1a6>
    3f24:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_edata+0x46>
    3f28:	08 c0       	rjmp	.+16     	; 0x3f3a <main+0x1b6>
    3f2a:	0b 36       	cpi	r16, 0x6B	; 107
    3f2c:	11 05       	cpc	r17, r1
    3f2e:	19 f4       	brne	.+6      	; 0x3f36 <main+0x1b2>
    3f30:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_edata+0x47>
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <main+0x1b6>
    3f36:	f8 01       	movw	r30, r16
    3f38:	84 91       	lpm	r24, Z
    3f3a:	17 d0       	rcall	.+46     	; 0x3f6a <putch>
    3f3c:	da 94       	dec	r13
    3f3e:	0f 5f       	subi	r16, 0xFF	; 255
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	d1 10       	cpse	r13, r1
    3f44:	e0 cf       	rjmp	.-64     	; 0x3f06 <main+0x182>
    3f46:	0e c0       	rjmp	.+28     	; 0x3f64 <main+0x1e0>
    3f48:	85 37       	cpi	r24, 0x75	; 117
    3f4a:	39 f4       	brne	.+14     	; 0x3f5a <main+0x1d6>
    3f4c:	20 d0       	rcall	.+64     	; 0x3f8e <verifySpace>
    3f4e:	8e e1       	ldi	r24, 0x1E	; 30
    3f50:	0c d0       	rcall	.+24     	; 0x3f6a <putch>
    3f52:	84 e9       	ldi	r24, 0x94	; 148
    3f54:	0a d0       	rcall	.+20     	; 0x3f6a <putch>
    3f56:	82 e1       	ldi	r24, 0x12	; 18
    3f58:	61 cf       	rjmp	.-318    	; 0x3e1c <main+0x98>
    3f5a:	81 35       	cpi	r24, 0x51	; 81
    3f5c:	11 f4       	brne	.+4      	; 0x3f62 <main+0x1de>
    3f5e:	88 e0       	ldi	r24, 0x08	; 8
    3f60:	12 d0       	rcall	.+36     	; 0x3f86 <watchdogConfig>
    3f62:	15 d0       	rcall	.+42     	; 0x3f8e <verifySpace>
    3f64:	80 e1       	ldi	r24, 0x10	; 16
    3f66:	01 d0       	rcall	.+2      	; 0x3f6a <putch>
    3f68:	4a cf       	rjmp	.-364    	; 0x3dfe <main+0x7a>

00003f6a <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f6a:	06 b4       	in	r0, 0x26	; 38
    3f6c:	05 fe       	sbrs	r0, 5
    3f6e:	fd cf       	rjmp	.-6      	; 0x3f6a <putch>
  UART_UDR = ch;
    3f70:	80 bd       	out	0x20, r24	; 32
    3f72:	08 95       	ret

00003f74 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f74:	06 b4       	in	r0, 0x26	; 38
    3f76:	07 fe       	sbrs	r0, 7
    3f78:	fd cf       	rjmp	.-6      	; 0x3f74 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f7a:	06 b4       	in	r0, 0x26	; 38
    3f7c:	04 fc       	sbrc	r0, 4
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <getch+0xe>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f80:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    3f82:	80 b5       	in	r24, 0x20	; 32
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    3f84:	08 95       	ret

00003f86 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    3f86:	98 ed       	ldi	r25, 0xD8	; 216
    3f88:	9f bd       	out	0x2f, r25	; 47
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3f8a:	80 bf       	out	0x30, r24	; 48
    3f8c:	08 95       	ret

00003f8e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3f8e:	f2 df       	rcall	.-28     	; 0x3f74 <getch>
    3f90:	80 32       	cpi	r24, 0x20	; 32
    3f92:	19 f0       	breq	.+6      	; 0x3f9a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3f94:	88 e0       	ldi	r24, 0x08	; 8
    3f96:	f7 df       	rcall	.-18     	; 0x3f86 <watchdogConfig>
    3f98:	ff cf       	rjmp	.-2      	; 0x3f98 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    3f9a:	84 e1       	ldi	r24, 0x14	; 20
    3f9c:	e6 cf       	rjmp	.-52     	; 0x3f6a <putch>

00003f9e <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    3f9e:	cf 93       	push	r28
    3fa0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fa2:	e8 df       	rcall	.-48     	; 0x3f74 <getch>
    3fa4:	c1 50       	subi	r28, 0x01	; 1
    3fa6:	e9 f7       	brne	.-6      	; 0x3fa2 <getNch+0x4>
  verifySpace();
}
    3fa8:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3faa:	f1 cf       	rjmp	.-30     	; 0x3f8e <verifySpace>

00003fac <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    3fac:	fc 01       	movw	r30, r24
    3fae:	0a 01       	movw	r0, r20
    3fb0:	67 bf       	out	0x37, r22	; 55
    3fb2:	e8 95       	spm
    3fb4:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    3fb6:	07 b6       	in	r0, 0x37	; 55
    3fb8:	00 fc       	sbrc	r0, 0
    3fba:	fd cf       	rjmp	.-6      	; 0x3fb6 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    3fbc:	08 95       	ret
