
optiboot_attiny841.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fe4  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         000009f0  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000352  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	27 c1       	rjmp	.+590    	; 0x1fd2 <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	04 d1       	rcall	.+520    	; 0x1faa <watchdogConfig>
    1da2:	ee e0       	ldi	r30, 0x0E	; 14
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	8e bd       	out	0x2e, r24	; 46
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    1db2:	88 e1       	ldi	r24, 0x18	; 24
    1db4:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1db8:	86 e0       	ldi	r24, 0x06	; 6
    1dba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
    1dbe:	80 e1       	ldi	r24, 0x10	; 16
    1dc0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
    1dc4:	8e e0       	ldi	r24, 0x0E	; 14
    1dc6:	f1 d0       	rcall	.+482    	; 0x1faa <watchdogConfig>
    1dc8:	ba 9a       	sbi	0x17, 2	; 23
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	20 e3       	ldi	r18, 0x30	; 48
    1dce:	3c ef       	ldi	r19, 0xFC	; 252
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	3d bd       	out	0x2d, r19	; 45
    1dd4:	2c bd       	out	0x2c, r18	; 44
    1dd6:	9e b9       	out	0x0e, r25	; 14
    1dd8:	70 9b       	sbis	0x0e, 0	; 14
    1dda:	fe cf       	rjmp	.-4      	; 0x1dd8 <main+0x54>
    1ddc:	b2 9a       	sbi	0x16, 2	; 22
    1dde:	a8 95       	wdr
    1de0:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    1de4:	47 fd       	sbrc	r20, 7
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <main+0x68>
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	99 f7       	brne	.-26     	; 0x1dd2 <main+0x4e>
    1dec:	bb 24       	eor	r11, r11
    1dee:	b3 94       	inc	r11
    1df0:	95 e0       	ldi	r25, 0x05	; 5
    1df2:	a9 2e       	mov	r10, r25
    1df4:	23 e0       	ldi	r18, 0x03	; 3
    1df6:	72 2e       	mov	r7, r18
    1df8:	3f eb       	ldi	r19, 0xBF	; 191
    1dfa:	c3 2e       	mov	r12, r19
    1dfc:	3e e0       	ldi	r19, 0x0E	; 14
    1dfe:	d3 2e       	mov	r13, r19
    1e00:	8d 2d       	mov	r24, r13
    1e02:	80 6c       	ori	r24, 0xC0	; 192
    1e04:	68 2e       	mov	r6, r24
    1e06:	c5 d0       	rcall	.+394    	; 0x1f92 <getch>
    1e08:	81 34       	cpi	r24, 0x41	; 65
    1e0a:	71 f4       	brne	.+28     	; 0x1e28 <main+0xa4>
    1e0c:	c2 d0       	rcall	.+388    	; 0x1f92 <getch>
    1e0e:	18 2f       	mov	r17, r24
    1e10:	d1 d0       	rcall	.+418    	; 0x1fb4 <verifySpace>
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	12 38       	cpi	r17, 0x82	; 130
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <main+0x9c>
    1e18:	88 e0       	ldi	r24, 0x08	; 8
    1e1a:	11 38       	cpi	r17, 0x81	; 129
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <main+0x9c>
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	b1 d0       	rcall	.+354    	; 0x1f84 <putch>
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	af d0       	rcall	.+350    	; 0x1f84 <putch>
    1e26:	ef cf       	rjmp	.-34     	; 0x1e06 <main+0x82>
    1e28:	82 34       	cpi	r24, 0x42	; 66
    1e2a:	19 f4       	brne	.+6      	; 0x1e32 <main+0xae>
    1e2c:	84 e1       	ldi	r24, 0x14	; 20
    1e2e:	ca d0       	rcall	.+404    	; 0x1fc4 <getNch>
    1e30:	f8 cf       	rjmp	.-16     	; 0x1e22 <main+0x9e>
    1e32:	85 34       	cpi	r24, 0x45	; 69
    1e34:	11 f4       	brne	.+4      	; 0x1e3a <main+0xb6>
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	fa cf       	rjmp	.-12     	; 0x1e2e <main+0xaa>
    1e3a:	85 35       	cpi	r24, 0x55	; 85
    1e3c:	41 f4       	brne	.+16     	; 0x1e4e <main+0xca>
    1e3e:	a9 d0       	rcall	.+338    	; 0x1f92 <getch>
    1e40:	c8 2f       	mov	r28, r24
    1e42:	a7 d0       	rcall	.+334    	; 0x1f92 <getch>
    1e44:	d8 2f       	mov	r29, r24
    1e46:	cc 0f       	add	r28, r28
    1e48:	dd 1f       	adc	r29, r29
    1e4a:	b4 d0       	rcall	.+360    	; 0x1fb4 <verifySpace>
    1e4c:	ea cf       	rjmp	.-44     	; 0x1e22 <main+0x9e>
    1e4e:	86 35       	cpi	r24, 0x56	; 86
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <main+0xd6>
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	b7 d0       	rcall	.+366    	; 0x1fc4 <getNch>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	e3 cf       	rjmp	.-58     	; 0x1e20 <main+0x9c>
    1e5a:	84 36       	cpi	r24, 0x64	; 100
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <main+0xdc>
    1e5e:	5a c0       	rjmp	.+180    	; 0x1f14 <main+0x190>
    1e60:	98 d0       	rcall	.+304    	; 0x1f92 <getch>
    1e62:	97 d0       	rcall	.+302    	; 0x1f92 <getch>
    1e64:	58 2e       	mov	r5, r24
    1e66:	95 d0       	rcall	.+298    	; 0x1f92 <getch>
    1e68:	48 2e       	mov	r4, r24
    1e6a:	00 e0       	ldi	r16, 0x00	; 0
    1e6c:	11 e0       	ldi	r17, 0x01	; 1
    1e6e:	48 01       	movw	r8, r16
    1e70:	0f 5f       	subi	r16, 0xFF	; 255
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	8e d0       	rcall	.+284    	; 0x1f92 <getch>
    1e76:	f4 01       	movw	r30, r8
    1e78:	80 83       	st	Z, r24
    1e7a:	50 12       	cpse	r5, r16
    1e7c:	f8 cf       	rjmp	.-16     	; 0x1e6e <main+0xea>
    1e7e:	9a d0       	rcall	.+308    	; 0x1fb4 <verifySpace>
    1e80:	20 97       	sbiw	r28, 0x00	; 0
    1e82:	81 f4       	brne	.+32     	; 0x1ea4 <main+0x120>
    1e84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    1e88:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_edata+0x24>
    1e8c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
    1e90:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_edata+0x25>
    1e94:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
    1e98:	60 92 01 01 	sts	0x0101, r6	; 0x800101 <_edata+0x1>
    1e9c:	f5 e4       	ldi	r31, 0x45	; 69
    1e9e:	4f 12       	cpse	r4, r31
    1ea0:	1a c0       	rjmp	.+52     	; 0x1ed6 <main+0x152>
    1ea2:	ff cf       	rjmp	.-2      	; 0x1ea2 <main+0x11e>
    1ea4:	c0 31       	cpi	r28, 0x10	; 16
    1ea6:	d1 05       	cpc	r29, r1
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <main+0x118>
    1eaa:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <_edata+0x24>
    1eae:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <_edata+0x25>
    1eb2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_edata+0xc>
    1eb6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_edata+0x26>
    1eba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_edata+0xd>
    1ebe:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_edata+0x27>
    1ec2:	c7 01       	movw	r24, r14
    1ec4:	0e 97       	sbiw	r24, 0x0e	; 14
    1ec6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_edata+0xc>
    1eca:	89 2f       	mov	r24, r25
    1ecc:	8f 70       	andi	r24, 0x0F	; 15
    1ece:	80 6c       	ori	r24, 0xC0	; 192
    1ed0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_edata+0xd>
    1ed4:	e3 cf       	rjmp	.-58     	; 0x1e9c <main+0x118>
    1ed6:	8c 2f       	mov	r24, r28
    1ed8:	8f 73       	andi	r24, 0x3F	; 63
    1eda:	fe 01       	movw	r30, r28
    1edc:	31 f4       	brne	.+12     	; 0x1eea <main+0x166>
    1ede:	77 be       	out	0x37, r7	; 55
    1ee0:	e8 95       	spm
    1ee2:	07 b6       	in	r0, 0x37	; 55
    1ee4:	00 fc       	sbrc	r0, 0
    1ee6:	fd cf       	rjmp	.-6      	; 0x1ee2 <main+0x15e>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	d9 01       	movw	r26, r18
    1ef0:	2e 5f       	subi	r18, 0xFE	; 254
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	8d 91       	ld	r24, X+
    1ef6:	9c 91       	ld	r25, X
    1ef8:	0c 01       	movw	r0, r24
    1efa:	b7 be       	out	0x37, r11	; 55
    1efc:	e8 95       	spm
    1efe:	11 24       	eor	r1, r1
    1f00:	32 96       	adiw	r30, 0x02	; 2
    1f02:	52 12       	cpse	r5, r18
    1f04:	f4 cf       	rjmp	.-24     	; 0x1eee <main+0x16a>
    1f06:	fe 01       	movw	r30, r28
    1f08:	a7 be       	out	0x37, r10	; 55
    1f0a:	e8 95       	spm
    1f0c:	07 b6       	in	r0, 0x37	; 55
    1f0e:	00 fc       	sbrc	r0, 0
    1f10:	fd cf       	rjmp	.-6      	; 0x1f0c <main+0x188>
    1f12:	87 cf       	rjmp	.-242    	; 0x1e22 <main+0x9e>
    1f14:	84 37       	cpi	r24, 0x74	; 116
    1f16:	39 f5       	brne	.+78     	; 0x1f66 <main+0x1e2>
    1f18:	3c d0       	rcall	.+120    	; 0x1f92 <getch>
    1f1a:	3b d0       	rcall	.+118    	; 0x1f92 <getch>
    1f1c:	98 2e       	mov	r9, r24
    1f1e:	39 d0       	rcall	.+114    	; 0x1f92 <getch>
    1f20:	49 d0       	rcall	.+146    	; 0x1fb4 <verifySpace>
    1f22:	8e 01       	movw	r16, r28
    1f24:	9c 0e       	add	r9, r28
    1f26:	01 15       	cp	r16, r1
    1f28:	11 05       	cpc	r17, r1
    1f2a:	41 f4       	brne	.+16     	; 0x1f3c <main+0x1b8>
    1f2c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_edata+0x24>
    1f30:	29 d0       	rcall	.+82     	; 0x1f84 <putch>
    1f32:	0f 5f       	subi	r16, 0xFF	; 255
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	90 12       	cpse	r9, r16
    1f38:	f6 cf       	rjmp	.-20     	; 0x1f26 <main+0x1a2>
    1f3a:	73 cf       	rjmp	.-282    	; 0x1e22 <main+0x9e>
    1f3c:	01 30       	cpi	r16, 0x01	; 1
    1f3e:	11 05       	cpc	r17, r1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <main+0x1c4>
    1f42:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_edata+0x25>
    1f46:	f4 cf       	rjmp	.-24     	; 0x1f30 <main+0x1ac>
    1f48:	0c 31       	cpi	r16, 0x1C	; 28
    1f4a:	11 05       	cpc	r17, r1
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <main+0x1d0>
    1f4e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_edata+0x26>
    1f52:	ee cf       	rjmp	.-36     	; 0x1f30 <main+0x1ac>
    1f54:	0d 31       	cpi	r16, 0x1D	; 29
    1f56:	11 05       	cpc	r17, r1
    1f58:	19 f4       	brne	.+6      	; 0x1f60 <main+0x1dc>
    1f5a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_edata+0x27>
    1f5e:	e8 cf       	rjmp	.-48     	; 0x1f30 <main+0x1ac>
    1f60:	f8 01       	movw	r30, r16
    1f62:	84 91       	lpm	r24, Z
    1f64:	e5 cf       	rjmp	.-54     	; 0x1f30 <main+0x1ac>
    1f66:	85 37       	cpi	r24, 0x75	; 117
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <main+0x1f4>
    1f6a:	24 d0       	rcall	.+72     	; 0x1fb4 <verifySpace>
    1f6c:	8e e1       	ldi	r24, 0x1E	; 30
    1f6e:	0a d0       	rcall	.+20     	; 0x1f84 <putch>
    1f70:	83 e9       	ldi	r24, 0x93	; 147
    1f72:	08 d0       	rcall	.+16     	; 0x1f84 <putch>
    1f74:	85 e1       	ldi	r24, 0x15	; 21
    1f76:	54 cf       	rjmp	.-344    	; 0x1e20 <main+0x9c>
    1f78:	81 35       	cpi	r24, 0x51	; 81
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <main+0x1fa>
    1f7c:	66 cf       	rjmp	.-308    	; 0x1e4a <main+0xc6>
    1f7e:	88 e0       	ldi	r24, 0x08	; 8
    1f80:	14 d0       	rcall	.+40     	; 0x1faa <watchdogConfig>
    1f82:	63 cf       	rjmp	.-314    	; 0x1e4a <main+0xc6>

00001f84 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f84:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    1f88:	95 ff       	sbrs	r25, 5
    1f8a:	fc cf       	rjmp	.-8      	; 0x1f84 <putch>
  UART_UDR = ch;
    1f8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f90:	08 95       	ret

00001f92 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f92:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    1f96:	87 ff       	sbrs	r24, 7
    1f98:	fc cf       	rjmp	.-8      	; 0x1f92 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f9a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    1f9e:	84 fd       	sbrc	r24, 4
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1fa2:	a8 95       	wdr
  ch = UART_UDR;
    1fa4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
}
    1fa8:	08 95       	ret

00001faa <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    1faa:	98 ed       	ldi	r25, 0xD8	; 216
    1fac:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1fb0:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
    1fb2:	08 95       	ret

00001fb4 <verifySpace>:
  if (getch() != CRC_EOP) {
    1fb4:	ee df       	rcall	.-36     	; 0x1f92 <getch>
    1fb6:	80 32       	cpi	r24, 0x20	; 32
    1fb8:	19 f0       	breq	.+6      	; 0x1fc0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fba:	88 e0       	ldi	r24, 0x08	; 8
    1fbc:	f6 df       	rcall	.-20     	; 0x1faa <watchdogConfig>
    1fbe:	ff cf       	rjmp	.-2      	; 0x1fbe <verifySpace+0xa>
  putch(STK_INSYNC);
    1fc0:	84 e1       	ldi	r24, 0x14	; 20
    1fc2:	e0 cf       	rjmp	.-64     	; 0x1f84 <putch>

00001fc4 <getNch>:
void getNch(uint8_t count) {
    1fc4:	cf 93       	push	r28
    1fc6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fc8:	e4 df       	rcall	.-56     	; 0x1f92 <getch>
    1fca:	c1 50       	subi	r28, 0x01	; 1
    1fcc:	e9 f7       	brne	.-6      	; 0x1fc8 <getNch+0x4>
}
    1fce:	cf 91       	pop	r28
  verifySpace();
    1fd0:	f1 cf       	rjmp	.-30     	; 0x1fb4 <verifySpace>

00001fd2 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	0a 01       	movw	r0, r20
    1fd6:	67 bf       	out	0x37, r22	; 55
    1fd8:	e8 95       	spm
    1fda:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fdc:	07 b6       	in	r0, 0x37	; 55
    1fde:	00 fc       	sbrc	r0, 0
    1fe0:	fd cf       	rjmp	.-6      	; 0x1fdc <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fe2:	08 95       	ret
