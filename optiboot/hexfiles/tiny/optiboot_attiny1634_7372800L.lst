
optiboot_attiny1634.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fc6  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00003d80  00003d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  000002da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         0000096c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000346  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <main>
    3d82:	18 c1       	rjmp	.+560    	; 0x3fb4 <do_spm>

00003d84 <main>:
    3d84:	11 24       	eor	r1, r1
    3d86:	85 b7       	in	r24, 0x35	; 53
    3d88:	88 23       	and	r24, r24
    3d8a:	71 f0       	breq	.+28     	; 0x3da8 <main+0x24>
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	9a 70       	andi	r25, 0x0A	; 10
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	51 f0       	breq	.+20     	; 0x3da8 <main+0x24>
    3d94:	81 ff       	sbrs	r24, 1
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <main+0x18>
    3d98:	97 ef       	ldi	r25, 0xF7	; 247
    3d9a:	95 bf       	out	0x35, r25	; 53
    3d9c:	28 2e       	mov	r2, r24
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	f6 d0       	rcall	.+492    	; 0x3f8e <watchdogConfig>
    3da2:	e4 e3       	ldi	r30, 0x34	; 52
    3da4:	ff 27       	eor	r31, r31
    3da6:	09 94       	ijmp
    3da8:	85 e0       	ldi	r24, 0x05	; 5
    3daa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	86 bd       	out	0x26, r24	; 38
    3db2:	88 e1       	ldi	r24, 0x18	; 24
    3db4:	85 bd       	out	0x25, r24	; 37
    3db6:	86 e0       	ldi	r24, 0x06	; 6
    3db8:	84 bd       	out	0x24, r24	; 36
    3dba:	8f e0       	ldi	r24, 0x0F	; 15
    3dbc:	81 bd       	out	0x21, r24	; 33
    3dbe:	8e e0       	ldi	r24, 0x0E	; 14
    3dc0:	e6 d0       	rcall	.+460    	; 0x3f8e <watchdogConfig>
    3dc2:	40 9a       	sbi	0x08, 0	; 8
    3dc4:	86 e0       	ldi	r24, 0x06	; 6
    3dc6:	2e e3       	ldi	r18, 0x3E	; 62
    3dc8:	3e ef       	ldi	r19, 0xFE	; 254
    3dca:	90 e8       	ldi	r25, 0x80	; 128
    3dcc:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    3dd0:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    3dd4:	99 bf       	out	0x39, r25	; 57
    3dd6:	09 b6       	in	r0, 0x39	; 57
    3dd8:	07 fe       	sbrs	r0, 7
    3dda:	fd cf       	rjmp	.-6      	; 0x3dd6 <main+0x52>
    3ddc:	38 9a       	sbi	0x07, 0	; 7
    3dde:	a8 95       	wdr
    3de0:	06 b4       	in	r0, 0x26	; 38
    3de2:	07 fc       	sbrc	r0, 7
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <main+0x66>
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	89 f7       	brne	.-30     	; 0x3dcc <main+0x48>
    3dea:	80 ec       	ldi	r24, 0xC0	; 192
    3dec:	9e e1       	ldi	r25, 0x1E	; 30
    3dee:	e9 2e       	mov	r14, r25
    3df0:	bb 24       	eor	r11, r11
    3df2:	b3 94       	inc	r11
    3df4:	25 e0       	ldi	r18, 0x05	; 5
    3df6:	a2 2e       	mov	r10, r18
    3df8:	33 e0       	ldi	r19, 0x03	; 3
    3dfa:	73 2e       	mov	r7, r19
    3dfc:	6c 01       	movw	r12, r24
    3dfe:	be d0       	rcall	.+380    	; 0x3f7c <getch>
    3e00:	81 34       	cpi	r24, 0x41	; 65
    3e02:	71 f4       	brne	.+28     	; 0x3e20 <main+0x9c>
    3e04:	bb d0       	rcall	.+374    	; 0x3f7c <getch>
    3e06:	18 2f       	mov	r17, r24
    3e08:	c6 d0       	rcall	.+396    	; 0x3f96 <verifySpace>
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	12 38       	cpi	r17, 0x82	; 130
    3e0e:	21 f0       	breq	.+8      	; 0x3e18 <main+0x94>
    3e10:	88 e0       	ldi	r24, 0x08	; 8
    3e12:	11 38       	cpi	r17, 0x81	; 129
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <main+0x94>
    3e16:	83 e0       	ldi	r24, 0x03	; 3
    3e18:	ac d0       	rcall	.+344    	; 0x3f72 <putch>
    3e1a:	80 e1       	ldi	r24, 0x10	; 16
    3e1c:	aa d0       	rcall	.+340    	; 0x3f72 <putch>
    3e1e:	ef cf       	rjmp	.-34     	; 0x3dfe <main+0x7a>
    3e20:	82 34       	cpi	r24, 0x42	; 66
    3e22:	19 f4       	brne	.+6      	; 0x3e2a <main+0xa6>
    3e24:	84 e1       	ldi	r24, 0x14	; 20
    3e26:	bf d0       	rcall	.+382    	; 0x3fa6 <getNch>
    3e28:	f8 cf       	rjmp	.-16     	; 0x3e1a <main+0x96>
    3e2a:	85 34       	cpi	r24, 0x45	; 69
    3e2c:	11 f4       	brne	.+4      	; 0x3e32 <main+0xae>
    3e2e:	85 e0       	ldi	r24, 0x05	; 5
    3e30:	fa cf       	rjmp	.-12     	; 0x3e26 <main+0xa2>
    3e32:	85 35       	cpi	r24, 0x55	; 85
    3e34:	41 f4       	brne	.+16     	; 0x3e46 <main+0xc2>
    3e36:	a2 d0       	rcall	.+324    	; 0x3f7c <getch>
    3e38:	c8 2f       	mov	r28, r24
    3e3a:	a0 d0       	rcall	.+320    	; 0x3f7c <getch>
    3e3c:	d8 2f       	mov	r29, r24
    3e3e:	cc 0f       	add	r28, r28
    3e40:	dd 1f       	adc	r29, r29
    3e42:	a9 d0       	rcall	.+338    	; 0x3f96 <verifySpace>
    3e44:	ea cf       	rjmp	.-44     	; 0x3e1a <main+0x96>
    3e46:	86 35       	cpi	r24, 0x56	; 86
    3e48:	21 f4       	brne	.+8      	; 0x3e52 <main+0xce>
    3e4a:	84 e0       	ldi	r24, 0x04	; 4
    3e4c:	ac d0       	rcall	.+344    	; 0x3fa6 <getNch>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	e3 cf       	rjmp	.-58     	; 0x3e18 <main+0x94>
    3e52:	84 36       	cpi	r24, 0x64	; 100
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <main+0xd4>
    3e56:	55 c0       	rjmp	.+170    	; 0x3f02 <main+0x17e>
    3e58:	91 d0       	rcall	.+290    	; 0x3f7c <getch>
    3e5a:	90 d0       	rcall	.+288    	; 0x3f7c <getch>
    3e5c:	f8 2e       	mov	r15, r24
    3e5e:	8e d0       	rcall	.+284    	; 0x3f7c <getch>
    3e60:	68 2e       	mov	r6, r24
    3e62:	00 e0       	ldi	r16, 0x00	; 0
    3e64:	11 e0       	ldi	r17, 0x01	; 1
    3e66:	48 01       	movw	r8, r16
    3e68:	0f 5f       	subi	r16, 0xFF	; 255
    3e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6c:	87 d0       	rcall	.+270    	; 0x3f7c <getch>
    3e6e:	f4 01       	movw	r30, r8
    3e70:	80 83       	st	Z, r24
    3e72:	f0 12       	cpse	r15, r16
    3e74:	f8 cf       	rjmp	.-16     	; 0x3e66 <main+0xe2>
    3e76:	8f d0       	rcall	.+286    	; 0x3f96 <verifySpace>
    3e78:	20 97       	sbiw	r28, 0x00	; 0
    3e7a:	81 f4       	brne	.+32     	; 0x3e9c <main+0x118>
    3e7c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    3e80:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_edata+0x44>
    3e84:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
    3e88:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_edata+0x45>
    3e8c:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <_edata+0x2>
    3e90:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <_edata+0x3>
    3e94:	f5 e4       	ldi	r31, 0x45	; 69
    3e96:	6f 12       	cpse	r6, r31
    3e98:	15 c0       	rjmp	.+42     	; 0x3ec4 <main+0x140>
    3e9a:	ff cf       	rjmp	.-2      	; 0x3e9a <main+0x116>
    3e9c:	c0 36       	cpi	r28, 0x60	; 96
    3e9e:	d1 05       	cpc	r29, r1
    3ea0:	c9 f7       	brne	.-14     	; 0x3e94 <main+0x110>
    3ea2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_edata+0xa>
    3ea6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_edata+0x46>
    3eaa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_edata+0xb>
    3eae:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_edata+0x47>
    3eb2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3eb6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_edata+0xa>
    3eba:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3ebe:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_edata+0xb>
    3ec2:	e8 cf       	rjmp	.-48     	; 0x3e94 <main+0x110>
    3ec4:	8c 2f       	mov	r24, r28
    3ec6:	8f 77       	andi	r24, 0x7F	; 127
    3ec8:	fe 01       	movw	r30, r28
    3eca:	31 f4       	brne	.+12     	; 0x3ed8 <main+0x154>
    3ecc:	77 be       	out	0x37, r7	; 55
    3ece:	e8 95       	spm
    3ed0:	07 b6       	in	r0, 0x37	; 55
    3ed2:	00 fc       	sbrc	r0, 0
    3ed4:	fd cf       	rjmp	.-6      	; 0x3ed0 <main+0x14c>
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	31 e0       	ldi	r19, 0x01	; 1
    3edc:	d9 01       	movw	r26, r18
    3ede:	2e 5f       	subi	r18, 0xFE	; 254
    3ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee2:	8d 91       	ld	r24, X+
    3ee4:	9c 91       	ld	r25, X
    3ee6:	0c 01       	movw	r0, r24
    3ee8:	b7 be       	out	0x37, r11	; 55
    3eea:	e8 95       	spm
    3eec:	11 24       	eor	r1, r1
    3eee:	32 96       	adiw	r30, 0x02	; 2
    3ef0:	f2 12       	cpse	r15, r18
    3ef2:	f4 cf       	rjmp	.-24     	; 0x3edc <main+0x158>
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	a7 be       	out	0x37, r10	; 55
    3ef8:	e8 95       	spm
    3efa:	07 b6       	in	r0, 0x37	; 55
    3efc:	00 fc       	sbrc	r0, 0
    3efe:	fd cf       	rjmp	.-6      	; 0x3efa <main+0x176>
    3f00:	8c cf       	rjmp	.-232    	; 0x3e1a <main+0x96>
    3f02:	84 37       	cpi	r24, 0x74	; 116
    3f04:	39 f5       	brne	.+78     	; 0x3f54 <main+0x1d0>
    3f06:	3a d0       	rcall	.+116    	; 0x3f7c <getch>
    3f08:	39 d0       	rcall	.+114    	; 0x3f7c <getch>
    3f0a:	f8 2e       	mov	r15, r24
    3f0c:	37 d0       	rcall	.+110    	; 0x3f7c <getch>
    3f0e:	43 d0       	rcall	.+134    	; 0x3f96 <verifySpace>
    3f10:	8e 01       	movw	r16, r28
    3f12:	fc 0e       	add	r15, r28
    3f14:	02 30       	cpi	r16, 0x02	; 2
    3f16:	11 05       	cpc	r17, r1
    3f18:	41 f4       	brne	.+16     	; 0x3f2a <main+0x1a6>
    3f1a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3f1e:	29 d0       	rcall	.+82     	; 0x3f72 <putch>
    3f20:	0f 5f       	subi	r16, 0xFF	; 255
    3f22:	1f 4f       	sbci	r17, 0xFF	; 255
    3f24:	f0 12       	cpse	r15, r16
    3f26:	f6 cf       	rjmp	.-20     	; 0x3f14 <main+0x190>
    3f28:	78 cf       	rjmp	.-272    	; 0x3e1a <main+0x96>
    3f2a:	03 30       	cpi	r16, 0x03	; 3
    3f2c:	11 05       	cpc	r17, r1
    3f2e:	19 f4       	brne	.+6      	; 0x3f36 <main+0x1b2>
    3f30:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3f34:	f4 cf       	rjmp	.-24     	; 0x3f1e <main+0x19a>
    3f36:	0a 36       	cpi	r16, 0x6A	; 106
    3f38:	11 05       	cpc	r17, r1
    3f3a:	19 f4       	brne	.+6      	; 0x3f42 <main+0x1be>
    3f3c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_edata+0x46>
    3f40:	ee cf       	rjmp	.-36     	; 0x3f1e <main+0x19a>
    3f42:	0b 36       	cpi	r16, 0x6B	; 107
    3f44:	11 05       	cpc	r17, r1
    3f46:	19 f4       	brne	.+6      	; 0x3f4e <main+0x1ca>
    3f48:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_edata+0x47>
    3f4c:	e8 cf       	rjmp	.-48     	; 0x3f1e <main+0x19a>
    3f4e:	f8 01       	movw	r30, r16
    3f50:	84 91       	lpm	r24, Z
    3f52:	e5 cf       	rjmp	.-54     	; 0x3f1e <main+0x19a>
    3f54:	85 37       	cpi	r24, 0x75	; 117
    3f56:	39 f4       	brne	.+14     	; 0x3f66 <main+0x1e2>
    3f58:	1e d0       	rcall	.+60     	; 0x3f96 <verifySpace>
    3f5a:	8e e1       	ldi	r24, 0x1E	; 30
    3f5c:	0a d0       	rcall	.+20     	; 0x3f72 <putch>
    3f5e:	84 e9       	ldi	r24, 0x94	; 148
    3f60:	08 d0       	rcall	.+16     	; 0x3f72 <putch>
    3f62:	82 e1       	ldi	r24, 0x12	; 18
    3f64:	59 cf       	rjmp	.-334    	; 0x3e18 <main+0x94>
    3f66:	81 35       	cpi	r24, 0x51	; 81
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <main+0x1e8>
    3f6a:	6b cf       	rjmp	.-298    	; 0x3e42 <main+0xbe>
    3f6c:	88 e0       	ldi	r24, 0x08	; 8
    3f6e:	0f d0       	rcall	.+30     	; 0x3f8e <watchdogConfig>
    3f70:	68 cf       	rjmp	.-304    	; 0x3e42 <main+0xbe>

00003f72 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f72:	06 b4       	in	r0, 0x26	; 38
    3f74:	05 fe       	sbrs	r0, 5
    3f76:	fd cf       	rjmp	.-6      	; 0x3f72 <putch>
  UART_UDR = ch;
    3f78:	80 bd       	out	0x20, r24	; 32
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    3f7a:	08 95       	ret

00003f7c <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f7c:	06 b4       	in	r0, 0x26	; 38
    3f7e:	07 fe       	sbrs	r0, 7
    3f80:	fd cf       	rjmp	.-6      	; 0x3f7c <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f82:	06 b4       	in	r0, 0x26	; 38
    3f84:	04 fc       	sbrc	r0, 4
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <getch+0xe>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f88:	a8 95       	wdr
  ch = UART_UDR;
    3f8a:	80 b5       	in	r24, 0x20	; 32
}
    3f8c:	08 95       	ret

00003f8e <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    3f8e:	98 ed       	ldi	r25, 0xD8	; 216
    3f90:	9f bd       	out	0x2f, r25	; 47
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3f92:	80 bf       	out	0x30, r24	; 48
#else
  WDTCR= x;
#endif
}
    3f94:	08 95       	ret

00003f96 <verifySpace>:
  if (getch() != CRC_EOP) {
    3f96:	f2 df       	rcall	.-28     	; 0x3f7c <getch>
    3f98:	80 32       	cpi	r24, 0x20	; 32
    3f9a:	19 f0       	breq	.+6      	; 0x3fa2 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3f9c:	88 e0       	ldi	r24, 0x08	; 8
    3f9e:	f7 df       	rcall	.-18     	; 0x3f8e <watchdogConfig>
    3fa0:	ff cf       	rjmp	.-2      	; 0x3fa0 <verifySpace+0xa>
  putch(STK_INSYNC);
    3fa2:	84 e1       	ldi	r24, 0x14	; 20
    3fa4:	e6 cf       	rjmp	.-52     	; 0x3f72 <putch>

00003fa6 <getNch>:
void getNch(uint8_t count) {
    3fa6:	cf 93       	push	r28
    3fa8:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3faa:	e8 df       	rcall	.-48     	; 0x3f7c <getch>
    3fac:	c1 50       	subi	r28, 0x01	; 1
    3fae:	e9 f7       	brne	.-6      	; 0x3faa <getNch+0x4>
}
    3fb0:	cf 91       	pop	r28
  verifySpace();
    3fb2:	f1 cf       	rjmp	.-30     	; 0x3f96 <verifySpace>

00003fb4 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	0a 01       	movw	r0, r20
    3fb8:	67 bf       	out	0x37, r22	; 55
    3fba:	e8 95       	spm
    3fbc:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    3fbe:	07 b6       	in	r0, 0x37	; 55
    3fc0:	00 fc       	sbrc	r0, 0
    3fc2:	fd cf       	rjmp	.-6      	; 0x3fbe <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    3fc4:	08 95       	ret
