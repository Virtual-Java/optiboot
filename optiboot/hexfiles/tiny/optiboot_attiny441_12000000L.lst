
optiboot_attiny441.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000fe4  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000d80  00000d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00000ffe  00000ffe  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         000009f0  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000352  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <main>
 d82:	27 c1       	rjmp	.+590    	; 0xfd2 <do_spm>

00000d84 <main>:
 d84:	11 24       	eor	r1, r1
 d86:	84 b7       	in	r24, 0x34	; 52
 d88:	88 23       	and	r24, r24
 d8a:	71 f0       	breq	.+28     	; 0xda8 <main+0x24>
 d8c:	98 2f       	mov	r25, r24
 d8e:	9a 70       	andi	r25, 0x0A	; 10
 d90:	92 30       	cpi	r25, 0x02	; 2
 d92:	51 f0       	breq	.+20     	; 0xda8 <main+0x24>
 d94:	81 ff       	sbrs	r24, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <main+0x18>
 d98:	97 ef       	ldi	r25, 0xF7	; 247
 d9a:	94 bf       	out	0x34, r25	; 52
 d9c:	28 2e       	mov	r2, r24
 d9e:	80 e0       	ldi	r24, 0x00	; 0
 da0:	04 d1       	rcall	.+520    	; 0xfaa <watchdogConfig>
 da2:	ee e0       	ldi	r30, 0x0E	; 14
 da4:	ff 27       	eor	r31, r31
 da6:	09 94       	ijmp
 da8:	85 e0       	ldi	r24, 0x05	; 5
 daa:	8e bd       	out	0x2e, r24	; 46
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 db2:	88 e1       	ldi	r24, 0x18	; 24
 db4:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 db8:	86 e0       	ldi	r24, 0x06	; 6
 dba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
 dbe:	8c e0       	ldi	r24, 0x0C	; 12
 dc0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 dc4:	8e e0       	ldi	r24, 0x0E	; 14
 dc6:	f1 d0       	rcall	.+482    	; 0xfaa <watchdogConfig>
 dc8:	ba 9a       	sbi	0x17, 2	; 23
 dca:	86 e0       	ldi	r24, 0x06	; 6
 dcc:	24 e2       	ldi	r18, 0x24	; 36
 dce:	3d ef       	ldi	r19, 0xFD	; 253
 dd0:	91 e0       	ldi	r25, 0x01	; 1
 dd2:	3d bd       	out	0x2d, r19	; 45
 dd4:	2c bd       	out	0x2c, r18	; 44
 dd6:	9e b9       	out	0x0e, r25	; 14
 dd8:	70 9b       	sbis	0x0e, 0	; 14
 dda:	fe cf       	rjmp	.-4      	; 0xdd8 <main+0x54>
 ddc:	b2 9a       	sbi	0x16, 2	; 22
 dde:	a8 95       	wdr
 de0:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 de4:	47 fd       	sbrc	r20, 7
 de6:	02 c0       	rjmp	.+4      	; 0xdec <main+0x68>
 de8:	81 50       	subi	r24, 0x01	; 1
 dea:	99 f7       	brne	.-26     	; 0xdd2 <main+0x4e>
 dec:	bb 24       	eor	r11, r11
 dee:	b3 94       	inc	r11
 df0:	95 e0       	ldi	r25, 0x05	; 5
 df2:	a9 2e       	mov	r10, r25
 df4:	23 e0       	ldi	r18, 0x03	; 3
 df6:	72 2e       	mov	r7, r18
 df8:	3f eb       	ldi	r19, 0xBF	; 191
 dfa:	c3 2e       	mov	r12, r19
 dfc:	36 e0       	ldi	r19, 0x06	; 6
 dfe:	d3 2e       	mov	r13, r19
 e00:	8d 2d       	mov	r24, r13
 e02:	80 6c       	ori	r24, 0xC0	; 192
 e04:	68 2e       	mov	r6, r24
 e06:	c5 d0       	rcall	.+394    	; 0xf92 <getch>
 e08:	81 34       	cpi	r24, 0x41	; 65
 e0a:	71 f4       	brne	.+28     	; 0xe28 <main+0xa4>
 e0c:	c2 d0       	rcall	.+388    	; 0xf92 <getch>
 e0e:	18 2f       	mov	r17, r24
 e10:	d1 d0       	rcall	.+418    	; 0xfb4 <verifySpace>
 e12:	82 e0       	ldi	r24, 0x02	; 2
 e14:	12 38       	cpi	r17, 0x82	; 130
 e16:	21 f0       	breq	.+8      	; 0xe20 <main+0x9c>
 e18:	88 e0       	ldi	r24, 0x08	; 8
 e1a:	11 38       	cpi	r17, 0x81	; 129
 e1c:	09 f0       	breq	.+2      	; 0xe20 <main+0x9c>
 e1e:	83 e0       	ldi	r24, 0x03	; 3
 e20:	b1 d0       	rcall	.+354    	; 0xf84 <putch>
 e22:	80 e1       	ldi	r24, 0x10	; 16
 e24:	af d0       	rcall	.+350    	; 0xf84 <putch>
 e26:	ef cf       	rjmp	.-34     	; 0xe06 <main+0x82>
 e28:	82 34       	cpi	r24, 0x42	; 66
 e2a:	19 f4       	brne	.+6      	; 0xe32 <main+0xae>
 e2c:	84 e1       	ldi	r24, 0x14	; 20
 e2e:	ca d0       	rcall	.+404    	; 0xfc4 <getNch>
 e30:	f8 cf       	rjmp	.-16     	; 0xe22 <main+0x9e>
 e32:	85 34       	cpi	r24, 0x45	; 69
 e34:	11 f4       	brne	.+4      	; 0xe3a <main+0xb6>
 e36:	85 e0       	ldi	r24, 0x05	; 5
 e38:	fa cf       	rjmp	.-12     	; 0xe2e <main+0xaa>
 e3a:	85 35       	cpi	r24, 0x55	; 85
 e3c:	41 f4       	brne	.+16     	; 0xe4e <main+0xca>
 e3e:	a9 d0       	rcall	.+338    	; 0xf92 <getch>
 e40:	c8 2f       	mov	r28, r24
 e42:	a7 d0       	rcall	.+334    	; 0xf92 <getch>
 e44:	d8 2f       	mov	r29, r24
 e46:	cc 0f       	add	r28, r28
 e48:	dd 1f       	adc	r29, r29
 e4a:	b4 d0       	rcall	.+360    	; 0xfb4 <verifySpace>
 e4c:	ea cf       	rjmp	.-44     	; 0xe22 <main+0x9e>
 e4e:	86 35       	cpi	r24, 0x56	; 86
 e50:	21 f4       	brne	.+8      	; 0xe5a <main+0xd6>
 e52:	84 e0       	ldi	r24, 0x04	; 4
 e54:	b7 d0       	rcall	.+366    	; 0xfc4 <getNch>
 e56:	80 e0       	ldi	r24, 0x00	; 0
 e58:	e3 cf       	rjmp	.-58     	; 0xe20 <main+0x9c>
 e5a:	84 36       	cpi	r24, 0x64	; 100
 e5c:	09 f0       	breq	.+2      	; 0xe60 <main+0xdc>
 e5e:	5a c0       	rjmp	.+180    	; 0xf14 <main+0x190>
 e60:	98 d0       	rcall	.+304    	; 0xf92 <getch>
 e62:	97 d0       	rcall	.+302    	; 0xf92 <getch>
 e64:	58 2e       	mov	r5, r24
 e66:	95 d0       	rcall	.+298    	; 0xf92 <getch>
 e68:	48 2e       	mov	r4, r24
 e6a:	00 e0       	ldi	r16, 0x00	; 0
 e6c:	11 e0       	ldi	r17, 0x01	; 1
 e6e:	48 01       	movw	r8, r16
 e70:	0f 5f       	subi	r16, 0xFF	; 255
 e72:	1f 4f       	sbci	r17, 0xFF	; 255
 e74:	8e d0       	rcall	.+284    	; 0xf92 <getch>
 e76:	f4 01       	movw	r30, r8
 e78:	80 83       	st	Z, r24
 e7a:	50 12       	cpse	r5, r16
 e7c:	f8 cf       	rjmp	.-16     	; 0xe6e <main+0xea>
 e7e:	9a d0       	rcall	.+308    	; 0xfb4 <verifySpace>
 e80:	20 97       	sbiw	r28, 0x00	; 0
 e82:	81 f4       	brne	.+32     	; 0xea4 <main+0x120>
 e84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 e88:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_edata+0x24>
 e8c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 e90:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_edata+0x25>
 e94:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
 e98:	60 92 01 01 	sts	0x0101, r6	; 0x800101 <_edata+0x1>
 e9c:	f5 e4       	ldi	r31, 0x45	; 69
 e9e:	4f 12       	cpse	r4, r31
 ea0:	1a c0       	rjmp	.+52     	; 0xed6 <main+0x152>
 ea2:	ff cf       	rjmp	.-2      	; 0xea2 <main+0x11e>
 ea4:	c0 31       	cpi	r28, 0x10	; 16
 ea6:	d1 05       	cpc	r29, r1
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <main+0x118>
 eaa:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <_edata+0x24>
 eae:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <_edata+0x25>
 eb2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_edata+0xc>
 eb6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_edata+0x26>
 eba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_edata+0xd>
 ebe:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_edata+0x27>
 ec2:	c7 01       	movw	r24, r14
 ec4:	0e 97       	sbiw	r24, 0x0e	; 14
 ec6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_edata+0xc>
 eca:	89 2f       	mov	r24, r25
 ecc:	8f 70       	andi	r24, 0x0F	; 15
 ece:	80 6c       	ori	r24, 0xC0	; 192
 ed0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_edata+0xd>
 ed4:	e3 cf       	rjmp	.-58     	; 0xe9c <main+0x118>
 ed6:	8c 2f       	mov	r24, r28
 ed8:	8f 73       	andi	r24, 0x3F	; 63
 eda:	fe 01       	movw	r30, r28
 edc:	31 f4       	brne	.+12     	; 0xeea <main+0x166>
 ede:	77 be       	out	0x37, r7	; 55
 ee0:	e8 95       	spm
 ee2:	07 b6       	in	r0, 0x37	; 55
 ee4:	00 fc       	sbrc	r0, 0
 ee6:	fd cf       	rjmp	.-6      	; 0xee2 <main+0x15e>
 ee8:	fe 01       	movw	r30, r28
 eea:	20 e0       	ldi	r18, 0x00	; 0
 eec:	31 e0       	ldi	r19, 0x01	; 1
 eee:	d9 01       	movw	r26, r18
 ef0:	2e 5f       	subi	r18, 0xFE	; 254
 ef2:	3f 4f       	sbci	r19, 0xFF	; 255
 ef4:	8d 91       	ld	r24, X+
 ef6:	9c 91       	ld	r25, X
 ef8:	0c 01       	movw	r0, r24
 efa:	b7 be       	out	0x37, r11	; 55
 efc:	e8 95       	spm
 efe:	11 24       	eor	r1, r1
 f00:	32 96       	adiw	r30, 0x02	; 2
 f02:	52 12       	cpse	r5, r18
 f04:	f4 cf       	rjmp	.-24     	; 0xeee <main+0x16a>
 f06:	fe 01       	movw	r30, r28
 f08:	a7 be       	out	0x37, r10	; 55
 f0a:	e8 95       	spm
 f0c:	07 b6       	in	r0, 0x37	; 55
 f0e:	00 fc       	sbrc	r0, 0
 f10:	fd cf       	rjmp	.-6      	; 0xf0c <main+0x188>
 f12:	87 cf       	rjmp	.-242    	; 0xe22 <main+0x9e>
 f14:	84 37       	cpi	r24, 0x74	; 116
 f16:	39 f5       	brne	.+78     	; 0xf66 <main+0x1e2>
 f18:	3c d0       	rcall	.+120    	; 0xf92 <getch>
 f1a:	3b d0       	rcall	.+118    	; 0xf92 <getch>
 f1c:	98 2e       	mov	r9, r24
 f1e:	39 d0       	rcall	.+114    	; 0xf92 <getch>
 f20:	49 d0       	rcall	.+146    	; 0xfb4 <verifySpace>
 f22:	8e 01       	movw	r16, r28
 f24:	9c 0e       	add	r9, r28
 f26:	01 15       	cp	r16, r1
 f28:	11 05       	cpc	r17, r1
 f2a:	41 f4       	brne	.+16     	; 0xf3c <main+0x1b8>
 f2c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_edata+0x24>
 f30:	29 d0       	rcall	.+82     	; 0xf84 <putch>
 f32:	0f 5f       	subi	r16, 0xFF	; 255
 f34:	1f 4f       	sbci	r17, 0xFF	; 255
 f36:	90 12       	cpse	r9, r16
 f38:	f6 cf       	rjmp	.-20     	; 0xf26 <main+0x1a2>
 f3a:	73 cf       	rjmp	.-282    	; 0xe22 <main+0x9e>
 f3c:	01 30       	cpi	r16, 0x01	; 1
 f3e:	11 05       	cpc	r17, r1
 f40:	19 f4       	brne	.+6      	; 0xf48 <main+0x1c4>
 f42:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_edata+0x25>
 f46:	f4 cf       	rjmp	.-24     	; 0xf30 <main+0x1ac>
 f48:	0c 31       	cpi	r16, 0x1C	; 28
 f4a:	11 05       	cpc	r17, r1
 f4c:	19 f4       	brne	.+6      	; 0xf54 <main+0x1d0>
 f4e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_edata+0x26>
 f52:	ee cf       	rjmp	.-36     	; 0xf30 <main+0x1ac>
 f54:	0d 31       	cpi	r16, 0x1D	; 29
 f56:	11 05       	cpc	r17, r1
 f58:	19 f4       	brne	.+6      	; 0xf60 <main+0x1dc>
 f5a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_edata+0x27>
 f5e:	e8 cf       	rjmp	.-48     	; 0xf30 <main+0x1ac>
 f60:	f8 01       	movw	r30, r16
 f62:	84 91       	lpm	r24, Z
 f64:	e5 cf       	rjmp	.-54     	; 0xf30 <main+0x1ac>
 f66:	85 37       	cpi	r24, 0x75	; 117
 f68:	39 f4       	brne	.+14     	; 0xf78 <main+0x1f4>
 f6a:	24 d0       	rcall	.+72     	; 0xfb4 <verifySpace>
 f6c:	8e e1       	ldi	r24, 0x1E	; 30
 f6e:	0a d0       	rcall	.+20     	; 0xf84 <putch>
 f70:	82 e9       	ldi	r24, 0x92	; 146
 f72:	08 d0       	rcall	.+16     	; 0xf84 <putch>
 f74:	85 e1       	ldi	r24, 0x15	; 21
 f76:	54 cf       	rjmp	.-344    	; 0xe20 <main+0x9c>
 f78:	81 35       	cpi	r24, 0x51	; 81
 f7a:	09 f0       	breq	.+2      	; 0xf7e <main+0x1fa>
 f7c:	66 cf       	rjmp	.-308    	; 0xe4a <main+0xc6>
 f7e:	88 e0       	ldi	r24, 0x08	; 8
 f80:	14 d0       	rcall	.+40     	; 0xfaa <watchdogConfig>
 f82:	63 cf       	rjmp	.-314    	; 0xe4a <main+0xc6>

00000f84 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
 f84:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f88:	95 ff       	sbrs	r25, 5
 f8a:	fc cf       	rjmp	.-8      	; 0xf84 <putch>
  UART_UDR = ch;
 f8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
 f90:	08 95       	ret

00000f92 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
 f92:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f96:	87 ff       	sbrs	r24, 7
 f98:	fc cf       	rjmp	.-8      	; 0xf92 <getch>
  if (!(UART_SRA & _BV(FE0))) {
 f9a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f9e:	84 fd       	sbrc	r24, 4
 fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 fa2:	a8 95       	wdr
  ch = UART_UDR;
 fa4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
}
 fa8:	08 95       	ret

00000faa <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
 faa:	98 ed       	ldi	r25, 0xD8	; 216
 fac:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
#endif

#ifdef WDTCSR
  WDTCSR = x;
 fb0:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
 fb2:	08 95       	ret

00000fb4 <verifySpace>:
  if (getch() != CRC_EOP) {
 fb4:	ee df       	rcall	.-36     	; 0xf92 <getch>
 fb6:	80 32       	cpi	r24, 0x20	; 32
 fb8:	19 f0       	breq	.+6      	; 0xfc0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
 fba:	88 e0       	ldi	r24, 0x08	; 8
 fbc:	f6 df       	rcall	.-20     	; 0xfaa <watchdogConfig>
 fbe:	ff cf       	rjmp	.-2      	; 0xfbe <verifySpace+0xa>
  putch(STK_INSYNC);
 fc0:	84 e1       	ldi	r24, 0x14	; 20
 fc2:	e0 cf       	rjmp	.-64     	; 0xf84 <putch>

00000fc4 <getNch>:
void getNch(uint8_t count) {
 fc4:	cf 93       	push	r28
 fc6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
 fc8:	e4 df       	rcall	.-56     	; 0xf92 <getch>
 fca:	c1 50       	subi	r28, 0x01	; 1
 fcc:	e9 f7       	brne	.-6      	; 0xfc8 <getNch+0x4>
}
 fce:	cf 91       	pop	r28
  verifySpace();
 fd0:	f1 cf       	rjmp	.-30     	; 0xfb4 <verifySpace>

00000fd2 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
 fd2:	fc 01       	movw	r30, r24
 fd4:	0a 01       	movw	r0, r20
 fd6:	67 bf       	out	0x37, r22	; 55
 fd8:	e8 95       	spm
 fda:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
 fdc:	07 b6       	in	r0, 0x37	; 55
 fde:	00 fc       	sbrc	r0, 0
 fe0:	fd cf       	rjmp	.-6      	; 0xfdc <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
 fe2:	08 95       	ret
