
optiboot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001fdc  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000978  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000363  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	23 c1       	rjmp	.+582    	; 0x1fca <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	01 d1       	rcall	.+514    	; 0x1fa4 <watchdogConfig>
    1da2:	ee e0       	ldi	r30, 0x0E	; 14
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	8e bd       	out	0x2e, r24	; 46
    1dac:	8e e0       	ldi	r24, 0x0E	; 14
    1dae:	fa d0       	rcall	.+500    	; 0x1fa4 <watchdogConfig>
    1db0:	ba 9a       	sbi	0x17, 2	; 23
    1db2:	d1 9a       	sbi	0x1a, 1	; 26
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	28 e1       	ldi	r18, 0x18	; 24
    1db8:	3e ef       	ldi	r19, 0xFE	; 254
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	3d bd       	out	0x2d, r19	; 45
    1dbe:	2c bd       	out	0x2c, r18	; 44
    1dc0:	9b b9       	out	0x0b, r25	; 11
    1dc2:	58 9b       	sbis	0x0b, 0	; 11
    1dc4:	fe cf       	rjmp	.-4      	; 0x1dc2 <main+0x3e>
    1dc6:	b2 9a       	sbi	0x16, 2	; 22
    1dc8:	a8 95       	wdr
    1dca:	81 50       	subi	r24, 0x01	; 1
    1dcc:	b9 f7       	brne	.-18     	; 0x1dbc <main+0x38>
    1dce:	23 e0       	ldi	r18, 0x03	; 3
    1dd0:	d2 2e       	mov	r13, r18
    1dd2:	cc 24       	eor	r12, r12
    1dd4:	c3 94       	inc	r12
    1dd6:	35 e0       	ldi	r19, 0x05	; 5
    1dd8:	93 2e       	mov	r9, r19
    1dda:	4f eb       	ldi	r20, 0xBF	; 191
    1ddc:	e4 2e       	mov	r14, r20
    1dde:	4e e0       	ldi	r20, 0x0E	; 14
    1de0:	f4 2e       	mov	r15, r20
    1de2:	8f 2d       	mov	r24, r15
    1de4:	80 6c       	ori	r24, 0xC0	; 192
    1de6:	88 2e       	mov	r8, r24
    1de8:	c9 d0       	rcall	.+402    	; 0x1f7c <getch>
    1dea:	81 34       	cpi	r24, 0x41	; 65
    1dec:	71 f4       	brne	.+28     	; 0x1e0a <main+0x86>
    1dee:	c6 d0       	rcall	.+396    	; 0x1f7c <getch>
    1df0:	18 2f       	mov	r17, r24
    1df2:	dc d0       	rcall	.+440    	; 0x1fac <verifySpace>
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	12 38       	cpi	r17, 0x82	; 130
    1df8:	21 f0       	breq	.+8      	; 0x1e02 <main+0x7e>
    1dfa:	88 e0       	ldi	r24, 0x08	; 8
    1dfc:	11 38       	cpi	r17, 0x81	; 129
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <main+0x7e>
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	ad d0       	rcall	.+346    	; 0x1f5e <putch>
    1e04:	80 e1       	ldi	r24, 0x10	; 16
    1e06:	ab d0       	rcall	.+342    	; 0x1f5e <putch>
    1e08:	ef cf       	rjmp	.-34     	; 0x1de8 <main+0x64>
    1e0a:	82 34       	cpi	r24, 0x42	; 66
    1e0c:	19 f4       	brne	.+6      	; 0x1e14 <main+0x90>
    1e0e:	84 e1       	ldi	r24, 0x14	; 20
    1e10:	d5 d0       	rcall	.+426    	; 0x1fbc <getNch>
    1e12:	f8 cf       	rjmp	.-16     	; 0x1e04 <main+0x80>
    1e14:	85 34       	cpi	r24, 0x45	; 69
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <main+0x98>
    1e18:	85 e0       	ldi	r24, 0x05	; 5
    1e1a:	fa cf       	rjmp	.-12     	; 0x1e10 <main+0x8c>
    1e1c:	85 35       	cpi	r24, 0x55	; 85
    1e1e:	41 f4       	brne	.+16     	; 0x1e30 <main+0xac>
    1e20:	ad d0       	rcall	.+346    	; 0x1f7c <getch>
    1e22:	c8 2f       	mov	r28, r24
    1e24:	ab d0       	rcall	.+342    	; 0x1f7c <getch>
    1e26:	d8 2f       	mov	r29, r24
    1e28:	cc 0f       	add	r28, r28
    1e2a:	dd 1f       	adc	r29, r29
    1e2c:	bf d0       	rcall	.+382    	; 0x1fac <verifySpace>
    1e2e:	ea cf       	rjmp	.-44     	; 0x1e04 <main+0x80>
    1e30:	86 35       	cpi	r24, 0x56	; 86
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <main+0xb8>
    1e34:	84 e0       	ldi	r24, 0x04	; 4
    1e36:	c2 d0       	rcall	.+388    	; 0x1fbc <getNch>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	e3 cf       	rjmp	.-58     	; 0x1e02 <main+0x7e>
    1e3c:	84 36       	cpi	r24, 0x64	; 100
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <main+0xbe>
    1e40:	56 c0       	rjmp	.+172    	; 0x1eee <main+0x16a>
    1e42:	9c d0       	rcall	.+312    	; 0x1f7c <getch>
    1e44:	9b d0       	rcall	.+310    	; 0x1f7c <getch>
    1e46:	78 2e       	mov	r7, r24
    1e48:	99 d0       	rcall	.+306    	; 0x1f7c <getch>
    1e4a:	68 2e       	mov	r6, r24
    1e4c:	00 e6       	ldi	r16, 0x60	; 96
    1e4e:	10 e0       	ldi	r17, 0x00	; 0
    1e50:	80 e6       	ldi	r24, 0x60	; 96
    1e52:	58 2e       	mov	r5, r24
    1e54:	57 0c       	add	r5, r7
    1e56:	58 01       	movw	r10, r16
    1e58:	0f 5f       	subi	r16, 0xFF	; 255
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	8f d0       	rcall	.+286    	; 0x1f7c <getch>
    1e5e:	f5 01       	movw	r30, r10
    1e60:	80 83       	st	Z, r24
    1e62:	50 12       	cpse	r5, r16
    1e64:	f8 cf       	rjmp	.-16     	; 0x1e56 <main+0xd2>
    1e66:	a2 d0       	rcall	.+324    	; 0x1fac <verifySpace>
    1e68:	20 97       	sbiw	r28, 0x00	; 0
    1e6a:	f9 f4       	brne	.+62     	; 0x1eaa <main+0x126>
    1e6c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    1e70:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <_edata+0x84>
    1e74:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
    1e78:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <_edata+0x85>
    1e7c:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <_edata>
    1e80:	80 92 61 00 	sts	0x0061, r8	; 0x800061 <_edata+0x1>
    1e84:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <_edata+0x1c>
    1e88:	40 93 e6 00 	sts	0x00E6, r20	; 0x8000e6 <_edata+0x86>
    1e8c:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <_edata+0x1d>
    1e90:	40 93 e7 00 	sts	0x00E7, r20	; 0x8000e7 <_edata+0x87>
    1e94:	29 2f       	mov	r18, r25
    1e96:	38 2f       	mov	r19, r24
    1e98:	2e 50       	subi	r18, 0x0E	; 14
    1e9a:	31 09       	sbc	r19, r1
    1e9c:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <_edata+0x1c>
    1ea0:	83 2f       	mov	r24, r19
    1ea2:	8f 70       	andi	r24, 0x0F	; 15
    1ea4:	80 6c       	ori	r24, 0xC0	; 192
    1ea6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <_edata+0x1d>
    1eaa:	f5 e4       	ldi	r31, 0x45	; 69
    1eac:	6f 12       	cpse	r6, r31
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <main+0x12e>
    1eb0:	ff cf       	rjmp	.-2      	; 0x1eb0 <main+0x12c>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	d7 be       	out	0x37, r13	; 55
    1eb6:	e8 95       	spm
    1eb8:	07 b6       	in	r0, 0x37	; 55
    1eba:	00 fc       	sbrc	r0, 0
    1ebc:	fd cf       	rjmp	.-6      	; 0x1eb8 <main+0x134>
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	ec 0f       	add	r30, r28
    1ec6:	fd 1f       	adc	r31, r29
    1ec8:	dc 01       	movw	r26, r24
    1eca:	a0 5a       	subi	r26, 0xA0	; 160
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	2d 91       	ld	r18, X+
    1ed0:	3c 91       	ld	r19, X
    1ed2:	09 01       	movw	r0, r18
    1ed4:	c7 be       	out	0x37, r12	; 55
    1ed6:	e8 95       	spm
    1ed8:	11 24       	eor	r1, r1
    1eda:	02 96       	adiw	r24, 0x02	; 2
    1edc:	78 12       	cpse	r7, r24
    1ede:	f1 cf       	rjmp	.-30     	; 0x1ec2 <main+0x13e>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	97 be       	out	0x37, r9	; 55
    1ee4:	e8 95       	spm
    1ee6:	07 b6       	in	r0, 0x37	; 55
    1ee8:	00 fc       	sbrc	r0, 0
    1eea:	fd cf       	rjmp	.-6      	; 0x1ee6 <main+0x162>
    1eec:	8b cf       	rjmp	.-234    	; 0x1e04 <main+0x80>
    1eee:	84 37       	cpi	r24, 0x74	; 116
    1ef0:	39 f5       	brne	.+78     	; 0x1f40 <main+0x1bc>
    1ef2:	44 d0       	rcall	.+136    	; 0x1f7c <getch>
    1ef4:	43 d0       	rcall	.+134    	; 0x1f7c <getch>
    1ef6:	b8 2e       	mov	r11, r24
    1ef8:	41 d0       	rcall	.+130    	; 0x1f7c <getch>
    1efa:	58 d0       	rcall	.+176    	; 0x1fac <verifySpace>
    1efc:	8e 01       	movw	r16, r28
    1efe:	bc 0e       	add	r11, r28
    1f00:	01 15       	cp	r16, r1
    1f02:	11 05       	cpc	r17, r1
    1f04:	41 f4       	brne	.+16     	; 0x1f16 <main+0x192>
    1f06:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <_edata+0x84>
    1f0a:	29 d0       	rcall	.+82     	; 0x1f5e <putch>
    1f0c:	0f 5f       	subi	r16, 0xFF	; 255
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	b0 12       	cpse	r11, r16
    1f12:	f6 cf       	rjmp	.-20     	; 0x1f00 <main+0x17c>
    1f14:	77 cf       	rjmp	.-274    	; 0x1e04 <main+0x80>
    1f16:	01 30       	cpi	r16, 0x01	; 1
    1f18:	11 05       	cpc	r17, r1
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <main+0x19e>
    1f1c:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_edata+0x85>
    1f20:	f4 cf       	rjmp	.-24     	; 0x1f0a <main+0x186>
    1f22:	0c 31       	cpi	r16, 0x1C	; 28
    1f24:	11 05       	cpc	r17, r1
    1f26:	19 f4       	brne	.+6      	; 0x1f2e <main+0x1aa>
    1f28:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <_edata+0x86>
    1f2c:	ee cf       	rjmp	.-36     	; 0x1f0a <main+0x186>
    1f2e:	0d 31       	cpi	r16, 0x1D	; 29
    1f30:	11 05       	cpc	r17, r1
    1f32:	19 f4       	brne	.+6      	; 0x1f3a <main+0x1b6>
    1f34:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <_edata+0x87>
    1f38:	e8 cf       	rjmp	.-48     	; 0x1f0a <main+0x186>
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	84 91       	lpm	r24, Z
    1f3e:	e5 cf       	rjmp	.-54     	; 0x1f0a <main+0x186>
    1f40:	85 37       	cpi	r24, 0x75	; 117
    1f42:	39 f4       	brne	.+14     	; 0x1f52 <main+0x1ce>
    1f44:	33 d0       	rcall	.+102    	; 0x1fac <verifySpace>
    1f46:	8e e1       	ldi	r24, 0x1E	; 30
    1f48:	0a d0       	rcall	.+20     	; 0x1f5e <putch>
    1f4a:	83 e9       	ldi	r24, 0x93	; 147
    1f4c:	08 d0       	rcall	.+16     	; 0x1f5e <putch>
    1f4e:	8c e0       	ldi	r24, 0x0C	; 12
    1f50:	58 cf       	rjmp	.-336    	; 0x1e02 <main+0x7e>
    1f52:	81 35       	cpi	r24, 0x51	; 81
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <main+0x1d4>
    1f56:	6a cf       	rjmp	.-300    	; 0x1e2c <main+0xa8>
    1f58:	88 e0       	ldi	r24, 0x08	; 8
    1f5a:	24 d0       	rcall	.+72     	; 0x1fa4 <watchdogConfig>
    1f5c:	67 cf       	rjmp	.-306    	; 0x1e2c <main+0xa8>

00001f5e <putch>:
  RS485_PORT &= ~_BV(RS485_BIT);
  #else
  RS485_PORT |= _BV(RS485_BIT);
  #endif
#endif
  __asm__ __volatile__ (
    1f5e:	2a e0       	ldi	r18, 0x0A	; 10
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	80 95       	com	r24
    1f64:	08 94       	sec
    1f66:	10 f4       	brcc	.+4      	; 0x1f6c <putch+0xe>
    1f68:	d9 98       	cbi	0x1b, 1	; 27
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <putch+0x12>
    1f6c:	d9 9a       	sbi	0x1b, 1	; 27
    1f6e:	00 00       	nop
    1f70:	15 d0       	rcall	.+42     	; 0x1f9c <uartDelay>
    1f72:	14 d0       	rcall	.+40     	; 0x1f9c <uartDelay>
    1f74:	86 95       	lsr	r24
    1f76:	2a 95       	dec	r18
    1f78:	b1 f7       	brne	.-20     	; 0x1f66 <putch+0x8>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f7a:	08 95       	ret

00001f7c <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f7c:	a8 95       	wdr
  __asm__ __volatile__ (
    1f7e:	29 e0       	ldi	r18, 0x09	; 9
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	ca 99       	sbic	0x19, 2	; 25
    1f84:	fe cf       	rjmp	.-4      	; 0x1f82 <getch+0x6>
    1f86:	0a d0       	rcall	.+20     	; 0x1f9c <uartDelay>
    1f88:	09 d0       	rcall	.+18     	; 0x1f9c <uartDelay>
    1f8a:	08 d0       	rcall	.+16     	; 0x1f9c <uartDelay>
    1f8c:	88 94       	clc
    1f8e:	ca 99       	sbic	0x19, 2	; 25
    1f90:	08 94       	sec
    1f92:	2a 95       	dec	r18
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <getch+0x1e>
    1f96:	87 95       	ror	r24
    1f98:	f7 cf       	rjmp	.-18     	; 0x1f88 <getch+0xc>
}
    1f9a:	08 95       	ret

00001f9c <uartDelay>:
  __asm__ __volatile__ (
    1f9c:	92 e4       	ldi	r25, 0x42	; 66
    1f9e:	9a 95       	dec	r25
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <uartDelay+0x2>
    1fa2:	08 95       	ret

00001fa4 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fa4:	98 e1       	ldi	r25, 0x18	; 24
    1fa6:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1fa8:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
    1faa:	08 95       	ret

00001fac <verifySpace>:
  if (getch() != CRC_EOP) {
    1fac:	e7 df       	rcall	.-50     	; 0x1f7c <getch>
    1fae:	80 32       	cpi	r24, 0x20	; 32
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fb2:	88 e0       	ldi	r24, 0x08	; 8
    1fb4:	f7 df       	rcall	.-18     	; 0x1fa4 <watchdogConfig>
    1fb6:	ff cf       	rjmp	.-2      	; 0x1fb6 <verifySpace+0xa>
  putch(STK_INSYNC);
    1fb8:	84 e1       	ldi	r24, 0x14	; 20
    1fba:	d1 cf       	rjmp	.-94     	; 0x1f5e <putch>

00001fbc <getNch>:
void getNch(uint8_t count) {
    1fbc:	cf 93       	push	r28
    1fbe:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fc0:	dd df       	rcall	.-70     	; 0x1f7c <getch>
    1fc2:	c1 50       	subi	r28, 0x01	; 1
    1fc4:	e9 f7       	brne	.-6      	; 0x1fc0 <getNch+0x4>
}
    1fc6:	cf 91       	pop	r28
  verifySpace();
    1fc8:	f1 cf       	rjmp	.-30     	; 0x1fac <verifySpace>

00001fca <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fca:	fc 01       	movw	r30, r24
    1fcc:	0a 01       	movw	r0, r20
    1fce:	67 bf       	out	0x37, r22	; 55
    1fd0:	e8 95       	spm
    1fd2:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fd4:	07 b6       	in	r0, 0x37	; 55
    1fd6:	00 fc       	sbrc	r0, 0
    1fd8:	fd cf       	rjmp	.-6      	; 0x1fd4 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fda:	08 95       	ret
