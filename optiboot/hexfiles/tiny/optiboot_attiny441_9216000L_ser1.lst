
optiboot_attiny441.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000fdc  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000d80  00000d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00000ffe  00000ffe  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000de0  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faf  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <main>
 d82:	23 c1       	rjmp	.+582    	; 0xfca <do_spm>

00000d84 <main>:
 d84:	11 24       	eor	r1, r1
 d86:	84 b7       	in	r24, 0x34	; 52
 d88:	88 23       	and	r24, r24
 d8a:	71 f0       	breq	.+28     	; 0xda8 <main+0x24>
 d8c:	98 2f       	mov	r25, r24
 d8e:	9a 70       	andi	r25, 0x0A	; 10
 d90:	92 30       	cpi	r25, 0x02	; 2
 d92:	51 f0       	breq	.+20     	; 0xda8 <main+0x24>
 d94:	81 ff       	sbrs	r24, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <main+0x18>
 d98:	97 ef       	ldi	r25, 0xF7	; 247
 d9a:	94 bf       	out	0x34, r25	; 52
 d9c:	28 2e       	mov	r2, r24
 d9e:	80 e0       	ldi	r24, 0x00	; 0
 da0:	00 d1       	rcall	.+512    	; 0xfa2 <watchdogConfig>
 da2:	ee e0       	ldi	r30, 0x0E	; 14
 da4:	ff 27       	eor	r31, r31
 da6:	09 94       	ijmp
 da8:	85 e0       	ldi	r24, 0x05	; 5
 daa:	8e bd       	out	0x2e, r24	; 46
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 db2:	88 e1       	ldi	r24, 0x18	; 24
 db4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 db8:	86 e0       	ldi	r24, 0x06	; 6
 dba:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
 dbe:	83 e1       	ldi	r24, 0x13	; 19
 dc0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
 dc4:	8e e0       	ldi	r24, 0x0E	; 14
 dc6:	ed d0       	rcall	.+474    	; 0xfa2 <watchdogConfig>
 dc8:	ba 9a       	sbi	0x17, 2	; 23
 dca:	86 e0       	ldi	r24, 0x06	; 6
 dcc:	2e ec       	ldi	r18, 0xCE	; 206
 dce:	3d ef       	ldi	r19, 0xFD	; 253
 dd0:	91 e0       	ldi	r25, 0x01	; 1
 dd2:	3d bd       	out	0x2d, r19	; 45
 dd4:	2c bd       	out	0x2c, r18	; 44
 dd6:	9e b9       	out	0x0e, r25	; 14
 dd8:	70 9b       	sbis	0x0e, 0	; 14
 dda:	fe cf       	rjmp	.-4      	; 0xdd8 <main+0x54>
 ddc:	b2 9a       	sbi	0x16, 2	; 22
 dde:	a8 95       	wdr
 de0:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 de4:	47 fd       	sbrc	r20, 7
 de6:	02 c0       	rjmp	.+4      	; 0xdec <main+0x68>
 de8:	81 50       	subi	r24, 0x01	; 1
 dea:	99 f7       	brne	.-26     	; 0xdd2 <main+0x4e>
 dec:	aa 24       	eor	r10, r10
 dee:	a3 94       	inc	r10
 df0:	95 e0       	ldi	r25, 0x05	; 5
 df2:	99 2e       	mov	r9, r25
 df4:	2f eb       	ldi	r18, 0xBF	; 191
 df6:	c2 2e       	mov	r12, r18
 df8:	26 e0       	ldi	r18, 0x06	; 6
 dfa:	d2 2e       	mov	r13, r18
 dfc:	8d 2d       	mov	r24, r13
 dfe:	80 6c       	ori	r24, 0xC0	; 192
 e00:	88 2e       	mov	r8, r24
 e02:	c3 d0       	rcall	.+390    	; 0xf8a <getch>
 e04:	81 34       	cpi	r24, 0x41	; 65
 e06:	71 f4       	brne	.+28     	; 0xe24 <main+0xa0>
 e08:	c0 d0       	rcall	.+384    	; 0xf8a <getch>
 e0a:	18 2f       	mov	r17, r24
 e0c:	cf d0       	rcall	.+414    	; 0xfac <verifySpace>
 e0e:	12 38       	cpi	r17, 0x82	; 130
 e10:	11 f4       	brne	.+4      	; 0xe16 <main+0x92>
 e12:	82 e0       	ldi	r24, 0x02	; 2
 e14:	05 c0       	rjmp	.+10     	; 0xe20 <main+0x9c>
 e16:	11 38       	cpi	r17, 0x81	; 129
 e18:	11 f4       	brne	.+4      	; 0xe1e <main+0x9a>
 e1a:	88 e0       	ldi	r24, 0x08	; 8
 e1c:	01 c0       	rjmp	.+2      	; 0xe20 <main+0x9c>
 e1e:	83 e0       	ldi	r24, 0x03	; 3
 e20:	ad d0       	rcall	.+346    	; 0xf7c <putch>
 e22:	a9 c0       	rjmp	.+338    	; 0xf76 <main+0x1f2>
 e24:	82 34       	cpi	r24, 0x42	; 66
 e26:	11 f4       	brne	.+4      	; 0xe2c <main+0xa8>
 e28:	84 e1       	ldi	r24, 0x14	; 20
 e2a:	03 c0       	rjmp	.+6      	; 0xe32 <main+0xae>
 e2c:	85 34       	cpi	r24, 0x45	; 69
 e2e:	19 f4       	brne	.+6      	; 0xe36 <main+0xb2>
 e30:	85 e0       	ldi	r24, 0x05	; 5
 e32:	c4 d0       	rcall	.+392    	; 0xfbc <getNch>
 e34:	a0 c0       	rjmp	.+320    	; 0xf76 <main+0x1f2>
 e36:	85 35       	cpi	r24, 0x55	; 85
 e38:	39 f4       	brne	.+14     	; 0xe48 <main+0xc4>
 e3a:	a7 d0       	rcall	.+334    	; 0xf8a <getch>
 e3c:	c8 2f       	mov	r28, r24
 e3e:	a5 d0       	rcall	.+330    	; 0xf8a <getch>
 e40:	d8 2f       	mov	r29, r24
 e42:	cc 0f       	add	r28, r28
 e44:	dd 1f       	adc	r29, r29
 e46:	96 c0       	rjmp	.+300    	; 0xf74 <main+0x1f0>
 e48:	86 35       	cpi	r24, 0x56	; 86
 e4a:	21 f4       	brne	.+8      	; 0xe54 <main+0xd0>
 e4c:	84 e0       	ldi	r24, 0x04	; 4
 e4e:	b6 d0       	rcall	.+364    	; 0xfbc <getNch>
 e50:	80 e0       	ldi	r24, 0x00	; 0
 e52:	e6 cf       	rjmp	.-52     	; 0xe20 <main+0x9c>
 e54:	84 36       	cpi	r24, 0x64	; 100
 e56:	09 f0       	breq	.+2      	; 0xe5a <main+0xd6>
 e58:	57 c0       	rjmp	.+174    	; 0xf08 <main+0x184>
 e5a:	97 d0       	rcall	.+302    	; 0xf8a <getch>
 e5c:	96 d0       	rcall	.+300    	; 0xf8a <getch>
 e5e:	b8 2e       	mov	r11, r24
 e60:	94 d0       	rcall	.+296    	; 0xf8a <getch>
 e62:	78 2e       	mov	r7, r24
 e64:	00 e0       	ldi	r16, 0x00	; 0
 e66:	11 e0       	ldi	r17, 0x01	; 1
 e68:	90 d0       	rcall	.+288    	; 0xf8a <getch>
 e6a:	f8 01       	movw	r30, r16
 e6c:	81 93       	st	Z+, r24
 e6e:	8f 01       	movw	r16, r30
 e70:	be 12       	cpse	r11, r30
 e72:	fa cf       	rjmp	.-12     	; 0xe68 <main+0xe4>
 e74:	9b d0       	rcall	.+310    	; 0xfac <verifySpace>
 e76:	20 97       	sbiw	r28, 0x00	; 0
 e78:	69 f4       	brne	.+26     	; 0xe94 <main+0x110>
 e7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 e7e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_edata+0x24>
 e82:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 e86:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_edata+0x25>
 e8a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
 e8e:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <_edata+0x1>
 e92:	19 c0       	rjmp	.+50     	; 0xec6 <main+0x142>
 e94:	c0 31       	cpi	r28, 0x10	; 16
 e96:	d1 05       	cpc	r29, r1
 e98:	b1 f4       	brne	.+44     	; 0xec6 <main+0x142>
 e9a:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <_edata+0x24>
 e9e:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <_edata+0x25>
 ea2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_edata+0xc>
 ea6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_edata+0x26>
 eaa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_edata+0xd>
 eae:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_edata+0x27>
 eb2:	fe e0       	ldi	r31, 0x0E	; 14
 eb4:	ef 1a       	sub	r14, r31
 eb6:	f1 08       	sbc	r15, r1
 eb8:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <_edata+0xc>
 ebc:	8f 2d       	mov	r24, r15
 ebe:	8f 70       	andi	r24, 0x0F	; 15
 ec0:	80 6c       	ori	r24, 0xC0	; 192
 ec2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_edata+0xd>
 ec6:	85 e4       	ldi	r24, 0x45	; 69
 ec8:	78 12       	cpse	r7, r24
 eca:	01 c0       	rjmp	.+2      	; 0xece <main+0x14a>
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <main+0x148>
 ece:	8c 2f       	mov	r24, r28
 ed0:	8f 73       	andi	r24, 0x3F	; 63
 ed2:	39 f4       	brne	.+14     	; 0xee2 <main+0x15e>
 ed4:	83 e0       	ldi	r24, 0x03	; 3
 ed6:	fe 01       	movw	r30, r28
 ed8:	87 bf       	out	0x37, r24	; 55
 eda:	e8 95       	spm
 edc:	07 b6       	in	r0, 0x37	; 55
 ede:	00 fc       	sbrc	r0, 0
 ee0:	fd cf       	rjmp	.-6      	; 0xedc <main+0x158>
 ee2:	fe 01       	movw	r30, r28
 ee4:	a0 e0       	ldi	r26, 0x00	; 0
 ee6:	b1 e0       	ldi	r27, 0x01	; 1
 ee8:	8d 91       	ld	r24, X+
 eea:	9d 91       	ld	r25, X+
 eec:	0c 01       	movw	r0, r24
 eee:	a7 be       	out	0x37, r10	; 55
 ef0:	e8 95       	spm
 ef2:	11 24       	eor	r1, r1
 ef4:	32 96       	adiw	r30, 0x02	; 2
 ef6:	ba 12       	cpse	r11, r26
 ef8:	f7 cf       	rjmp	.-18     	; 0xee8 <main+0x164>
 efa:	fe 01       	movw	r30, r28
 efc:	97 be       	out	0x37, r9	; 55
 efe:	e8 95       	spm
 f00:	07 b6       	in	r0, 0x37	; 55
 f02:	00 fc       	sbrc	r0, 0
 f04:	fd cf       	rjmp	.-6      	; 0xf00 <main+0x17c>
 f06:	37 c0       	rjmp	.+110    	; 0xf76 <main+0x1f2>
 f08:	84 37       	cpi	r24, 0x74	; 116
 f0a:	39 f5       	brne	.+78     	; 0xf5a <main+0x1d6>
 f0c:	3e d0       	rcall	.+124    	; 0xf8a <getch>
 f0e:	3d d0       	rcall	.+122    	; 0xf8a <getch>
 f10:	b8 2e       	mov	r11, r24
 f12:	3b d0       	rcall	.+118    	; 0xf8a <getch>
 f14:	4b d0       	rcall	.+150    	; 0xfac <verifySpace>
 f16:	8e 01       	movw	r16, r28
 f18:	01 15       	cp	r16, r1
 f1a:	11 05       	cpc	r17, r1
 f1c:	19 f4       	brne	.+6      	; 0xf24 <main+0x1a0>
 f1e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_edata+0x24>
 f22:	14 c0       	rjmp	.+40     	; 0xf4c <main+0x1c8>
 f24:	01 30       	cpi	r16, 0x01	; 1
 f26:	11 05       	cpc	r17, r1
 f28:	19 f4       	brne	.+6      	; 0xf30 <main+0x1ac>
 f2a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_edata+0x25>
 f2e:	0e c0       	rjmp	.+28     	; 0xf4c <main+0x1c8>
 f30:	0c 31       	cpi	r16, 0x1C	; 28
 f32:	11 05       	cpc	r17, r1
 f34:	19 f4       	brne	.+6      	; 0xf3c <main+0x1b8>
 f36:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_edata+0x26>
 f3a:	08 c0       	rjmp	.+16     	; 0xf4c <main+0x1c8>
 f3c:	0d 31       	cpi	r16, 0x1D	; 29
 f3e:	11 05       	cpc	r17, r1
 f40:	19 f4       	brne	.+6      	; 0xf48 <main+0x1c4>
 f42:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_edata+0x27>
 f46:	02 c0       	rjmp	.+4      	; 0xf4c <main+0x1c8>
 f48:	f8 01       	movw	r30, r16
 f4a:	84 91       	lpm	r24, Z
 f4c:	17 d0       	rcall	.+46     	; 0xf7c <putch>
 f4e:	ba 94       	dec	r11
 f50:	0f 5f       	subi	r16, 0xFF	; 255
 f52:	1f 4f       	sbci	r17, 0xFF	; 255
 f54:	b1 10       	cpse	r11, r1
 f56:	e0 cf       	rjmp	.-64     	; 0xf18 <main+0x194>
 f58:	0e c0       	rjmp	.+28     	; 0xf76 <main+0x1f2>
 f5a:	85 37       	cpi	r24, 0x75	; 117
 f5c:	39 f4       	brne	.+14     	; 0xf6c <main+0x1e8>
 f5e:	26 d0       	rcall	.+76     	; 0xfac <verifySpace>
 f60:	8e e1       	ldi	r24, 0x1E	; 30
 f62:	0c d0       	rcall	.+24     	; 0xf7c <putch>
 f64:	82 e9       	ldi	r24, 0x92	; 146
 f66:	0a d0       	rcall	.+20     	; 0xf7c <putch>
 f68:	85 e1       	ldi	r24, 0x15	; 21
 f6a:	5a cf       	rjmp	.-332    	; 0xe20 <main+0x9c>
 f6c:	81 35       	cpi	r24, 0x51	; 81
 f6e:	11 f4       	brne	.+4      	; 0xf74 <main+0x1f0>
 f70:	88 e0       	ldi	r24, 0x08	; 8
 f72:	17 d0       	rcall	.+46     	; 0xfa2 <watchdogConfig>
 f74:	1b d0       	rcall	.+54     	; 0xfac <verifySpace>
 f76:	80 e1       	ldi	r24, 0x10	; 16
 f78:	01 d0       	rcall	.+2      	; 0xf7c <putch>
 f7a:	43 cf       	rjmp	.-378    	; 0xe02 <main+0x7e>

00000f7c <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
 f7c:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 f80:	95 ff       	sbrs	r25, 5
 f82:	fc cf       	rjmp	.-8      	; 0xf7c <putch>
  UART_UDR = ch;
 f84:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
 f88:	08 95       	ret

00000f8a <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
 f8a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 f8e:	87 ff       	sbrs	r24, 7
 f90:	fc cf       	rjmp	.-8      	; 0xf8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
 f92:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 f96:	84 fd       	sbrc	r24, 4
 f98:	01 c0       	rjmp	.+2      	; 0xf9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 f9a:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
 f9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
 fa0:	08 95       	ret

00000fa2 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
 fa2:	98 ed       	ldi	r25, 0xD8	; 216
 fa4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
#endif

#ifdef WDTCSR
  WDTCSR = x;
 fa8:	81 bd       	out	0x21, r24	; 33
 faa:	08 95       	ret

00000fac <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
 fac:	ee df       	rcall	.-36     	; 0xf8a <getch>
 fae:	80 32       	cpi	r24, 0x20	; 32
 fb0:	19 f0       	breq	.+6      	; 0xfb8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
 fb2:	88 e0       	ldi	r24, 0x08	; 8
 fb4:	f6 df       	rcall	.-20     	; 0xfa2 <watchdogConfig>
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
 fb8:	84 e1       	ldi	r24, 0x14	; 20
 fba:	e0 cf       	rjmp	.-64     	; 0xf7c <putch>

00000fbc <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
 fbc:	cf 93       	push	r28
 fbe:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
 fc0:	e4 df       	rcall	.-56     	; 0xf8a <getch>
 fc2:	c1 50       	subi	r28, 0x01	; 1
 fc4:	e9 f7       	brne	.-6      	; 0xfc0 <getNch+0x4>
  verifySpace();
}
 fc6:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
 fc8:	f1 cf       	rjmp	.-30     	; 0xfac <verifySpace>

00000fca <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
 fca:	fc 01       	movw	r30, r24
 fcc:	0a 01       	movw	r0, r20
 fce:	67 bf       	out	0x37, r22	; 55
 fd0:	e8 95       	spm
 fd2:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
 fd4:	07 b6       	in	r0, 0x37	; 55
 fd6:	00 fc       	sbrc	r0, 0
 fd8:	fd cf       	rjmp	.-6      	; 0xfd4 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
 fda:	08 95       	ret
