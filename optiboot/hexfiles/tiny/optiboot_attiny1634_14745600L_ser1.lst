
optiboot_attiny1634.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fda  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00003d80  00003d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         0000099c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000346  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <main>
    3d82:	22 c1       	rjmp	.+580    	; 0x3fc8 <do_spm>

00003d84 <main>:
    3d84:	11 24       	eor	r1, r1
    3d86:	85 b7       	in	r24, 0x35	; 53
    3d88:	88 23       	and	r24, r24
    3d8a:	71 f0       	breq	.+28     	; 0x3da8 <main+0x24>
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	9a 70       	andi	r25, 0x0A	; 10
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	51 f0       	breq	.+20     	; 0x3da8 <main+0x24>
    3d94:	81 ff       	sbrs	r24, 1
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <main+0x18>
    3d98:	97 ef       	ldi	r25, 0xF7	; 247
    3d9a:	95 bf       	out	0x35, r25	; 53
    3d9c:	28 2e       	mov	r2, r24
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	00 d1       	rcall	.+512    	; 0x3fa2 <watchdogConfig>
    3da2:	e4 e3       	ldi	r30, 0x34	; 52
    3da4:	ff 27       	eor	r31, r31
    3da6:	09 94       	ijmp
    3da8:	85 e0       	ldi	r24, 0x05	; 5
    3daa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    3db4:	88 e1       	ldi	r24, 0x18	; 24
    3db6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
    3dba:	86 e0       	ldi	r24, 0x06	; 6
    3dbc:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <__EEPROM_REGION_LENGTH__+0x7f0077>
    3dc0:	8f e0       	ldi	r24, 0x0F	; 15
    3dc2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__EEPROM_REGION_LENGTH__+0x7f0074>
    3dc6:	8e e0       	ldi	r24, 0x0E	; 14
    3dc8:	ec d0       	rcall	.+472    	; 0x3fa2 <watchdogConfig>
    3dca:	40 9a       	sbi	0x08, 0	; 8
    3dcc:	86 e0       	ldi	r24, 0x06	; 6
    3dce:	2c e7       	ldi	r18, 0x7C	; 124
    3dd0:	3c ef       	ldi	r19, 0xFC	; 252
    3dd2:	90 e8       	ldi	r25, 0x80	; 128
    3dd4:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    3dd8:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    3ddc:	99 bf       	out	0x39, r25	; 57
    3dde:	09 b6       	in	r0, 0x39	; 57
    3de0:	07 fe       	sbrs	r0, 7
    3de2:	fd cf       	rjmp	.-6      	; 0x3dde <main+0x5a>
    3de4:	38 9a       	sbi	0x07, 0	; 7
    3de6:	a8 95       	wdr
    3de8:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    3dec:	47 fd       	sbrc	r20, 7
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <main+0x70>
    3df0:	81 50       	subi	r24, 0x01	; 1
    3df2:	81 f7       	brne	.-32     	; 0x3dd4 <main+0x50>
    3df4:	80 ec       	ldi	r24, 0xC0	; 192
    3df6:	9e e1       	ldi	r25, 0x1E	; 30
    3df8:	e9 2e       	mov	r14, r25
    3dfa:	bb 24       	eor	r11, r11
    3dfc:	b3 94       	inc	r11
    3dfe:	25 e0       	ldi	r18, 0x05	; 5
    3e00:	a2 2e       	mov	r10, r18
    3e02:	33 e0       	ldi	r19, 0x03	; 3
    3e04:	73 2e       	mov	r7, r19
    3e06:	6c 01       	movw	r12, r24
    3e08:	c0 d0       	rcall	.+384    	; 0x3f8a <getch>
    3e0a:	81 34       	cpi	r24, 0x41	; 65
    3e0c:	71 f4       	brne	.+28     	; 0x3e2a <main+0xa6>
    3e0e:	bd d0       	rcall	.+378    	; 0x3f8a <getch>
    3e10:	18 2f       	mov	r17, r24
    3e12:	cb d0       	rcall	.+406    	; 0x3faa <verifySpace>
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	12 38       	cpi	r17, 0x82	; 130
    3e18:	21 f0       	breq	.+8      	; 0x3e22 <main+0x9e>
    3e1a:	88 e0       	ldi	r24, 0x08	; 8
    3e1c:	11 38       	cpi	r17, 0x81	; 129
    3e1e:	09 f0       	breq	.+2      	; 0x3e22 <main+0x9e>
    3e20:	83 e0       	ldi	r24, 0x03	; 3
    3e22:	ac d0       	rcall	.+344    	; 0x3f7c <putch>
    3e24:	80 e1       	ldi	r24, 0x10	; 16
    3e26:	aa d0       	rcall	.+340    	; 0x3f7c <putch>
    3e28:	ef cf       	rjmp	.-34     	; 0x3e08 <main+0x84>
    3e2a:	82 34       	cpi	r24, 0x42	; 66
    3e2c:	19 f4       	brne	.+6      	; 0x3e34 <main+0xb0>
    3e2e:	84 e1       	ldi	r24, 0x14	; 20
    3e30:	c4 d0       	rcall	.+392    	; 0x3fba <getNch>
    3e32:	f8 cf       	rjmp	.-16     	; 0x3e24 <main+0xa0>
    3e34:	85 34       	cpi	r24, 0x45	; 69
    3e36:	11 f4       	brne	.+4      	; 0x3e3c <main+0xb8>
    3e38:	85 e0       	ldi	r24, 0x05	; 5
    3e3a:	fa cf       	rjmp	.-12     	; 0x3e30 <main+0xac>
    3e3c:	85 35       	cpi	r24, 0x55	; 85
    3e3e:	41 f4       	brne	.+16     	; 0x3e50 <main+0xcc>
    3e40:	a4 d0       	rcall	.+328    	; 0x3f8a <getch>
    3e42:	c8 2f       	mov	r28, r24
    3e44:	a2 d0       	rcall	.+324    	; 0x3f8a <getch>
    3e46:	d8 2f       	mov	r29, r24
    3e48:	cc 0f       	add	r28, r28
    3e4a:	dd 1f       	adc	r29, r29
    3e4c:	ae d0       	rcall	.+348    	; 0x3faa <verifySpace>
    3e4e:	ea cf       	rjmp	.-44     	; 0x3e24 <main+0xa0>
    3e50:	86 35       	cpi	r24, 0x56	; 86
    3e52:	21 f4       	brne	.+8      	; 0x3e5c <main+0xd8>
    3e54:	84 e0       	ldi	r24, 0x04	; 4
    3e56:	b1 d0       	rcall	.+354    	; 0x3fba <getNch>
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	e3 cf       	rjmp	.-58     	; 0x3e22 <main+0x9e>
    3e5c:	84 36       	cpi	r24, 0x64	; 100
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <main+0xde>
    3e60:	55 c0       	rjmp	.+170    	; 0x3f0c <main+0x188>
    3e62:	93 d0       	rcall	.+294    	; 0x3f8a <getch>
    3e64:	92 d0       	rcall	.+292    	; 0x3f8a <getch>
    3e66:	f8 2e       	mov	r15, r24
    3e68:	90 d0       	rcall	.+288    	; 0x3f8a <getch>
    3e6a:	68 2e       	mov	r6, r24
    3e6c:	00 e0       	ldi	r16, 0x00	; 0
    3e6e:	11 e0       	ldi	r17, 0x01	; 1
    3e70:	48 01       	movw	r8, r16
    3e72:	0f 5f       	subi	r16, 0xFF	; 255
    3e74:	1f 4f       	sbci	r17, 0xFF	; 255
    3e76:	89 d0       	rcall	.+274    	; 0x3f8a <getch>
    3e78:	f4 01       	movw	r30, r8
    3e7a:	80 83       	st	Z, r24
    3e7c:	f0 12       	cpse	r15, r16
    3e7e:	f8 cf       	rjmp	.-16     	; 0x3e70 <main+0xec>
    3e80:	94 d0       	rcall	.+296    	; 0x3faa <verifySpace>
    3e82:	20 97       	sbiw	r28, 0x00	; 0
    3e84:	81 f4       	brne	.+32     	; 0x3ea6 <main+0x122>
    3e86:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    3e8a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_edata+0x44>
    3e8e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
    3e92:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_edata+0x45>
    3e96:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <_edata+0x2>
    3e9a:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <_edata+0x3>
    3e9e:	f5 e4       	ldi	r31, 0x45	; 69
    3ea0:	6f 12       	cpse	r6, r31
    3ea2:	15 c0       	rjmp	.+42     	; 0x3ece <main+0x14a>
    3ea4:	ff cf       	rjmp	.-2      	; 0x3ea4 <main+0x120>
    3ea6:	c0 36       	cpi	r28, 0x60	; 96
    3ea8:	d1 05       	cpc	r29, r1
    3eaa:	c9 f7       	brne	.-14     	; 0x3e9e <main+0x11a>
    3eac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_edata+0xa>
    3eb0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_edata+0x46>
    3eb4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_edata+0xb>
    3eb8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_edata+0x47>
    3ebc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3ec0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_edata+0xa>
    3ec4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3ec8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_edata+0xb>
    3ecc:	e8 cf       	rjmp	.-48     	; 0x3e9e <main+0x11a>
    3ece:	8c 2f       	mov	r24, r28
    3ed0:	8f 77       	andi	r24, 0x7F	; 127
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	31 f4       	brne	.+12     	; 0x3ee2 <main+0x15e>
    3ed6:	77 be       	out	0x37, r7	; 55
    3ed8:	e8 95       	spm
    3eda:	07 b6       	in	r0, 0x37	; 55
    3edc:	00 fc       	sbrc	r0, 0
    3ede:	fd cf       	rjmp	.-6      	; 0x3eda <main+0x156>
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	31 e0       	ldi	r19, 0x01	; 1
    3ee6:	d9 01       	movw	r26, r18
    3ee8:	2e 5f       	subi	r18, 0xFE	; 254
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	8d 91       	ld	r24, X+
    3eee:	9c 91       	ld	r25, X
    3ef0:	0c 01       	movw	r0, r24
    3ef2:	b7 be       	out	0x37, r11	; 55
    3ef4:	e8 95       	spm
    3ef6:	11 24       	eor	r1, r1
    3ef8:	32 96       	adiw	r30, 0x02	; 2
    3efa:	f2 12       	cpse	r15, r18
    3efc:	f4 cf       	rjmp	.-24     	; 0x3ee6 <main+0x162>
    3efe:	fe 01       	movw	r30, r28
    3f00:	a7 be       	out	0x37, r10	; 55
    3f02:	e8 95       	spm
    3f04:	07 b6       	in	r0, 0x37	; 55
    3f06:	00 fc       	sbrc	r0, 0
    3f08:	fd cf       	rjmp	.-6      	; 0x3f04 <main+0x180>
    3f0a:	8c cf       	rjmp	.-232    	; 0x3e24 <main+0xa0>
    3f0c:	84 37       	cpi	r24, 0x74	; 116
    3f0e:	39 f5       	brne	.+78     	; 0x3f5e <main+0x1da>
    3f10:	3c d0       	rcall	.+120    	; 0x3f8a <getch>
    3f12:	3b d0       	rcall	.+118    	; 0x3f8a <getch>
    3f14:	f8 2e       	mov	r15, r24
    3f16:	39 d0       	rcall	.+114    	; 0x3f8a <getch>
    3f18:	48 d0       	rcall	.+144    	; 0x3faa <verifySpace>
    3f1a:	8e 01       	movw	r16, r28
    3f1c:	fc 0e       	add	r15, r28
    3f1e:	02 30       	cpi	r16, 0x02	; 2
    3f20:	11 05       	cpc	r17, r1
    3f22:	41 f4       	brne	.+16     	; 0x3f34 <main+0x1b0>
    3f24:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3f28:	29 d0       	rcall	.+82     	; 0x3f7c <putch>
    3f2a:	0f 5f       	subi	r16, 0xFF	; 255
    3f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2e:	f0 12       	cpse	r15, r16
    3f30:	f6 cf       	rjmp	.-20     	; 0x3f1e <main+0x19a>
    3f32:	78 cf       	rjmp	.-272    	; 0x3e24 <main+0xa0>
    3f34:	03 30       	cpi	r16, 0x03	; 3
    3f36:	11 05       	cpc	r17, r1
    3f38:	19 f4       	brne	.+6      	; 0x3f40 <main+0x1bc>
    3f3a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3f3e:	f4 cf       	rjmp	.-24     	; 0x3f28 <main+0x1a4>
    3f40:	0a 36       	cpi	r16, 0x6A	; 106
    3f42:	11 05       	cpc	r17, r1
    3f44:	19 f4       	brne	.+6      	; 0x3f4c <main+0x1c8>
    3f46:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_edata+0x46>
    3f4a:	ee cf       	rjmp	.-36     	; 0x3f28 <main+0x1a4>
    3f4c:	0b 36       	cpi	r16, 0x6B	; 107
    3f4e:	11 05       	cpc	r17, r1
    3f50:	19 f4       	brne	.+6      	; 0x3f58 <main+0x1d4>
    3f52:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_edata+0x47>
    3f56:	e8 cf       	rjmp	.-48     	; 0x3f28 <main+0x1a4>
    3f58:	f8 01       	movw	r30, r16
    3f5a:	84 91       	lpm	r24, Z
    3f5c:	e5 cf       	rjmp	.-54     	; 0x3f28 <main+0x1a4>
    3f5e:	85 37       	cpi	r24, 0x75	; 117
    3f60:	39 f4       	brne	.+14     	; 0x3f70 <main+0x1ec>
    3f62:	23 d0       	rcall	.+70     	; 0x3faa <verifySpace>
    3f64:	8e e1       	ldi	r24, 0x1E	; 30
    3f66:	0a d0       	rcall	.+20     	; 0x3f7c <putch>
    3f68:	84 e9       	ldi	r24, 0x94	; 148
    3f6a:	08 d0       	rcall	.+16     	; 0x3f7c <putch>
    3f6c:	82 e1       	ldi	r24, 0x12	; 18
    3f6e:	59 cf       	rjmp	.-334    	; 0x3e22 <main+0x9e>
    3f70:	81 35       	cpi	r24, 0x51	; 81
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <main+0x1f2>
    3f74:	6b cf       	rjmp	.-298    	; 0x3e4c <main+0xc8>
    3f76:	88 e0       	ldi	r24, 0x08	; 8
    3f78:	14 d0       	rcall	.+40     	; 0x3fa2 <watchdogConfig>
    3f7a:	68 cf       	rjmp	.-304    	; 0x3e4c <main+0xc8>

00003f7c <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f7c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    3f80:	95 ff       	sbrs	r25, 5
    3f82:	fc cf       	rjmp	.-8      	; 0x3f7c <putch>
  UART_UDR = ch;
    3f84:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    3f88:	08 95       	ret

00003f8a <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f8a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    3f8e:	87 ff       	sbrs	r24, 7
    3f90:	fc cf       	rjmp	.-8      	; 0x3f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f92:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    3f96:	84 fd       	sbrc	r24, 4
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f9a:	a8 95       	wdr
  ch = UART_UDR;
    3f9c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
}
    3fa0:	08 95       	ret

00003fa2 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    3fa2:	98 ed       	ldi	r25, 0xD8	; 216
    3fa4:	9f bd       	out	0x2f, r25	; 47
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3fa6:	80 bf       	out	0x30, r24	; 48
#else
  WDTCR= x;
#endif
}
    3fa8:	08 95       	ret

00003faa <verifySpace>:
  if (getch() != CRC_EOP) {
    3faa:	ef df       	rcall	.-34     	; 0x3f8a <getch>
    3fac:	80 32       	cpi	r24, 0x20	; 32
    3fae:	19 f0       	breq	.+6      	; 0x3fb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fb0:	88 e0       	ldi	r24, 0x08	; 8
    3fb2:	f7 df       	rcall	.-18     	; 0x3fa2 <watchdogConfig>
    3fb4:	ff cf       	rjmp	.-2      	; 0x3fb4 <verifySpace+0xa>
  putch(STK_INSYNC);
    3fb6:	84 e1       	ldi	r24, 0x14	; 20
    3fb8:	e1 cf       	rjmp	.-62     	; 0x3f7c <putch>

00003fba <getNch>:
void getNch(uint8_t count) {
    3fba:	cf 93       	push	r28
    3fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fbe:	e5 df       	rcall	.-54     	; 0x3f8a <getch>
    3fc0:	c1 50       	subi	r28, 0x01	; 1
    3fc2:	e9 f7       	brne	.-6      	; 0x3fbe <getNch+0x4>
}
    3fc4:	cf 91       	pop	r28
  verifySpace();
    3fc6:	f1 cf       	rjmp	.-30     	; 0x3faa <verifySpace>

00003fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    3fc8:	fc 01       	movw	r30, r24
    3fca:	0a 01       	movw	r0, r20
    3fcc:	67 bf       	out	0x37, r22	; 55
    3fce:	e8 95       	spm
    3fd0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    3fd2:	07 b6       	in	r0, 0x37	; 55
    3fd4:	00 fc       	sbrc	r0, 0
    3fd6:	fd cf       	rjmp	.-6      	; 0x3fd2 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    3fd8:	08 95       	ret
