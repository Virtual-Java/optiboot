
optiboot_attiny167.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fc2  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000d80  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa2  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	16 c1       	rjmp	.+556    	; 0x1fb0 <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	f2 d0       	rcall	.+484    	; 0x1f86 <watchdogConfig>
    1da2:	e0 e2       	ldi	r30, 0x20	; 32
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
    1db4:	80 e1       	ldi	r24, 0x10	; 16
    1db6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
    1dba:	88 e8       	ldi	r24, 0x88	; 136
    1dbc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
    1dc0:	8f e0       	ldi	r24, 0x0F	; 15
    1dc2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
    1dc6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
    1dca:	8e e0       	ldi	r24, 0x0E	; 14
    1dcc:	dc d0       	rcall	.+440    	; 0x1f86 <watchdogConfig>
    1dce:	0b 9a       	sbi	0x01, 3	; 1
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    1dd2:	28 e1       	ldi	r18, 0x18	; 24
    1dd4:	3e ef       	ldi	r19, 0xFE	; 254
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ddc:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1de0:	96 bb       	out	0x16, r25	; 22
    1de2:	b0 9b       	sbis	0x16, 0	; 22
    1de4:	fe cf       	rjmp	.-4      	; 0x1de2 <main+0x5e>
    1de6:	03 9a       	sbi	0x00, 3	; 0
    1de8:	a8 95       	wdr
    1dea:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
    1dee:	40 fd       	sbrc	r20, 0
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <main+0x72>
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	89 f7       	brne	.-30     	; 0x1dd8 <main+0x54>
    1df6:	80 ec       	ldi	r24, 0xC0	; 192
    1df8:	9e e0       	ldi	r25, 0x0E	; 14
    1dfa:	e9 2e       	mov	r14, r25
    1dfc:	23 e0       	ldi	r18, 0x03	; 3
    1dfe:	b2 2e       	mov	r11, r18
    1e00:	aa 24       	eor	r10, r10
    1e02:	a3 94       	inc	r10
    1e04:	35 e0       	ldi	r19, 0x05	; 5
    1e06:	93 2e       	mov	r9, r19
    1e08:	6c 01       	movw	r12, r24
    1e0a:	b1 d0       	rcall	.+354    	; 0x1f6e <getch>
    1e0c:	81 34       	cpi	r24, 0x41	; 65
    1e0e:	71 f4       	brne	.+28     	; 0x1e2c <main+0xa8>
    1e10:	ae d0       	rcall	.+348    	; 0x1f6e <getch>
    1e12:	18 2f       	mov	r17, r24
    1e14:	be d0       	rcall	.+380    	; 0x1f92 <verifySpace>
    1e16:	12 38       	cpi	r17, 0x82	; 130
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <main+0x9a>
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <main+0xa4>
    1e1e:	11 38       	cpi	r17, 0x81	; 129
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <main+0xa2>
    1e22:	88 e0       	ldi	r24, 0x08	; 8
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <main+0xa4>
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	9b d0       	rcall	.+310    	; 0x1f60 <putch>
    1e2a:	97 c0       	rjmp	.+302    	; 0x1f5a <main+0x1d6>
    1e2c:	82 34       	cpi	r24, 0x42	; 66
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <main+0xb0>
    1e30:	84 e1       	ldi	r24, 0x14	; 20
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <main+0xb6>
    1e34:	85 34       	cpi	r24, 0x45	; 69
    1e36:	19 f4       	brne	.+6      	; 0x1e3e <main+0xba>
    1e38:	85 e0       	ldi	r24, 0x05	; 5
    1e3a:	b3 d0       	rcall	.+358    	; 0x1fa2 <getNch>
    1e3c:	8e c0       	rjmp	.+284    	; 0x1f5a <main+0x1d6>
    1e3e:	85 35       	cpi	r24, 0x55	; 85
    1e40:	39 f4       	brne	.+14     	; 0x1e50 <main+0xcc>
    1e42:	95 d0       	rcall	.+298    	; 0x1f6e <getch>
    1e44:	c8 2f       	mov	r28, r24
    1e46:	93 d0       	rcall	.+294    	; 0x1f6e <getch>
    1e48:	d8 2f       	mov	r29, r24
    1e4a:	cc 0f       	add	r28, r28
    1e4c:	dd 1f       	adc	r29, r29
    1e4e:	84 c0       	rjmp	.+264    	; 0x1f58 <main+0x1d4>
    1e50:	86 35       	cpi	r24, 0x56	; 86
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <main+0xd8>
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	a5 d0       	rcall	.+330    	; 0x1fa2 <getNch>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	e6 cf       	rjmp	.-52     	; 0x1e28 <main+0xa4>
    1e5c:	84 36       	cpi	r24, 0x64	; 100
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <main+0xde>
    1e60:	45 c0       	rjmp	.+138    	; 0x1eec <main+0x168>
    1e62:	85 d0       	rcall	.+266    	; 0x1f6e <getch>
    1e64:	84 d0       	rcall	.+264    	; 0x1f6e <getch>
    1e66:	f8 2e       	mov	r15, r24
    1e68:	82 d0       	rcall	.+260    	; 0x1f6e <getch>
    1e6a:	88 2e       	mov	r8, r24
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	11 e0       	ldi	r17, 0x01	; 1
    1e70:	7e d0       	rcall	.+252    	; 0x1f6e <getch>
    1e72:	f8 01       	movw	r30, r16
    1e74:	81 93       	st	Z+, r24
    1e76:	8f 01       	movw	r16, r30
    1e78:	fe 12       	cpse	r15, r30
    1e7a:	fa cf       	rjmp	.-12     	; 0x1e70 <main+0xec>
    1e7c:	8a d0       	rcall	.+276    	; 0x1f92 <verifySpace>
    1e7e:	20 97       	sbiw	r28, 0x00	; 0
    1e80:	c1 f4       	brne	.+48     	; 0x1eb2 <main+0x12e>
    1e82:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_edata+0x2>
    1e86:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <_edata+0x104>
    1e8a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
    1e8e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_edata+0x105>
    1e92:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <_edata+0x2>
    1e96:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <_edata+0x3>
    1e9a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <_edata+0x42>
    1e9e:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <_edata+0x106>
    1ea2:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <_edata+0x43>
    1ea6:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <_edata+0x107>
    1eaa:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_edata+0x42>
    1eae:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_edata+0x43>
    1eb2:	f5 e4       	ldi	r31, 0x45	; 69
    1eb4:	8f 12       	cpse	r8, r31
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <main+0x136>
    1eb8:	ff cf       	rjmp	.-2      	; 0x1eb8 <main+0x134>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	b7 be       	out	0x37, r11	; 55
    1ebe:	e8 95       	spm
    1ec0:	07 b6       	in	r0, 0x37	; 55
    1ec2:	00 fc       	sbrc	r0, 0
    1ec4:	fd cf       	rjmp	.-6      	; 0x1ec0 <main+0x13c>
    1ec6:	a0 e0       	ldi	r26, 0x00	; 0
    1ec8:	b1 e0       	ldi	r27, 0x01	; 1
    1eca:	fe 01       	movw	r30, r28
    1ecc:	8d 91       	ld	r24, X+
    1ece:	9d 91       	ld	r25, X+
    1ed0:	0c 01       	movw	r0, r24
    1ed2:	a7 be       	out	0x37, r10	; 55
    1ed4:	e8 95       	spm
    1ed6:	11 24       	eor	r1, r1
    1ed8:	32 96       	adiw	r30, 0x02	; 2
    1eda:	fa 12       	cpse	r15, r26
    1edc:	f7 cf       	rjmp	.-18     	; 0x1ecc <main+0x148>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	97 be       	out	0x37, r9	; 55
    1ee2:	e8 95       	spm
    1ee4:	07 b6       	in	r0, 0x37	; 55
    1ee6:	00 fc       	sbrc	r0, 0
    1ee8:	fd cf       	rjmp	.-6      	; 0x1ee4 <main+0x160>
    1eea:	37 c0       	rjmp	.+110    	; 0x1f5a <main+0x1d6>
    1eec:	84 37       	cpi	r24, 0x74	; 116
    1eee:	39 f5       	brne	.+78     	; 0x1f3e <main+0x1ba>
    1ef0:	3e d0       	rcall	.+124    	; 0x1f6e <getch>
    1ef2:	3d d0       	rcall	.+122    	; 0x1f6e <getch>
    1ef4:	f8 2e       	mov	r15, r24
    1ef6:	3b d0       	rcall	.+118    	; 0x1f6e <getch>
    1ef8:	4c d0       	rcall	.+152    	; 0x1f92 <verifySpace>
    1efa:	8e 01       	movw	r16, r28
    1efc:	02 30       	cpi	r16, 0x02	; 2
    1efe:	11 05       	cpc	r17, r1
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <main+0x184>
    1f02:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_edata+0x104>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <main+0x1ac>
    1f08:	03 30       	cpi	r16, 0x03	; 3
    1f0a:	11 05       	cpc	r17, r1
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <main+0x190>
    1f0e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_edata+0x105>
    1f12:	0e c0       	rjmp	.+28     	; 0x1f30 <main+0x1ac>
    1f14:	02 34       	cpi	r16, 0x42	; 66
    1f16:	11 05       	cpc	r17, r1
    1f18:	19 f4       	brne	.+6      	; 0x1f20 <main+0x19c>
    1f1a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_edata+0x106>
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <main+0x1ac>
    1f20:	03 34       	cpi	r16, 0x43	; 67
    1f22:	11 05       	cpc	r17, r1
    1f24:	19 f4       	brne	.+6      	; 0x1f2c <main+0x1a8>
    1f26:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_edata+0x107>
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <main+0x1ac>
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	84 91       	lpm	r24, Z
    1f30:	17 d0       	rcall	.+46     	; 0x1f60 <putch>
    1f32:	fa 94       	dec	r15
    1f34:	0f 5f       	subi	r16, 0xFF	; 255
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	f1 10       	cpse	r15, r1
    1f3a:	e0 cf       	rjmp	.-64     	; 0x1efc <main+0x178>
    1f3c:	0e c0       	rjmp	.+28     	; 0x1f5a <main+0x1d6>
    1f3e:	85 37       	cpi	r24, 0x75	; 117
    1f40:	39 f4       	brne	.+14     	; 0x1f50 <main+0x1cc>
    1f42:	27 d0       	rcall	.+78     	; 0x1f92 <verifySpace>
    1f44:	8e e1       	ldi	r24, 0x1E	; 30
    1f46:	0c d0       	rcall	.+24     	; 0x1f60 <putch>
    1f48:	84 e9       	ldi	r24, 0x94	; 148
    1f4a:	0a d0       	rcall	.+20     	; 0x1f60 <putch>
    1f4c:	87 e8       	ldi	r24, 0x87	; 135
    1f4e:	6c cf       	rjmp	.-296    	; 0x1e28 <main+0xa4>
    1f50:	81 35       	cpi	r24, 0x51	; 81
    1f52:	11 f4       	brne	.+4      	; 0x1f58 <main+0x1d4>
    1f54:	88 e0       	ldi	r24, 0x08	; 8
    1f56:	17 d0       	rcall	.+46     	; 0x1f86 <watchdogConfig>
    1f58:	1c d0       	rcall	.+56     	; 0x1f92 <verifySpace>
    1f5a:	80 e1       	ldi	r24, 0x10	; 16
    1f5c:	01 d0       	rcall	.+2      	; 0x1f60 <putch>
    1f5e:	55 cf       	rjmp	.-342    	; 0x1e0a <main+0x86>

00001f60 <putch>:
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
#endif
#else //is LIN UART
  while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
    1f60:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
    1f64:	91 ff       	sbrs	r25, 1
    1f66:	fc cf       	rjmp	.-8      	; 0x1f60 <putch>
  UART_UDR = ch;
    1f68:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
    1f6c:	08 95       	ret

00001f6e <getch>:
     * don't care that an invalid char is returned...)
     */
    watchdogReset();
  }
#else
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
    1f6e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
    1f72:	80 ff       	sbrs	r24, 0
    1f74:	fc cf       	rjmp	.-8      	; 0x1f6e <getch>
  if (!(LINSIR & _BV(LFERR))) {
    1f76:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
    1f7a:	84 fd       	sbrc	r24, 4
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f7e:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f80:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1f84:	08 95       	ret

00001f86 <watchdogConfig>:
void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
    1f86:	e0 e6       	ldi	r30, 0x60	; 96
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	98 e1       	ldi	r25, 0x18	; 24
    1f8c:	90 83       	st	Z, r25
#endif

#ifdef WDTCSR
  WDTCSR = x;
#else
  WDTCR= x;
    1f8e:	80 83       	st	Z, r24
    1f90:	08 95       	ret

00001f92 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f92:	ed df       	rcall	.-38     	; 0x1f6e <getch>
    1f94:	80 32       	cpi	r24, 0x20	; 32
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f98:	88 e0       	ldi	r24, 0x08	; 8
    1f9a:	f5 df       	rcall	.-22     	; 0x1f86 <watchdogConfig>
    1f9c:	ff cf       	rjmp	.-2      	; 0x1f9c <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f9e:	84 e1       	ldi	r24, 0x14	; 20
    1fa0:	df cf       	rjmp	.-66     	; 0x1f60 <putch>

00001fa2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1fa2:	cf 93       	push	r28
    1fa4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fa6:	e3 df       	rcall	.-58     	; 0x1f6e <getch>
    1fa8:	c1 50       	subi	r28, 0x01	; 1
    1faa:	e9 f7       	brne	.-6      	; 0x1fa6 <getNch+0x4>
  verifySpace();
}
    1fac:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fae:	f1 cf       	rjmp	.-30     	; 0x1f92 <verifySpace>

00001fb0 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	0a 01       	movw	r0, r20
    1fb4:	67 bf       	out	0x37, r22	; 55
    1fb6:	e8 95       	spm
    1fb8:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fba:	07 b6       	in	r0, 0x37	; 55
    1fbc:	00 fc       	sbrc	r0, 0
    1fbe:	fd cf       	rjmp	.-6      	; 0x1fba <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fc0:	08 95       	ret
