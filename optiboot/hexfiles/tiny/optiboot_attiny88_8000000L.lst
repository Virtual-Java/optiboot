
optiboot_attiny88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fda  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         000009cc  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000372  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	22 c1       	rjmp	.+580    	; 0x1fc8 <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	fe d0       	rcall	.+508    	; 0x1f9e <watchdogConfig>
    1da2:	e1 e1       	ldi	r30, 0x11	; 17
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
    1dae:	8e e0       	ldi	r24, 0x0E	; 14
    1db0:	f6 d0       	rcall	.+492    	; 0x1f9e <watchdogConfig>
    1db2:	25 9a       	sbi	0x04, 5	; 4
    1db4:	56 9a       	sbi	0x0a, 6	; 10
    1db6:	86 e0       	ldi	r24, 0x06	; 6
    1db8:	28 e1       	ldi	r18, 0x18	; 24
    1dba:	3e ef       	ldi	r19, 0xFE	; 254
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1dc2:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
    1dc6:	96 bb       	out	0x16, r25	; 22
    1dc8:	b0 9b       	sbis	0x16, 0	; 22
    1dca:	fe cf       	rjmp	.-4      	; 0x1dc8 <main+0x44>
    1dcc:	1d 9a       	sbi	0x03, 5	; 3
    1dce:	a8 95       	wdr
    1dd0:	81 50       	subi	r24, 0x01	; 1
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <main+0x3a>
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	d9 2e       	mov	r13, r25
    1dd8:	cc 24       	eor	r12, r12
    1dda:	c3 94       	inc	r12
    1ddc:	25 e0       	ldi	r18, 0x05	; 5
    1dde:	92 2e       	mov	r9, r18
    1de0:	3f eb       	ldi	r19, 0xBF	; 191
    1de2:	e3 2e       	mov	r14, r19
    1de4:	3e e0       	ldi	r19, 0x0E	; 14
    1de6:	f3 2e       	mov	r15, r19
    1de8:	8f 2d       	mov	r24, r15
    1dea:	80 6c       	ori	r24, 0xC0	; 192
    1dec:	88 2e       	mov	r8, r24
    1dee:	c3 d0       	rcall	.+390    	; 0x1f76 <getch>
    1df0:	81 34       	cpi	r24, 0x41	; 65
    1df2:	71 f4       	brne	.+28     	; 0x1e10 <main+0x8c>
    1df4:	c0 d0       	rcall	.+384    	; 0x1f76 <getch>
    1df6:	18 2f       	mov	r17, r24
    1df8:	d8 d0       	rcall	.+432    	; 0x1faa <verifySpace>
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	12 38       	cpi	r17, 0x82	; 130
    1dfe:	21 f0       	breq	.+8      	; 0x1e08 <main+0x84>
    1e00:	88 e0       	ldi	r24, 0x08	; 8
    1e02:	11 38       	cpi	r17, 0x81	; 129
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <main+0x84>
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	a7 d0       	rcall	.+334    	; 0x1f58 <putch>
    1e0a:	80 e1       	ldi	r24, 0x10	; 16
    1e0c:	a5 d0       	rcall	.+330    	; 0x1f58 <putch>
    1e0e:	ef cf       	rjmp	.-34     	; 0x1dee <main+0x6a>
    1e10:	82 34       	cpi	r24, 0x42	; 66
    1e12:	19 f4       	brne	.+6      	; 0x1e1a <main+0x96>
    1e14:	84 e1       	ldi	r24, 0x14	; 20
    1e16:	d1 d0       	rcall	.+418    	; 0x1fba <getNch>
    1e18:	f8 cf       	rjmp	.-16     	; 0x1e0a <main+0x86>
    1e1a:	85 34       	cpi	r24, 0x45	; 69
    1e1c:	11 f4       	brne	.+4      	; 0x1e22 <main+0x9e>
    1e1e:	85 e0       	ldi	r24, 0x05	; 5
    1e20:	fa cf       	rjmp	.-12     	; 0x1e16 <main+0x92>
    1e22:	85 35       	cpi	r24, 0x55	; 85
    1e24:	41 f4       	brne	.+16     	; 0x1e36 <main+0xb2>
    1e26:	a7 d0       	rcall	.+334    	; 0x1f76 <getch>
    1e28:	c8 2f       	mov	r28, r24
    1e2a:	a5 d0       	rcall	.+330    	; 0x1f76 <getch>
    1e2c:	d8 2f       	mov	r29, r24
    1e2e:	cc 0f       	add	r28, r28
    1e30:	dd 1f       	adc	r29, r29
    1e32:	bb d0       	rcall	.+374    	; 0x1faa <verifySpace>
    1e34:	ea cf       	rjmp	.-44     	; 0x1e0a <main+0x86>
    1e36:	86 35       	cpi	r24, 0x56	; 86
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <main+0xbe>
    1e3a:	84 e0       	ldi	r24, 0x04	; 4
    1e3c:	be d0       	rcall	.+380    	; 0x1fba <getNch>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	e3 cf       	rjmp	.-58     	; 0x1e08 <main+0x84>
    1e42:	84 36       	cpi	r24, 0x64	; 100
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <main+0xc4>
    1e46:	50 c0       	rjmp	.+160    	; 0x1ee8 <main+0x164>
    1e48:	96 d0       	rcall	.+300    	; 0x1f76 <getch>
    1e4a:	95 d0       	rcall	.+298    	; 0x1f76 <getch>
    1e4c:	78 2e       	mov	r7, r24
    1e4e:	93 d0       	rcall	.+294    	; 0x1f76 <getch>
    1e50:	68 2e       	mov	r6, r24
    1e52:	00 e0       	ldi	r16, 0x00	; 0
    1e54:	11 e0       	ldi	r17, 0x01	; 1
    1e56:	58 01       	movw	r10, r16
    1e58:	0f 5f       	subi	r16, 0xFF	; 255
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	8c d0       	rcall	.+280    	; 0x1f76 <getch>
    1e5e:	f5 01       	movw	r30, r10
    1e60:	80 83       	st	Z, r24
    1e62:	70 12       	cpse	r7, r16
    1e64:	f8 cf       	rjmp	.-16     	; 0x1e56 <main+0xd2>
    1e66:	a1 d0       	rcall	.+322    	; 0x1faa <verifySpace>
    1e68:	20 97       	sbiw	r28, 0x00	; 0
    1e6a:	f9 f4       	brne	.+62     	; 0x1eaa <main+0x126>
    1e6c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
    1e70:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <_edata+0x84>
    1e74:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
    1e78:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <_edata+0x85>
    1e7c:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
    1e80:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <_edata+0x1>
    1e84:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <_edata+0x22>
    1e88:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <_edata+0x86>
    1e8c:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <_edata+0x23>
    1e90:	40 93 87 01 	sts	0x0187, r20	; 0x800187 <_edata+0x87>
    1e94:	29 2f       	mov	r18, r25
    1e96:	38 2f       	mov	r19, r24
    1e98:	21 51       	subi	r18, 0x11	; 17
    1e9a:	31 09       	sbc	r19, r1
    1e9c:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_edata+0x22>
    1ea0:	83 2f       	mov	r24, r19
    1ea2:	8f 70       	andi	r24, 0x0F	; 15
    1ea4:	80 6c       	ori	r24, 0xC0	; 192
    1ea6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_edata+0x23>
    1eaa:	f5 e4       	ldi	r31, 0x45	; 69
    1eac:	6f 12       	cpse	r6, r31
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <main+0x12e>
    1eb0:	ff cf       	rjmp	.-2      	; 0x1eb0 <main+0x12c>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	d7 be       	out	0x37, r13	; 55
    1eb6:	e8 95       	spm
    1eb8:	07 b6       	in	r0, 0x37	; 55
    1eba:	00 fc       	sbrc	r0, 0
    1ebc:	fd cf       	rjmp	.-6      	; 0x1eb8 <main+0x134>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	02 96       	adiw	r24, 0x02	; 2
    1ec8:	2d 91       	ld	r18, X+
    1eca:	3c 91       	ld	r19, X
    1ecc:	09 01       	movw	r0, r18
    1ece:	c7 be       	out	0x37, r12	; 55
    1ed0:	e8 95       	spm
    1ed2:	11 24       	eor	r1, r1
    1ed4:	32 96       	adiw	r30, 0x02	; 2
    1ed6:	78 12       	cpse	r7, r24
    1ed8:	f5 cf       	rjmp	.-22     	; 0x1ec4 <main+0x140>
    1eda:	fe 01       	movw	r30, r28
    1edc:	97 be       	out	0x37, r9	; 55
    1ede:	e8 95       	spm
    1ee0:	07 b6       	in	r0, 0x37	; 55
    1ee2:	00 fc       	sbrc	r0, 0
    1ee4:	fd cf       	rjmp	.-6      	; 0x1ee0 <main+0x15c>
    1ee6:	91 cf       	rjmp	.-222    	; 0x1e0a <main+0x86>
    1ee8:	84 37       	cpi	r24, 0x74	; 116
    1eea:	39 f5       	brne	.+78     	; 0x1f3a <main+0x1b6>
    1eec:	44 d0       	rcall	.+136    	; 0x1f76 <getch>
    1eee:	43 d0       	rcall	.+134    	; 0x1f76 <getch>
    1ef0:	b8 2e       	mov	r11, r24
    1ef2:	41 d0       	rcall	.+130    	; 0x1f76 <getch>
    1ef4:	5a d0       	rcall	.+180    	; 0x1faa <verifySpace>
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	bc 0e       	add	r11, r28
    1efa:	01 15       	cp	r16, r1
    1efc:	11 05       	cpc	r17, r1
    1efe:	41 f4       	brne	.+16     	; 0x1f10 <main+0x18c>
    1f00:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_edata+0x84>
    1f04:	29 d0       	rcall	.+82     	; 0x1f58 <putch>
    1f06:	0f 5f       	subi	r16, 0xFF	; 255
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	b0 12       	cpse	r11, r16
    1f0c:	f6 cf       	rjmp	.-20     	; 0x1efa <main+0x176>
    1f0e:	7d cf       	rjmp	.-262    	; 0x1e0a <main+0x86>
    1f10:	01 30       	cpi	r16, 0x01	; 1
    1f12:	11 05       	cpc	r17, r1
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <main+0x198>
    1f16:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_edata+0x85>
    1f1a:	f4 cf       	rjmp	.-24     	; 0x1f04 <main+0x180>
    1f1c:	02 32       	cpi	r16, 0x22	; 34
    1f1e:	11 05       	cpc	r17, r1
    1f20:	19 f4       	brne	.+6      	; 0x1f28 <main+0x1a4>
    1f22:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_edata+0x86>
    1f26:	ee cf       	rjmp	.-36     	; 0x1f04 <main+0x180>
    1f28:	03 32       	cpi	r16, 0x23	; 35
    1f2a:	11 05       	cpc	r17, r1
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <main+0x1b0>
    1f2e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_edata+0x87>
    1f32:	e8 cf       	rjmp	.-48     	; 0x1f04 <main+0x180>
    1f34:	f8 01       	movw	r30, r16
    1f36:	84 91       	lpm	r24, Z
    1f38:	e5 cf       	rjmp	.-54     	; 0x1f04 <main+0x180>
    1f3a:	85 37       	cpi	r24, 0x75	; 117
    1f3c:	39 f4       	brne	.+14     	; 0x1f4c <main+0x1c8>
    1f3e:	35 d0       	rcall	.+106    	; 0x1faa <verifySpace>
    1f40:	8e e1       	ldi	r24, 0x1E	; 30
    1f42:	0a d0       	rcall	.+20     	; 0x1f58 <putch>
    1f44:	83 e9       	ldi	r24, 0x93	; 147
    1f46:	08 d0       	rcall	.+16     	; 0x1f58 <putch>
    1f48:	81 e1       	ldi	r24, 0x11	; 17
    1f4a:	5e cf       	rjmp	.-324    	; 0x1e08 <main+0x84>
    1f4c:	81 35       	cpi	r24, 0x51	; 81
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <main+0x1ce>
    1f50:	70 cf       	rjmp	.-288    	; 0x1e32 <main+0xae>
    1f52:	88 e0       	ldi	r24, 0x08	; 8
    1f54:	24 d0       	rcall	.+72     	; 0x1f9e <watchdogConfig>
    1f56:	6d cf       	rjmp	.-294    	; 0x1e32 <main+0xae>

00001f58 <putch>:
  RS485_PORT &= ~_BV(RS485_BIT);
  #else
  RS485_PORT |= _BV(RS485_BIT);
  #endif
#endif
  __asm__ __volatile__ (
    1f58:	2a e0       	ldi	r18, 0x0A	; 10
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	80 95       	com	r24
    1f5e:	08 94       	sec
    1f60:	10 f4       	brcc	.+4      	; 0x1f66 <putch+0xe>
    1f62:	5e 98       	cbi	0x0b, 6	; 11
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <putch+0x12>
    1f66:	5e 9a       	sbi	0x0b, 6	; 11
    1f68:	00 00       	nop
    1f6a:	15 d0       	rcall	.+42     	; 0x1f96 <uartDelay>
    1f6c:	14 d0       	rcall	.+40     	; 0x1f96 <uartDelay>
    1f6e:	86 95       	lsr	r24
    1f70:	2a 95       	dec	r18
    1f72:	b1 f7       	brne	.-20     	; 0x1f60 <putch+0x8>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f74:	08 95       	ret

00001f76 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f76:	a8 95       	wdr
  __asm__ __volatile__ (
    1f78:	29 e0       	ldi	r18, 0x09	; 9
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4f 99       	sbic	0x09, 7	; 9
    1f7e:	fe cf       	rjmp	.-4      	; 0x1f7c <getch+0x6>
    1f80:	0a d0       	rcall	.+20     	; 0x1f96 <uartDelay>
    1f82:	09 d0       	rcall	.+18     	; 0x1f96 <uartDelay>
    1f84:	08 d0       	rcall	.+16     	; 0x1f96 <uartDelay>
    1f86:	88 94       	clc
    1f88:	4f 99       	sbic	0x09, 7	; 9
    1f8a:	08 94       	sec
    1f8c:	2a 95       	dec	r18
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <getch+0x1e>
    1f90:	87 95       	ror	r24
    1f92:	f7 cf       	rjmp	.-18     	; 0x1f82 <getch+0xc>
}
    1f94:	08 95       	ret

00001f96 <uartDelay>:
  __asm__ __volatile__ (
    1f96:	92 e4       	ldi	r25, 0x42	; 66
    1f98:	9a 95       	dec	r25
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <uartDelay+0x2>
    1f9c:	08 95       	ret

00001f9e <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f9e:	e0 e6       	ldi	r30, 0x60	; 96
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	98 e1       	ldi	r25, 0x18	; 24
    1fa4:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1fa6:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
    1fa8:	08 95       	ret

00001faa <verifySpace>:
  if (getch() != CRC_EOP) {
    1faa:	e5 df       	rcall	.-54     	; 0x1f76 <getch>
    1fac:	80 32       	cpi	r24, 0x20	; 32
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fb0:	88 e0       	ldi	r24, 0x08	; 8
    1fb2:	f5 df       	rcall	.-22     	; 0x1f9e <watchdogConfig>
    1fb4:	ff cf       	rjmp	.-2      	; 0x1fb4 <verifySpace+0xa>
  putch(STK_INSYNC);
    1fb6:	84 e1       	ldi	r24, 0x14	; 20
    1fb8:	cf cf       	rjmp	.-98     	; 0x1f58 <putch>

00001fba <getNch>:
void getNch(uint8_t count) {
    1fba:	cf 93       	push	r28
    1fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fbe:	db df       	rcall	.-74     	; 0x1f76 <getch>
    1fc0:	c1 50       	subi	r28, 0x01	; 1
    1fc2:	e9 f7       	brne	.-6      	; 0x1fbe <getNch+0x4>
}
    1fc4:	cf 91       	pop	r28
  verifySpace();
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <verifySpace>

00001fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fc8:	fc 01       	movw	r30, r24
    1fca:	0a 01       	movw	r0, r20
    1fcc:	67 bf       	out	0x37, r22	; 55
    1fce:	e8 95       	spm
    1fd0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fd2:	07 b6       	in	r0, 0x37	; 55
    1fd4:	00 fc       	sbrc	r0, 0
    1fd6:	fd cf       	rjmp	.-6      	; 0x1fd2 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fd8:	08 95       	ret
