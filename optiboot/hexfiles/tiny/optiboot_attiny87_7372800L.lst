
optiboot_attiny87.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fda  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000a44  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000361  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	22 c1       	rjmp	.+580    	; 0x1fc8 <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	fe d0       	rcall	.+508    	; 0x1f9e <watchdogConfig>
    1da2:	e0 e1       	ldi	r30, 0x10	; 16
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
    1db4:	8f e0       	ldi	r24, 0x0F	; 15
    1db6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
    1dba:	98 e8       	ldi	r25, 0x88	; 136
    1dbc:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
    1dc0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
    1dc4:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
    1dc8:	8e e0       	ldi	r24, 0x0E	; 14
    1dca:	e9 d0       	rcall	.+466    	; 0x1f9e <watchdogConfig>
    1dcc:	0b 9a       	sbi	0x01, 3	; 1
    1dce:	86 e0       	ldi	r24, 0x06	; 6
    1dd0:	2e e3       	ldi	r18, 0x3E	; 62
    1dd2:	3e ef       	ldi	r19, 0xFE	; 254
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1dda:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
    1dde:	96 bb       	out	0x16, r25	; 22
    1de0:	b0 9b       	sbis	0x16, 0	; 22
    1de2:	fe cf       	rjmp	.-4      	; 0x1de0 <main+0x5c>
    1de4:	03 9a       	sbi	0x00, 3	; 0
    1de6:	a8 95       	wdr
    1de8:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    1dec:	40 fd       	sbrc	r20, 0
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <main+0x70>
    1df0:	81 50       	subi	r24, 0x01	; 1
    1df2:	89 f7       	brne	.-30     	; 0x1dd6 <main+0x52>
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	d9 2e       	mov	r13, r25
    1df8:	cc 24       	eor	r12, r12
    1dfa:	c3 94       	inc	r12
    1dfc:	25 e0       	ldi	r18, 0x05	; 5
    1dfe:	92 2e       	mov	r9, r18
    1e00:	3f eb       	ldi	r19, 0xBF	; 191
    1e02:	e3 2e       	mov	r14, r19
    1e04:	3e e0       	ldi	r19, 0x0E	; 14
    1e06:	f3 2e       	mov	r15, r19
    1e08:	8f 2d       	mov	r24, r15
    1e0a:	80 6c       	ori	r24, 0xC0	; 192
    1e0c:	88 2e       	mov	r8, r24
    1e0e:	bb d0       	rcall	.+374    	; 0x1f86 <getch>
    1e10:	81 34       	cpi	r24, 0x41	; 65
    1e12:	71 f4       	brne	.+28     	; 0x1e30 <main+0xac>
    1e14:	b8 d0       	rcall	.+368    	; 0x1f86 <getch>
    1e16:	18 2f       	mov	r17, r24
    1e18:	c8 d0       	rcall	.+400    	; 0x1faa <verifySpace>
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	12 38       	cpi	r17, 0x82	; 130
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <main+0xa4>
    1e20:	88 e0       	ldi	r24, 0x08	; 8
    1e22:	11 38       	cpi	r17, 0x81	; 129
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <main+0xa4>
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	a7 d0       	rcall	.+334    	; 0x1f78 <putch>
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	a5 d0       	rcall	.+330    	; 0x1f78 <putch>
    1e2e:	ef cf       	rjmp	.-34     	; 0x1e0e <main+0x8a>
    1e30:	82 34       	cpi	r24, 0x42	; 66
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <main+0xb6>
    1e34:	84 e1       	ldi	r24, 0x14	; 20
    1e36:	c1 d0       	rcall	.+386    	; 0x1fba <getNch>
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <main+0xa6>
    1e3a:	85 34       	cpi	r24, 0x45	; 69
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <main+0xbe>
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	fa cf       	rjmp	.-12     	; 0x1e36 <main+0xb2>
    1e42:	85 35       	cpi	r24, 0x55	; 85
    1e44:	41 f4       	brne	.+16     	; 0x1e56 <main+0xd2>
    1e46:	9f d0       	rcall	.+318    	; 0x1f86 <getch>
    1e48:	c8 2f       	mov	r28, r24
    1e4a:	9d d0       	rcall	.+314    	; 0x1f86 <getch>
    1e4c:	d8 2f       	mov	r29, r24
    1e4e:	cc 0f       	add	r28, r28
    1e50:	dd 1f       	adc	r29, r29
    1e52:	ab d0       	rcall	.+342    	; 0x1faa <verifySpace>
    1e54:	ea cf       	rjmp	.-44     	; 0x1e2a <main+0xa6>
    1e56:	86 35       	cpi	r24, 0x56	; 86
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <main+0xde>
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	ae d0       	rcall	.+348    	; 0x1fba <getNch>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	e3 cf       	rjmp	.-58     	; 0x1e28 <main+0xa4>
    1e62:	84 36       	cpi	r24, 0x64	; 100
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <main+0xe4>
    1e66:	50 c0       	rjmp	.+160    	; 0x1f08 <main+0x184>
    1e68:	8e d0       	rcall	.+284    	; 0x1f86 <getch>
    1e6a:	8d d0       	rcall	.+282    	; 0x1f86 <getch>
    1e6c:	78 2e       	mov	r7, r24
    1e6e:	8b d0       	rcall	.+278    	; 0x1f86 <getch>
    1e70:	68 2e       	mov	r6, r24
    1e72:	00 e0       	ldi	r16, 0x00	; 0
    1e74:	11 e0       	ldi	r17, 0x01	; 1
    1e76:	58 01       	movw	r10, r16
    1e78:	0f 5f       	subi	r16, 0xFF	; 255
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	84 d0       	rcall	.+264    	; 0x1f86 <getch>
    1e7e:	f5 01       	movw	r30, r10
    1e80:	80 83       	st	Z, r24
    1e82:	70 12       	cpse	r7, r16
    1e84:	f8 cf       	rjmp	.-16     	; 0x1e76 <main+0xf2>
    1e86:	91 d0       	rcall	.+290    	; 0x1faa <verifySpace>
    1e88:	20 97       	sbiw	r28, 0x00	; 0
    1e8a:	f9 f4       	brne	.+62     	; 0x1eca <main+0x146>
    1e8c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
    1e90:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <_edata+0x104>
    1e94:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
    1e98:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_edata+0x105>
    1e9c:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
    1ea0:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <_edata+0x1>
    1ea4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <_edata+0x20>
    1ea8:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <_edata+0x106>
    1eac:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <_edata+0x21>
    1eb0:	40 93 07 02 	sts	0x0207, r20	; 0x800207 <_edata+0x107>
    1eb4:	29 2f       	mov	r18, r25
    1eb6:	38 2f       	mov	r19, r24
    1eb8:	20 51       	subi	r18, 0x10	; 16
    1eba:	31 09       	sbc	r19, r1
    1ebc:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <_edata+0x20>
    1ec0:	83 2f       	mov	r24, r19
    1ec2:	8f 70       	andi	r24, 0x0F	; 15
    1ec4:	80 6c       	ori	r24, 0xC0	; 192
    1ec6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_edata+0x21>
    1eca:	f5 e4       	ldi	r31, 0x45	; 69
    1ecc:	6f 12       	cpse	r6, r31
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <main+0x14e>
    1ed0:	ff cf       	rjmp	.-2      	; 0x1ed0 <main+0x14c>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	d7 be       	out	0x37, r13	; 55
    1ed6:	e8 95       	spm
    1ed8:	07 b6       	in	r0, 0x37	; 55
    1eda:	00 fc       	sbrc	r0, 0
    1edc:	fd cf       	rjmp	.-6      	; 0x1ed8 <main+0x154>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	02 96       	adiw	r24, 0x02	; 2
    1ee8:	2d 91       	ld	r18, X+
    1eea:	3c 91       	ld	r19, X
    1eec:	09 01       	movw	r0, r18
    1eee:	c7 be       	out	0x37, r12	; 55
    1ef0:	e8 95       	spm
    1ef2:	11 24       	eor	r1, r1
    1ef4:	32 96       	adiw	r30, 0x02	; 2
    1ef6:	78 12       	cpse	r7, r24
    1ef8:	f5 cf       	rjmp	.-22     	; 0x1ee4 <main+0x160>
    1efa:	fe 01       	movw	r30, r28
    1efc:	97 be       	out	0x37, r9	; 55
    1efe:	e8 95       	spm
    1f00:	07 b6       	in	r0, 0x37	; 55
    1f02:	00 fc       	sbrc	r0, 0
    1f04:	fd cf       	rjmp	.-6      	; 0x1f00 <main+0x17c>
    1f06:	91 cf       	rjmp	.-222    	; 0x1e2a <main+0xa6>
    1f08:	84 37       	cpi	r24, 0x74	; 116
    1f0a:	39 f5       	brne	.+78     	; 0x1f5a <main+0x1d6>
    1f0c:	3c d0       	rcall	.+120    	; 0x1f86 <getch>
    1f0e:	3b d0       	rcall	.+118    	; 0x1f86 <getch>
    1f10:	b8 2e       	mov	r11, r24
    1f12:	39 d0       	rcall	.+114    	; 0x1f86 <getch>
    1f14:	4a d0       	rcall	.+148    	; 0x1faa <verifySpace>
    1f16:	8e 01       	movw	r16, r28
    1f18:	bc 0e       	add	r11, r28
    1f1a:	01 15       	cp	r16, r1
    1f1c:	11 05       	cpc	r17, r1
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <main+0x1ac>
    1f20:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_edata+0x104>
    1f24:	29 d0       	rcall	.+82     	; 0x1f78 <putch>
    1f26:	0f 5f       	subi	r16, 0xFF	; 255
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	b0 12       	cpse	r11, r16
    1f2c:	f6 cf       	rjmp	.-20     	; 0x1f1a <main+0x196>
    1f2e:	7d cf       	rjmp	.-262    	; 0x1e2a <main+0xa6>
    1f30:	01 30       	cpi	r16, 0x01	; 1
    1f32:	11 05       	cpc	r17, r1
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <main+0x1b8>
    1f36:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_edata+0x105>
    1f3a:	f4 cf       	rjmp	.-24     	; 0x1f24 <main+0x1a0>
    1f3c:	00 32       	cpi	r16, 0x20	; 32
    1f3e:	11 05       	cpc	r17, r1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <main+0x1c4>
    1f42:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_edata+0x106>
    1f46:	ee cf       	rjmp	.-36     	; 0x1f24 <main+0x1a0>
    1f48:	01 32       	cpi	r16, 0x21	; 33
    1f4a:	11 05       	cpc	r17, r1
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <main+0x1d0>
    1f4e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_edata+0x107>
    1f52:	e8 cf       	rjmp	.-48     	; 0x1f24 <main+0x1a0>
    1f54:	f8 01       	movw	r30, r16
    1f56:	84 91       	lpm	r24, Z
    1f58:	e5 cf       	rjmp	.-54     	; 0x1f24 <main+0x1a0>
    1f5a:	85 37       	cpi	r24, 0x75	; 117
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <main+0x1e8>
    1f5e:	25 d0       	rcall	.+74     	; 0x1faa <verifySpace>
    1f60:	8e e1       	ldi	r24, 0x1E	; 30
    1f62:	0a d0       	rcall	.+20     	; 0x1f78 <putch>
    1f64:	83 e9       	ldi	r24, 0x93	; 147
    1f66:	08 d0       	rcall	.+16     	; 0x1f78 <putch>
    1f68:	87 e8       	ldi	r24, 0x87	; 135
    1f6a:	5e cf       	rjmp	.-324    	; 0x1e28 <main+0xa4>
    1f6c:	81 35       	cpi	r24, 0x51	; 81
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <main+0x1ee>
    1f70:	70 cf       	rjmp	.-288    	; 0x1e52 <main+0xce>
    1f72:	88 e0       	ldi	r24, 0x08	; 8
    1f74:	14 d0       	rcall	.+40     	; 0x1f9e <watchdogConfig>
    1f76:	6d cf       	rjmp	.-294    	; 0x1e52 <main+0xce>

00001f78 <putch>:
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
#endif
#else //is LIN UART
  while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
    1f78:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    1f7c:	91 ff       	sbrs	r25, 1
    1f7e:	fc cf       	rjmp	.-8      	; 0x1f78 <putch>
  UART_UDR = ch;
    1f80:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f84:	08 95       	ret

00001f86 <getch>:
     * don't care that an invalid char is returned...)
     */
    watchdogReset();
  }
#else
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
    1f86:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    1f8a:	80 ff       	sbrs	r24, 0
    1f8c:	fc cf       	rjmp	.-8      	; 0x1f86 <getch>
  if (!(LINSIR & _BV(LFERR))) {
    1f8e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
    1f92:	84 fd       	sbrc	r24, 4
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f96:	a8 95       	wdr
  ch = UART_UDR;
    1f98:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__EEPROM_REGION_LENGTH__+0x7f00d2>
}
    1f9c:	08 95       	ret

00001f9e <watchdogConfig>:
void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
    1f9e:	e0 e6       	ldi	r30, 0x60	; 96
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	98 e1       	ldi	r25, 0x18	; 24
    1fa4:	90 83       	st	Z, r25
#endif

#ifdef WDTCSR
  WDTCSR = x;
#else
  WDTCR= x;
    1fa6:	80 83       	st	Z, r24
#endif
}
    1fa8:	08 95       	ret

00001faa <verifySpace>:
  if (getch() != CRC_EOP) {
    1faa:	ed df       	rcall	.-38     	; 0x1f86 <getch>
    1fac:	80 32       	cpi	r24, 0x20	; 32
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fb0:	88 e0       	ldi	r24, 0x08	; 8
    1fb2:	f5 df       	rcall	.-22     	; 0x1f9e <watchdogConfig>
    1fb4:	ff cf       	rjmp	.-2      	; 0x1fb4 <verifySpace+0xa>
  putch(STK_INSYNC);
    1fb6:	84 e1       	ldi	r24, 0x14	; 20
    1fb8:	df cf       	rjmp	.-66     	; 0x1f78 <putch>

00001fba <getNch>:
void getNch(uint8_t count) {
    1fba:	cf 93       	push	r28
    1fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fbe:	e3 df       	rcall	.-58     	; 0x1f86 <getch>
    1fc0:	c1 50       	subi	r28, 0x01	; 1
    1fc2:	e9 f7       	brne	.-6      	; 0x1fbe <getNch+0x4>
}
    1fc4:	cf 91       	pop	r28
  verifySpace();
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <verifySpace>

00001fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fc8:	fc 01       	movw	r30, r24
    1fca:	0a 01       	movw	r0, r20
    1fcc:	67 bf       	out	0x37, r22	; 55
    1fce:	e8 95       	spm
    1fd0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fd2:	07 b6       	in	r0, 0x37	; 55
    1fd4:	00 fc       	sbrc	r0, 0
    1fd6:	fd cf       	rjmp	.-6      	; 0x1fd2 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fd8:	08 95       	ret
