
optiboot_attiny841.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fdc  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000de0  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faf  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	23 c1       	rjmp	.+582    	; 0x1fca <do_spm>

00001d84 <main>:
    1d84:	11 24       	eor	r1, r1
    1d86:	84 b7       	in	r24, 0x34	; 52
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
    1d9c:	28 2e       	mov	r2, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	00 d1       	rcall	.+512    	; 0x1fa2 <watchdogConfig>
    1da2:	ee e0       	ldi	r30, 0x0E	; 14
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	8e bd       	out	0x2e, r24	; 46
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
    1db2:	88 e1       	ldi	r24, 0x18	; 24
    1db4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
    1db8:	86 e0       	ldi	r24, 0x06	; 6
    1dba:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
    1dbe:	8b e0       	ldi	r24, 0x0B	; 11
    1dc0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
    1dc4:	8e e0       	ldi	r24, 0x0E	; 14
    1dc6:	ed d0       	rcall	.+474    	; 0x1fa2 <watchdogConfig>
    1dc8:	ba 9a       	sbi	0x17, 2	; 23
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	2d e5       	ldi	r18, 0x5D	; 93
    1dce:	3d ef       	ldi	r19, 0xFD	; 253
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	3d bd       	out	0x2d, r19	; 45
    1dd4:	2c bd       	out	0x2c, r18	; 44
    1dd6:	9e b9       	out	0x0e, r25	; 14
    1dd8:	70 9b       	sbis	0x0e, 0	; 14
    1dda:	fe cf       	rjmp	.-4      	; 0x1dd8 <main+0x54>
    1ddc:	b2 9a       	sbi	0x16, 2	; 22
    1dde:	a8 95       	wdr
    1de0:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
    1de4:	47 fd       	sbrc	r20, 7
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <main+0x68>
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	99 f7       	brne	.-26     	; 0x1dd2 <main+0x4e>
    1dec:	aa 24       	eor	r10, r10
    1dee:	a3 94       	inc	r10
    1df0:	95 e0       	ldi	r25, 0x05	; 5
    1df2:	99 2e       	mov	r9, r25
    1df4:	2f eb       	ldi	r18, 0xBF	; 191
    1df6:	c2 2e       	mov	r12, r18
    1df8:	2e e0       	ldi	r18, 0x0E	; 14
    1dfa:	d2 2e       	mov	r13, r18
    1dfc:	8d 2d       	mov	r24, r13
    1dfe:	80 6c       	ori	r24, 0xC0	; 192
    1e00:	88 2e       	mov	r8, r24
    1e02:	c3 d0       	rcall	.+390    	; 0x1f8a <getch>
    1e04:	81 34       	cpi	r24, 0x41	; 65
    1e06:	71 f4       	brne	.+28     	; 0x1e24 <main+0xa0>
    1e08:	c0 d0       	rcall	.+384    	; 0x1f8a <getch>
    1e0a:	18 2f       	mov	r17, r24
    1e0c:	cf d0       	rcall	.+414    	; 0x1fac <verifySpace>
    1e0e:	12 38       	cpi	r17, 0x82	; 130
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <main+0x92>
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <main+0x9c>
    1e16:	11 38       	cpi	r17, 0x81	; 129
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <main+0x9a>
    1e1a:	88 e0       	ldi	r24, 0x08	; 8
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <main+0x9c>
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	ad d0       	rcall	.+346    	; 0x1f7c <putch>
    1e22:	a9 c0       	rjmp	.+338    	; 0x1f76 <main+0x1f2>
    1e24:	82 34       	cpi	r24, 0x42	; 66
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <main+0xa8>
    1e28:	84 e1       	ldi	r24, 0x14	; 20
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <main+0xae>
    1e2c:	85 34       	cpi	r24, 0x45	; 69
    1e2e:	19 f4       	brne	.+6      	; 0x1e36 <main+0xb2>
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	c4 d0       	rcall	.+392    	; 0x1fbc <getNch>
    1e34:	a0 c0       	rjmp	.+320    	; 0x1f76 <main+0x1f2>
    1e36:	85 35       	cpi	r24, 0x55	; 85
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <main+0xc4>
    1e3a:	a7 d0       	rcall	.+334    	; 0x1f8a <getch>
    1e3c:	c8 2f       	mov	r28, r24
    1e3e:	a5 d0       	rcall	.+330    	; 0x1f8a <getch>
    1e40:	d8 2f       	mov	r29, r24
    1e42:	cc 0f       	add	r28, r28
    1e44:	dd 1f       	adc	r29, r29
    1e46:	96 c0       	rjmp	.+300    	; 0x1f74 <main+0x1f0>
    1e48:	86 35       	cpi	r24, 0x56	; 86
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <main+0xd0>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	b6 d0       	rcall	.+364    	; 0x1fbc <getNch>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	e6 cf       	rjmp	.-52     	; 0x1e20 <main+0x9c>
    1e54:	84 36       	cpi	r24, 0x64	; 100
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <main+0xd6>
    1e58:	57 c0       	rjmp	.+174    	; 0x1f08 <main+0x184>
    1e5a:	97 d0       	rcall	.+302    	; 0x1f8a <getch>
    1e5c:	96 d0       	rcall	.+300    	; 0x1f8a <getch>
    1e5e:	b8 2e       	mov	r11, r24
    1e60:	94 d0       	rcall	.+296    	; 0x1f8a <getch>
    1e62:	78 2e       	mov	r7, r24
    1e64:	00 e0       	ldi	r16, 0x00	; 0
    1e66:	11 e0       	ldi	r17, 0x01	; 1
    1e68:	90 d0       	rcall	.+288    	; 0x1f8a <getch>
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	81 93       	st	Z+, r24
    1e6e:	8f 01       	movw	r16, r30
    1e70:	be 12       	cpse	r11, r30
    1e72:	fa cf       	rjmp	.-12     	; 0x1e68 <main+0xe4>
    1e74:	9b d0       	rcall	.+310    	; 0x1fac <verifySpace>
    1e76:	20 97       	sbiw	r28, 0x00	; 0
    1e78:	69 f4       	brne	.+26     	; 0x1e94 <main+0x110>
    1e7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    1e7e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_edata+0x24>
    1e82:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
    1e86:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_edata+0x25>
    1e8a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
    1e8e:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <_edata+0x1>
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <main+0x142>
    1e94:	c0 31       	cpi	r28, 0x10	; 16
    1e96:	d1 05       	cpc	r29, r1
    1e98:	b1 f4       	brne	.+44     	; 0x1ec6 <main+0x142>
    1e9a:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <_edata+0x24>
    1e9e:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <_edata+0x25>
    1ea2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_edata+0xc>
    1ea6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_edata+0x26>
    1eaa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_edata+0xd>
    1eae:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_edata+0x27>
    1eb2:	fe e0       	ldi	r31, 0x0E	; 14
    1eb4:	ef 1a       	sub	r14, r31
    1eb6:	f1 08       	sbc	r15, r1
    1eb8:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <_edata+0xc>
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	8f 70       	andi	r24, 0x0F	; 15
    1ec0:	80 6c       	ori	r24, 0xC0	; 192
    1ec2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_edata+0xd>
    1ec6:	85 e4       	ldi	r24, 0x45	; 69
    1ec8:	78 12       	cpse	r7, r24
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <main+0x14a>
    1ecc:	ff cf       	rjmp	.-2      	; 0x1ecc <main+0x148>
    1ece:	8c 2f       	mov	r24, r28
    1ed0:	8f 73       	andi	r24, 0x3F	; 63
    1ed2:	39 f4       	brne	.+14     	; 0x1ee2 <main+0x15e>
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	87 bf       	out	0x37, r24	; 55
    1eda:	e8 95       	spm
    1edc:	07 b6       	in	r0, 0x37	; 55
    1ede:	00 fc       	sbrc	r0, 0
    1ee0:	fd cf       	rjmp	.-6      	; 0x1edc <main+0x158>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	a0 e0       	ldi	r26, 0x00	; 0
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9d 91       	ld	r25, X+
    1eec:	0c 01       	movw	r0, r24
    1eee:	a7 be       	out	0x37, r10	; 55
    1ef0:	e8 95       	spm
    1ef2:	11 24       	eor	r1, r1
    1ef4:	32 96       	adiw	r30, 0x02	; 2
    1ef6:	ba 12       	cpse	r11, r26
    1ef8:	f7 cf       	rjmp	.-18     	; 0x1ee8 <main+0x164>
    1efa:	fe 01       	movw	r30, r28
    1efc:	97 be       	out	0x37, r9	; 55
    1efe:	e8 95       	spm
    1f00:	07 b6       	in	r0, 0x37	; 55
    1f02:	00 fc       	sbrc	r0, 0
    1f04:	fd cf       	rjmp	.-6      	; 0x1f00 <main+0x17c>
    1f06:	37 c0       	rjmp	.+110    	; 0x1f76 <main+0x1f2>
    1f08:	84 37       	cpi	r24, 0x74	; 116
    1f0a:	39 f5       	brne	.+78     	; 0x1f5a <main+0x1d6>
    1f0c:	3e d0       	rcall	.+124    	; 0x1f8a <getch>
    1f0e:	3d d0       	rcall	.+122    	; 0x1f8a <getch>
    1f10:	b8 2e       	mov	r11, r24
    1f12:	3b d0       	rcall	.+118    	; 0x1f8a <getch>
    1f14:	4b d0       	rcall	.+150    	; 0x1fac <verifySpace>
    1f16:	8e 01       	movw	r16, r28
    1f18:	01 15       	cp	r16, r1
    1f1a:	11 05       	cpc	r17, r1
    1f1c:	19 f4       	brne	.+6      	; 0x1f24 <main+0x1a0>
    1f1e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_edata+0x24>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <main+0x1c8>
    1f24:	01 30       	cpi	r16, 0x01	; 1
    1f26:	11 05       	cpc	r17, r1
    1f28:	19 f4       	brne	.+6      	; 0x1f30 <main+0x1ac>
    1f2a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_edata+0x25>
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <main+0x1c8>
    1f30:	0c 31       	cpi	r16, 0x1C	; 28
    1f32:	11 05       	cpc	r17, r1
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <main+0x1b8>
    1f36:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_edata+0x26>
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <main+0x1c8>
    1f3c:	0d 31       	cpi	r16, 0x1D	; 29
    1f3e:	11 05       	cpc	r17, r1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <main+0x1c4>
    1f42:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_edata+0x27>
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <main+0x1c8>
    1f48:	f8 01       	movw	r30, r16
    1f4a:	84 91       	lpm	r24, Z
    1f4c:	17 d0       	rcall	.+46     	; 0x1f7c <putch>
    1f4e:	ba 94       	dec	r11
    1f50:	0f 5f       	subi	r16, 0xFF	; 255
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	b1 10       	cpse	r11, r1
    1f56:	e0 cf       	rjmp	.-64     	; 0x1f18 <main+0x194>
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <main+0x1f2>
    1f5a:	85 37       	cpi	r24, 0x75	; 117
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <main+0x1e8>
    1f5e:	26 d0       	rcall	.+76     	; 0x1fac <verifySpace>
    1f60:	8e e1       	ldi	r24, 0x1E	; 30
    1f62:	0c d0       	rcall	.+24     	; 0x1f7c <putch>
    1f64:	83 e9       	ldi	r24, 0x93	; 147
    1f66:	0a d0       	rcall	.+20     	; 0x1f7c <putch>
    1f68:	85 e1       	ldi	r24, 0x15	; 21
    1f6a:	5a cf       	rjmp	.-332    	; 0x1e20 <main+0x9c>
    1f6c:	81 35       	cpi	r24, 0x51	; 81
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <main+0x1f0>
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	17 d0       	rcall	.+46     	; 0x1fa2 <watchdogConfig>
    1f74:	1b d0       	rcall	.+54     	; 0x1fac <verifySpace>
    1f76:	80 e1       	ldi	r24, 0x10	; 16
    1f78:	01 d0       	rcall	.+2      	; 0x1f7c <putch>
    1f7a:	43 cf       	rjmp	.-378    	; 0x1e02 <main+0x7e>

00001f7c <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f7c:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
    1f80:	95 ff       	sbrs	r25, 5
    1f82:	fc cf       	rjmp	.-8      	; 0x1f7c <putch>
  UART_UDR = ch;
    1f84:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    1f88:	08 95       	ret

00001f8a <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f8a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
    1f8e:	87 ff       	sbrs	r24, 7
    1f90:	fc cf       	rjmp	.-8      	; 0x1f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f92:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
    1f96:	84 fd       	sbrc	r24, 4
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f9a:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1fa0:	08 95       	ret

00001fa2 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    1fa2:	98 ed       	ldi	r25, 0xD8	; 216
    1fa4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1fa8:	81 bd       	out	0x21, r24	; 33
    1faa:	08 95       	ret

00001fac <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fac:	ee df       	rcall	.-36     	; 0x1f8a <getch>
    1fae:	80 32       	cpi	r24, 0x20	; 32
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fb2:	88 e0       	ldi	r24, 0x08	; 8
    1fb4:	f6 df       	rcall	.-20     	; 0x1fa2 <watchdogConfig>
    1fb6:	ff cf       	rjmp	.-2      	; 0x1fb6 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fb8:	84 e1       	ldi	r24, 0x14	; 20
    1fba:	e0 cf       	rjmp	.-64     	; 0x1f7c <putch>

00001fbc <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1fbc:	cf 93       	push	r28
    1fbe:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fc0:	e4 df       	rcall	.-56     	; 0x1f8a <getch>
    1fc2:	c1 50       	subi	r28, 0x01	; 1
    1fc4:	e9 f7       	brne	.-6      	; 0x1fc0 <getNch+0x4>
  verifySpace();
}
    1fc6:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fc8:	f1 cf       	rjmp	.-30     	; 0x1fac <verifySpace>

00001fca <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fca:	fc 01       	movw	r30, r24
    1fcc:	0a 01       	movw	r0, r20
    1fce:	67 bf       	out	0x37, r22	; 55
    1fd0:	e8 95       	spm
    1fd2:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fd4:	07 b6       	in	r0, 0x37	; 55
    1fd6:	00 fc       	sbrc	r0, 0
    1fd8:	fd cf       	rjmp	.-6      	; 0x1fd4 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fda:	08 95       	ret
