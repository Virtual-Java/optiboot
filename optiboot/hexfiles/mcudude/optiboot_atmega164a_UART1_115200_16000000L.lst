
optiboot_atmega164a_UART1_115200_16000000L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         000008dc  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000363  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00000ec3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <main>
    3e02:	e4 c0       	rjmp	.+456    	; 0x3fcc <do_spm>

00003e04 <main>:
    3e04:	11 24       	eor	r1, r1
    3e06:	84 b7       	in	r24, 0x34	; 52
    3e08:	88 23       	and	r24, r24
    3e0a:	61 f0       	breq	.+24     	; 0x3e24 <main+0x20>
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	9a 70       	andi	r25, 0x0A	; 10
    3e10:	92 30       	cpi	r25, 0x02	; 2
    3e12:	41 f0       	breq	.+16     	; 0x3e24 <main+0x20>
    3e14:	81 ff       	sbrs	r24, 1
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <main+0x18>
    3e18:	97 ef       	ldi	r25, 0xF7	; 247
    3e1a:	94 bf       	out	0x34, r25	; 52
    3e1c:	28 2e       	mov	r2, r24
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	c0 d0       	rcall	.+384    	; 0x3fa2 <watchdogConfig>
    3e22:	ee c0       	rjmp	.+476    	; 0x4000 <optiboot_version+0x2>
    3e24:	85 e0       	ldi	r24, 0x05	; 5
    3e26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    3e30:	88 e1       	ldi	r24, 0x18	; 24
    3e32:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    3e36:	86 e0       	ldi	r24, 0x06	; 6
    3e38:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    3e3c:	80 e1       	ldi	r24, 0x10	; 16
    3e3e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    3e42:	8e e0       	ldi	r24, 0x0E	; 14
    3e44:	ae d0       	rcall	.+348    	; 0x3fa2 <watchdogConfig>
    3e46:	20 9a       	sbi	0x04, 0	; 4
    3e48:	84 e0       	ldi	r24, 0x04	; 4
    3e4a:	20 e3       	ldi	r18, 0x30	; 48
    3e4c:	3c ef       	ldi	r19, 0xFC	; 252
    3e4e:	91 e0       	ldi	r25, 0x01	; 1
    3e50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3e54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3e58:	96 bb       	out	0x16, r25	; 22
    3e5a:	b0 9b       	sbis	0x16, 0	; 22
    3e5c:	fe cf       	rjmp	.-4      	; 0x3e5a <main+0x56>
    3e5e:	18 9a       	sbi	0x03, 0	; 3
    3e60:	a8 95       	wdr
    3e62:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    3e66:	47 fd       	sbrc	r20, 7
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <main+0x6a>
    3e6a:	81 50       	subi	r24, 0x01	; 1
    3e6c:	89 f7       	brne	.-30     	; 0x3e50 <main+0x4c>
    3e6e:	23 e0       	ldi	r18, 0x03	; 3
    3e70:	e2 2e       	mov	r14, r18
    3e72:	dd 24       	eor	r13, r13
    3e74:	d3 94       	inc	r13
    3e76:	35 e0       	ldi	r19, 0x05	; 5
    3e78:	c3 2e       	mov	r12, r19
    3e7a:	41 e1       	ldi	r20, 0x11	; 17
    3e7c:	b4 2e       	mov	r11, r20
    3e7e:	85 d0       	rcall	.+266    	; 0x3f8a <getch>
    3e80:	81 34       	cpi	r24, 0x41	; 65
    3e82:	71 f4       	brne	.+28     	; 0x3ea0 <main+0x9c>
    3e84:	82 d0       	rcall	.+260    	; 0x3f8a <getch>
    3e86:	18 2f       	mov	r17, r24
    3e88:	92 d0       	rcall	.+292    	; 0x3fae <verifySpace>
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	12 38       	cpi	r17, 0x82	; 130
    3e8e:	21 f0       	breq	.+8      	; 0x3e98 <main+0x94>
    3e90:	88 e0       	ldi	r24, 0x08	; 8
    3e92:	11 38       	cpi	r17, 0x81	; 129
    3e94:	09 f0       	breq	.+2      	; 0x3e98 <main+0x94>
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	71 d0       	rcall	.+226    	; 0x3f7c <putch>
    3e9a:	80 e1       	ldi	r24, 0x10	; 16
    3e9c:	6f d0       	rcall	.+222    	; 0x3f7c <putch>
    3e9e:	ef cf       	rjmp	.-34     	; 0x3e7e <main+0x7a>
    3ea0:	82 34       	cpi	r24, 0x42	; 66
    3ea2:	19 f4       	brne	.+6      	; 0x3eaa <main+0xa6>
    3ea4:	84 e1       	ldi	r24, 0x14	; 20
    3ea6:	8b d0       	rcall	.+278    	; 0x3fbe <getNch>
    3ea8:	f8 cf       	rjmp	.-16     	; 0x3e9a <main+0x96>
    3eaa:	85 34       	cpi	r24, 0x45	; 69
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <main+0xae>
    3eae:	85 e0       	ldi	r24, 0x05	; 5
    3eb0:	fa cf       	rjmp	.-12     	; 0x3ea6 <main+0xa2>
    3eb2:	85 35       	cpi	r24, 0x55	; 85
    3eb4:	41 f4       	brne	.+16     	; 0x3ec6 <main+0xc2>
    3eb6:	69 d0       	rcall	.+210    	; 0x3f8a <getch>
    3eb8:	c8 2f       	mov	r28, r24
    3eba:	67 d0       	rcall	.+206    	; 0x3f8a <getch>
    3ebc:	d8 2f       	mov	r29, r24
    3ebe:	cc 0f       	add	r28, r28
    3ec0:	dd 1f       	adc	r29, r29
    3ec2:	75 d0       	rcall	.+234    	; 0x3fae <verifySpace>
    3ec4:	ea cf       	rjmp	.-44     	; 0x3e9a <main+0x96>
    3ec6:	86 35       	cpi	r24, 0x56	; 86
    3ec8:	21 f4       	brne	.+8      	; 0x3ed2 <main+0xce>
    3eca:	84 e0       	ldi	r24, 0x04	; 4
    3ecc:	78 d0       	rcall	.+240    	; 0x3fbe <getNch>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	e3 cf       	rjmp	.-58     	; 0x3e98 <main+0x94>
    3ed2:	84 36       	cpi	r24, 0x64	; 100
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <main+0xd4>
    3ed6:	33 c0       	rjmp	.+102    	; 0x3f3e <main+0x13a>
    3ed8:	58 d0       	rcall	.+176    	; 0x3f8a <getch>
    3eda:	57 d0       	rcall	.+174    	; 0x3f8a <getch>
    3edc:	18 2f       	mov	r17, r24
    3ede:	55 d0       	rcall	.+170    	; 0x3f8a <getch>
    3ee0:	08 2f       	mov	r16, r24
    3ee2:	61 2c       	mov	r6, r1
    3ee4:	77 24       	eor	r7, r7
    3ee6:	73 94       	inc	r7
    3ee8:	43 01       	movw	r8, r6
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	68 1a       	sub	r6, r24
    3eee:	78 0a       	sbc	r7, r24
    3ef0:	4c d0       	rcall	.+152    	; 0x3f8a <getch>
    3ef2:	f4 01       	movw	r30, r8
    3ef4:	80 83       	st	Z, r24
    3ef6:	16 11       	cpse	r17, r6
    3ef8:	f7 cf       	rjmp	.-18     	; 0x3ee8 <main+0xe4>
    3efa:	59 d0       	rcall	.+178    	; 0x3fae <verifySpace>
    3efc:	05 34       	cpi	r16, 0x45	; 69
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <main+0xfe>
    3f00:	ff cf       	rjmp	.-2      	; 0x3f00 <main+0xfc>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e7 be       	out	0x37, r14	; 55
    3f06:	e8 95       	spm
    3f08:	07 b6       	in	r0, 0x37	; 55
    3f0a:	00 fc       	sbrc	r0, 0
    3f0c:	fd cf       	rjmp	.-6      	; 0x3f08 <main+0x104>
    3f0e:	fe 01       	movw	r30, r28
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	31 e0       	ldi	r19, 0x01	; 1
    3f14:	d9 01       	movw	r26, r18
    3f16:	2e 5f       	subi	r18, 0xFE	; 254
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	8d 91       	ld	r24, X+
    3f1c:	9c 91       	ld	r25, X
    3f1e:	0c 01       	movw	r0, r24
    3f20:	d7 be       	out	0x37, r13	; 55
    3f22:	e8 95       	spm
    3f24:	11 24       	eor	r1, r1
    3f26:	32 96       	adiw	r30, 0x02	; 2
    3f28:	12 13       	cpse	r17, r18
    3f2a:	f4 cf       	rjmp	.-24     	; 0x3f14 <main+0x110>
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	c7 be       	out	0x37, r12	; 55
    3f30:	e8 95       	spm
    3f32:	07 b6       	in	r0, 0x37	; 55
    3f34:	00 fc       	sbrc	r0, 0
    3f36:	fd cf       	rjmp	.-6      	; 0x3f32 <main+0x12e>
    3f38:	b7 be       	out	0x37, r11	; 55
    3f3a:	e8 95       	spm
    3f3c:	ae cf       	rjmp	.-164    	; 0x3e9a <main+0x96>
    3f3e:	84 37       	cpi	r24, 0x74	; 116
    3f40:	71 f4       	brne	.+28     	; 0x3f5e <main+0x15a>
    3f42:	23 d0       	rcall	.+70     	; 0x3f8a <getch>
    3f44:	22 d0       	rcall	.+68     	; 0x3f8a <getch>
    3f46:	f8 2e       	mov	r15, r24
    3f48:	20 d0       	rcall	.+64     	; 0x3f8a <getch>
    3f4a:	31 d0       	rcall	.+98     	; 0x3fae <verifySpace>
    3f4c:	8e 01       	movw	r16, r28
    3f4e:	f8 01       	movw	r30, r16
    3f50:	85 91       	lpm	r24, Z+
    3f52:	8f 01       	movw	r16, r30
    3f54:	13 d0       	rcall	.+38     	; 0x3f7c <putch>
    3f56:	fa 94       	dec	r15
    3f58:	f1 10       	cpse	r15, r1
    3f5a:	f9 cf       	rjmp	.-14     	; 0x3f4e <main+0x14a>
    3f5c:	9e cf       	rjmp	.-196    	; 0x3e9a <main+0x96>
    3f5e:	85 37       	cpi	r24, 0x75	; 117
    3f60:	39 f4       	brne	.+14     	; 0x3f70 <main+0x16c>
    3f62:	25 d0       	rcall	.+74     	; 0x3fae <verifySpace>
    3f64:	8e e1       	ldi	r24, 0x1E	; 30
    3f66:	0a d0       	rcall	.+20     	; 0x3f7c <putch>
    3f68:	84 e9       	ldi	r24, 0x94	; 148
    3f6a:	08 d0       	rcall	.+16     	; 0x3f7c <putch>
    3f6c:	8a e0       	ldi	r24, 0x0A	; 10
    3f6e:	94 cf       	rjmp	.-216    	; 0x3e98 <main+0x94>
    3f70:	81 35       	cpi	r24, 0x51	; 81
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <main+0x172>
    3f74:	a6 cf       	rjmp	.-180    	; 0x3ec2 <main+0xbe>
    3f76:	88 e0       	ldi	r24, 0x08	; 8
    3f78:	14 d0       	rcall	.+40     	; 0x3fa2 <watchdogConfig>
    3f7a:	a3 cf       	rjmp	.-186    	; 0x3ec2 <main+0xbe>

00003f7c <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f7c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    3f80:	95 ff       	sbrs	r25, 5
    3f82:	fc cf       	rjmp	.-8      	; 0x3f7c <putch>
  UART_UDR = ch;
    3f84:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    3f88:	08 95       	ret

00003f8a <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f8a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    3f8e:	87 ff       	sbrs	r24, 7
    3f90:	fc cf       	rjmp	.-8      	; 0x3f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f92:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    3f96:	84 fd       	sbrc	r24, 4
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f9a:	a8 95       	wdr
  ch = UART_UDR;
    3f9c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}
    3fa0:	08 95       	ret

00003fa2 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fa2:	e0 e6       	ldi	r30, 0x60	; 96
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	98 e1       	ldi	r25, 0x18	; 24
    3fa8:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3faa:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
    3fac:	08 95       	ret

00003fae <verifySpace>:
  if (getch() != CRC_EOP) {
    3fae:	ed df       	rcall	.-38     	; 0x3f8a <getch>
    3fb0:	80 32       	cpi	r24, 0x20	; 32
    3fb2:	19 f0       	breq	.+6      	; 0x3fba <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fb4:	88 e0       	ldi	r24, 0x08	; 8
    3fb6:	f5 df       	rcall	.-22     	; 0x3fa2 <watchdogConfig>
    3fb8:	ff cf       	rjmp	.-2      	; 0x3fb8 <verifySpace+0xa>
  putch(STK_INSYNC);
    3fba:	84 e1       	ldi	r24, 0x14	; 20
    3fbc:	df cf       	rjmp	.-66     	; 0x3f7c <putch>

00003fbe <getNch>:
void getNch(uint8_t count) {
    3fbe:	cf 93       	push	r28
    3fc0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fc2:	e3 df       	rcall	.-58     	; 0x3f8a <getch>
    3fc4:	c1 50       	subi	r28, 0x01	; 1
    3fc6:	e9 f7       	brne	.-6      	; 0x3fc2 <getNch+0x4>
}
    3fc8:	cf 91       	pop	r28
  verifySpace();
    3fca:	f1 cf       	rjmp	.-30     	; 0x3fae <verifySpace>

00003fcc <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    3fcc:	fc 01       	movw	r30, r24
    3fce:	0a 01       	movw	r0, r20
    3fd0:	67 bf       	out	0x37, r22	; 55
    3fd2:	e8 95       	spm
    3fd4:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    3fd6:	07 b6       	in	r0, 0x37	; 55
    3fd8:	00 fc       	sbrc	r0, 0
    3fda:	fd cf       	rjmp	.-6      	; 0x3fd6 <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    3fdc:	66 70       	andi	r22, 0x06	; 6
    3fde:	29 f0       	breq	.+10     	; 0x3fea <do_spm+0x1e>
    3fe0:	45 2b       	or	r20, r21
    3fe2:	19 f4       	brne	.+6      	; 0x3fea <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    3fe4:	81 e1       	ldi	r24, 0x11	; 17
    3fe6:	87 bf       	out	0x37, r24	; 55
    3fe8:	e8 95       	spm
  }
#endif
}
    3fea:	08 95       	ret
