
optiboot_atmega16_UART0_57600_12000000L.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  00000264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00003fd0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000d2c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8d  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001f21  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <main>
    3e02:	d6 c0       	rjmp	.+428    	; 0x3fb0 <do_spm>

00003e04 <main>:
    3e04:	11 24       	eor	r1, r1
    3e06:	8f e5       	ldi	r24, 0x5F	; 95
    3e08:	94 e0       	ldi	r25, 0x04	; 4
    3e0a:	9e bf       	out	0x3e, r25	; 62
    3e0c:	8d bf       	out	0x3d, r24	; 61
    3e0e:	84 b7       	in	r24, 0x34	; 52
    3e10:	88 23       	and	r24, r24
    3e12:	61 f0       	breq	.+24     	; 0x3e2c <main+0x28>
    3e14:	98 2f       	mov	r25, r24
    3e16:	9a 70       	andi	r25, 0x0A	; 10
    3e18:	92 30       	cpi	r25, 0x02	; 2
    3e1a:	41 f0       	breq	.+16     	; 0x3e2c <main+0x28>
    3e1c:	81 ff       	sbrs	r24, 1
    3e1e:	02 c0       	rjmp	.+4      	; 0x3e24 <main+0x20>
    3e20:	97 ef       	ldi	r25, 0xF7	; 247
    3e22:	94 bf       	out	0x34, r25	; 52
    3e24:	28 2e       	mov	r2, r24
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	b0 d0       	rcall	.+352    	; 0x3f8a <watchdogConfig>
    3e2a:	ea c0       	rjmp	.+468    	; 0x4000 <optiboot_version+0x2>
    3e2c:	85 e0       	ldi	r24, 0x05	; 5
    3e2e:	8e bd       	out	0x2e, r24	; 46
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	8b b9       	out	0x0b, r24	; 11
    3e34:	88 e1       	ldi	r24, 0x18	; 24
    3e36:	8a b9       	out	0x0a, r24	; 10
    3e38:	86 e8       	ldi	r24, 0x86	; 134
    3e3a:	80 bd       	out	0x20, r24	; 32
    3e3c:	89 e1       	ldi	r24, 0x19	; 25
    3e3e:	89 b9       	out	0x09, r24	; 9
    3e40:	8e e0       	ldi	r24, 0x0E	; 14
    3e42:	a3 d0       	rcall	.+326    	; 0x3f8a <watchdogConfig>
    3e44:	b8 9a       	sbi	0x17, 0	; 23
    3e46:	84 e0       	ldi	r24, 0x04	; 4
    3e48:	24 e2       	ldi	r18, 0x24	; 36
    3e4a:	3d ef       	ldi	r19, 0xFD	; 253
    3e4c:	44 e0       	ldi	r20, 0x04	; 4
    3e4e:	51 e0       	ldi	r21, 0x01	; 1
    3e50:	3d bd       	out	0x2d, r19	; 45
    3e52:	2c bd       	out	0x2c, r18	; 44
    3e54:	48 bf       	out	0x38, r20	; 56
    3e56:	08 b6       	in	r0, 0x38	; 56
    3e58:	02 fe       	sbrs	r0, 2
    3e5a:	fd cf       	rjmp	.-6      	; 0x3e56 <main+0x52>
    3e5c:	98 b3       	in	r25, 0x18	; 24
    3e5e:	95 27       	eor	r25, r21
    3e60:	98 bb       	out	0x18, r25	; 24
    3e62:	a8 95       	wdr
    3e64:	5f 99       	sbic	0x0b, 7	; 11
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <main+0x68>
    3e68:	81 50       	subi	r24, 0x01	; 1
    3e6a:	91 f7       	brne	.-28     	; 0x3e50 <main+0x4c>
    3e6c:	ee 24       	eor	r14, r14
    3e6e:	e3 94       	inc	r14
    3e70:	25 e0       	ldi	r18, 0x05	; 5
    3e72:	d2 2e       	mov	r13, r18
    3e74:	31 e1       	ldi	r19, 0x11	; 17
    3e76:	c3 2e       	mov	r12, r19
    3e78:	81 d0       	rcall	.+258    	; 0x3f7c <getch>
    3e7a:	81 34       	cpi	r24, 0x41	; 65
    3e7c:	b1 f4       	brne	.+44     	; 0x3eaa <main+0xa6>
    3e7e:	7e d0       	rcall	.+252    	; 0x3f7c <getch>
    3e80:	18 2f       	mov	r17, r24
    3e82:	87 d0       	rcall	.+270    	; 0x3f92 <verifySpace>
    3e84:	12 38       	cpi	r17, 0x82	; 130
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <main+0x88>
    3e88:	82 e0       	ldi	r24, 0x02	; 2
    3e8a:	0d c0       	rjmp	.+26     	; 0x3ea6 <main+0xa2>
    3e8c:	11 38       	cpi	r17, 0x81	; 129
    3e8e:	51 f4       	brne	.+20     	; 0x3ea4 <main+0xa0>
    3e90:	88 e0       	ldi	r24, 0x08	; 8
    3e92:	09 c0       	rjmp	.+18     	; 0x3ea6 <main+0xa2>
    3e94:	85 37       	cpi	r24, 0x75	; 117
    3e96:	09 f0       	breq	.+2      	; 0x3e9a <main+0x96>
    3e98:	65 c0       	rjmp	.+202    	; 0x3f64 <main+0x160>
    3e9a:	7b d0       	rcall	.+246    	; 0x3f92 <verifySpace>
    3e9c:	8e e1       	ldi	r24, 0x1E	; 30
    3e9e:	6a d0       	rcall	.+212    	; 0x3f74 <putch>
    3ea0:	84 e9       	ldi	r24, 0x94	; 148
    3ea2:	68 d0       	rcall	.+208    	; 0x3f74 <putch>
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	66 d0       	rcall	.+204    	; 0x3f74 <putch>
    3ea8:	62 c0       	rjmp	.+196    	; 0x3f6e <main+0x16a>
    3eaa:	82 34       	cpi	r24, 0x42	; 66
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <main+0xae>
    3eae:	84 e1       	ldi	r24, 0x14	; 20
    3eb0:	03 c0       	rjmp	.+6      	; 0x3eb8 <main+0xb4>
    3eb2:	85 34       	cpi	r24, 0x45	; 69
    3eb4:	19 f4       	brne	.+6      	; 0x3ebc <main+0xb8>
    3eb6:	85 e0       	ldi	r24, 0x05	; 5
    3eb8:	74 d0       	rcall	.+232    	; 0x3fa2 <getNch>
    3eba:	59 c0       	rjmp	.+178    	; 0x3f6e <main+0x16a>
    3ebc:	85 35       	cpi	r24, 0x55	; 85
    3ebe:	39 f4       	brne	.+14     	; 0x3ece <main+0xca>
    3ec0:	5d d0       	rcall	.+186    	; 0x3f7c <getch>
    3ec2:	c8 2f       	mov	r28, r24
    3ec4:	5b d0       	rcall	.+182    	; 0x3f7c <getch>
    3ec6:	d8 2f       	mov	r29, r24
    3ec8:	cc 0f       	add	r28, r28
    3eca:	dd 1f       	adc	r29, r29
    3ecc:	4f c0       	rjmp	.+158    	; 0x3f6c <main+0x168>
    3ece:	86 35       	cpi	r24, 0x56	; 86
    3ed0:	21 f4       	brne	.+8      	; 0x3eda <main+0xd6>
    3ed2:	84 e0       	ldi	r24, 0x04	; 4
    3ed4:	66 d0       	rcall	.+204    	; 0x3fa2 <getNch>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	e6 cf       	rjmp	.-52     	; 0x3ea6 <main+0xa2>
    3eda:	84 36       	cpi	r24, 0x64	; 100
    3edc:	09 f0       	breq	.+2      	; 0x3ee0 <main+0xdc>
    3ede:	31 c0       	rjmp	.+98     	; 0x3f42 <main+0x13e>
    3ee0:	4d d0       	rcall	.+154    	; 0x3f7c <getch>
    3ee2:	4c d0       	rcall	.+152    	; 0x3f7c <getch>
    3ee4:	18 2f       	mov	r17, r24
    3ee6:	4a d0       	rcall	.+148    	; 0x3f7c <getch>
    3ee8:	f8 2e       	mov	r15, r24
    3eea:	01 2f       	mov	r16, r17
    3eec:	80 e6       	ldi	r24, 0x60	; 96
    3eee:	a8 2e       	mov	r10, r24
    3ef0:	b1 2c       	mov	r11, r1
    3ef2:	44 d0       	rcall	.+136    	; 0x3f7c <getch>
    3ef4:	f5 01       	movw	r30, r10
    3ef6:	81 93       	st	Z+, r24
    3ef8:	5f 01       	movw	r10, r30
    3efa:	01 50       	subi	r16, 0x01	; 1
    3efc:	d1 f7       	brne	.-12     	; 0x3ef2 <main+0xee>
    3efe:	49 d0       	rcall	.+146    	; 0x3f92 <verifySpace>
    3f00:	f5 e4       	ldi	r31, 0x45	; 69
    3f02:	ff 12       	cpse	r15, r31
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <main+0x104>
    3f06:	ff cf       	rjmp	.-2      	; 0x3f06 <main+0x102>
    3f08:	83 e0       	ldi	r24, 0x03	; 3
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	87 bf       	out	0x37, r24	; 55
    3f0e:	e8 95       	spm
    3f10:	07 b6       	in	r0, 0x37	; 55
    3f12:	00 fc       	sbrc	r0, 0
    3f14:	fd cf       	rjmp	.-6      	; 0x3f10 <main+0x10c>
    3f16:	a0 e6       	ldi	r26, 0x60	; 96
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	8d 91       	ld	r24, X+
    3f1e:	9d 91       	ld	r25, X+
    3f20:	0c 01       	movw	r0, r24
    3f22:	e7 be       	out	0x37, r14	; 55
    3f24:	e8 95       	spm
    3f26:	11 24       	eor	r1, r1
    3f28:	12 50       	subi	r17, 0x02	; 2
    3f2a:	32 96       	adiw	r30, 0x02	; 2
    3f2c:	11 11       	cpse	r17, r1
    3f2e:	f6 cf       	rjmp	.-20     	; 0x3f1c <main+0x118>
    3f30:	fe 01       	movw	r30, r28
    3f32:	d7 be       	out	0x37, r13	; 55
    3f34:	e8 95       	spm
    3f36:	07 b6       	in	r0, 0x37	; 55
    3f38:	00 fc       	sbrc	r0, 0
    3f3a:	fd cf       	rjmp	.-6      	; 0x3f36 <main+0x132>
    3f3c:	c7 be       	out	0x37, r12	; 55
    3f3e:	e8 95       	spm
    3f40:	16 c0       	rjmp	.+44     	; 0x3f6e <main+0x16a>
    3f42:	84 37       	cpi	r24, 0x74	; 116
    3f44:	09 f0       	breq	.+2      	; 0x3f48 <main+0x144>
    3f46:	a6 cf       	rjmp	.-180    	; 0x3e94 <main+0x90>
    3f48:	19 d0       	rcall	.+50     	; 0x3f7c <getch>
    3f4a:	18 d0       	rcall	.+48     	; 0x3f7c <getch>
    3f4c:	f8 2e       	mov	r15, r24
    3f4e:	16 d0       	rcall	.+44     	; 0x3f7c <getch>
    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <verifySpace>
    3f52:	8e 01       	movw	r16, r28
    3f54:	f8 01       	movw	r30, r16
    3f56:	85 91       	lpm	r24, Z+
    3f58:	8f 01       	movw	r16, r30
    3f5a:	0c d0       	rcall	.+24     	; 0x3f74 <putch>
    3f5c:	fa 94       	dec	r15
    3f5e:	f1 10       	cpse	r15, r1
    3f60:	f9 cf       	rjmp	.-14     	; 0x3f54 <main+0x150>
    3f62:	05 c0       	rjmp	.+10     	; 0x3f6e <main+0x16a>
    3f64:	81 35       	cpi	r24, 0x51	; 81
    3f66:	11 f4       	brne	.+4      	; 0x3f6c <main+0x168>
    3f68:	88 e0       	ldi	r24, 0x08	; 8
    3f6a:	0f d0       	rcall	.+30     	; 0x3f8a <watchdogConfig>
    3f6c:	12 d0       	rcall	.+36     	; 0x3f92 <verifySpace>
    3f6e:	80 e1       	ldi	r24, 0x10	; 16
    3f70:	01 d0       	rcall	.+2      	; 0x3f74 <putch>
    3f72:	82 cf       	rjmp	.-252    	; 0x3e78 <main+0x74>

00003f74 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f74:	5d 9b       	sbis	0x0b, 5	; 11
    3f76:	fe cf       	rjmp	.-4      	; 0x3f74 <putch>
  UART_UDR = ch;
    3f78:	8c b9       	out	0x0c, r24	; 12
    3f7a:	08 95       	ret

00003f7c <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f7c:	5f 9b       	sbis	0x0b, 7	; 11
    3f7e:	fe cf       	rjmp	.-4      	; 0x3f7c <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f80:	5c 99       	sbic	0x0b, 4	; 11
    3f82:	01 c0       	rjmp	.+2      	; 0x3f86 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f84:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    3f86:	8c b1       	in	r24, 0x0c	; 12
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    3f88:	08 95       	ret

00003f8a <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f8a:	98 e1       	ldi	r25, 0x18	; 24
    3f8c:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3f8e:	81 bd       	out	0x21, r24	; 33
    3f90:	08 95       	ret

00003f92 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3f92:	f4 df       	rcall	.-24     	; 0x3f7c <getch>
    3f94:	80 32       	cpi	r24, 0x20	; 32
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3f98:	88 e0       	ldi	r24, 0x08	; 8
    3f9a:	f7 df       	rcall	.-18     	; 0x3f8a <watchdogConfig>
    3f9c:	ff cf       	rjmp	.-2      	; 0x3f9c <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    3f9e:	84 e1       	ldi	r24, 0x14	; 20
    3fa0:	e9 cf       	rjmp	.-46     	; 0x3f74 <putch>

00003fa2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    3fa2:	cf 93       	push	r28
    3fa4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fa6:	ea df       	rcall	.-44     	; 0x3f7c <getch>
    3fa8:	c1 50       	subi	r28, 0x01	; 1
    3faa:	e9 f7       	brne	.-6      	; 0x3fa6 <getNch+0x4>
  verifySpace();
}
    3fac:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3fae:	f1 cf       	rjmp	.-30     	; 0x3f92 <verifySpace>

00003fb0 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	0a 01       	movw	r0, r20
    3fb4:	67 bf       	out	0x37, r22	; 55
    3fb6:	e8 95       	spm
    3fb8:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    3fba:	07 b6       	in	r0, 0x37	; 55
    3fbc:	00 fc       	sbrc	r0, 0
    3fbe:	fd cf       	rjmp	.-6      	; 0x3fba <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    3fc0:	66 70       	andi	r22, 0x06	; 6
    3fc2:	29 f0       	breq	.+10     	; 0x3fce <do_spm+0x1e>
    3fc4:	45 2b       	or	r20, r21
    3fc6:	19 f4       	brne	.+6      	; 0x3fce <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    3fc8:	81 e1       	ldi	r24, 0x11	; 17
    3fca:	87 bf       	out	0x37, r24	; 55
    3fcc:	e8 95       	spm
    3fce:	08 95       	ret
