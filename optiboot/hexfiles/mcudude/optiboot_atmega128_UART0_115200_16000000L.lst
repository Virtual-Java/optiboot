
optiboot_atmega128_UART0_115200_16000000L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001ff0a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000a20  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000048b  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	18 c1       	rjmp	.+560    	; 0x1fe34 <do_spm>

0001fc04 <main>:
   1fc04:	11 24       	eor	r1, r1
   1fc06:	8f ef       	ldi	r24, 0xFF	; 255
   1fc08:	90 e1       	ldi	r25, 0x10	; 16
   1fc0a:	9e bf       	out	0x3e, r25	; 62
   1fc0c:	8d bf       	out	0x3d, r24	; 61
   1fc0e:	84 b7       	in	r24, 0x34	; 52
   1fc10:	88 23       	and	r24, r24
   1fc12:	69 f0       	breq	.+26     	; 0x1fc2e <main+0x2a>
   1fc14:	98 2f       	mov	r25, r24
   1fc16:	9a 70       	andi	r25, 0x0A	; 10
   1fc18:	92 30       	cpi	r25, 0x02	; 2
   1fc1a:	49 f0       	breq	.+18     	; 0x1fc2e <main+0x2a>
   1fc1c:	81 ff       	sbrs	r24, 1
   1fc1e:	02 c0       	rjmp	.+4      	; 0x1fc24 <main+0x20>
   1fc20:	97 ef       	ldi	r25, 0xF7	; 247
   1fc22:	94 bf       	out	0x34, r25	; 52
   1fc24:	28 2e       	mov	r2, r24
   1fc26:	80 e0       	ldi	r24, 0x00	; 0
   1fc28:	f2 d0       	rcall	.+484    	; 0x1fe0e <watchdogConfig>
   1fc2a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
   1fc2e:	85 e0       	ldi	r24, 0x05	; 5
   1fc30:	8e bd       	out	0x2e, r24	; 46
   1fc32:	82 e0       	ldi	r24, 0x02	; 2
   1fc34:	8b b9       	out	0x0b, r24	; 11
   1fc36:	88 e1       	ldi	r24, 0x18	; 24
   1fc38:	8a b9       	out	0x0a, r24	; 10
   1fc3a:	86 e0       	ldi	r24, 0x06	; 6
   1fc3c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
   1fc40:	80 e1       	ldi	r24, 0x10	; 16
   1fc42:	89 b9       	out	0x09, r24	; 9
   1fc44:	8e e0       	ldi	r24, 0x0E	; 14
   1fc46:	e3 d0       	rcall	.+454    	; 0x1fe0e <watchdogConfig>
   1fc48:	bd 9a       	sbi	0x17, 5	; 23
   1fc4a:	84 e0       	ldi	r24, 0x04	; 4
   1fc4c:	20 e3       	ldi	r18, 0x30	; 48
   1fc4e:	3c ef       	ldi	r19, 0xFC	; 252
   1fc50:	44 e0       	ldi	r20, 0x04	; 4
   1fc52:	50 e2       	ldi	r21, 0x20	; 32
   1fc54:	3d bd       	out	0x2d, r19	; 45
   1fc56:	2c bd       	out	0x2c, r18	; 44
   1fc58:	46 bf       	out	0x36, r20	; 54
   1fc5a:	06 b6       	in	r0, 0x36	; 54
   1fc5c:	02 fe       	sbrs	r0, 2
   1fc5e:	fd cf       	rjmp	.-6      	; 0x1fc5a <main+0x56>
   1fc60:	98 b3       	in	r25, 0x18	; 24
   1fc62:	95 27       	eor	r25, r21
   1fc64:	98 bb       	out	0x18, r25	; 24
   1fc66:	a8 95       	wdr
   1fc68:	5f 99       	sbic	0x0b, 7	; 11
   1fc6a:	02 c0       	rjmp	.+4      	; 0x1fc70 <main+0x6c>
   1fc6c:	81 50       	subi	r24, 0x01	; 1
   1fc6e:	91 f7       	brne	.-28     	; 0x1fc54 <main+0x50>
   1fc70:	43 e0       	ldi	r20, 0x03	; 3
   1fc72:	b4 2e       	mov	r11, r20
   1fc74:	aa 24       	eor	r10, r10
   1fc76:	a3 94       	inc	r10
   1fc78:	55 e0       	ldi	r21, 0x05	; 5
   1fc7a:	75 2e       	mov	r7, r21
   1fc7c:	61 e1       	ldi	r22, 0x11	; 17
   1fc7e:	66 2e       	mov	r6, r22
   1fc80:	bf d0       	rcall	.+382    	; 0x1fe00 <getch>
   1fc82:	81 34       	cpi	r24, 0x41	; 65
   1fc84:	79 f4       	brne	.+30     	; 0x1fca4 <main+0xa0>
   1fc86:	bc d0       	rcall	.+376    	; 0x1fe00 <getch>
   1fc88:	c8 2f       	mov	r28, r24
   1fc8a:	c5 d0       	rcall	.+394    	; 0x1fe16 <verifySpace>
   1fc8c:	c2 38       	cpi	r28, 0x82	; 130
   1fc8e:	11 f4       	brne	.+4      	; 0x1fc94 <main+0x90>
   1fc90:	82 e0       	ldi	r24, 0x02	; 2
   1fc92:	04 c0       	rjmp	.+8      	; 0x1fc9c <main+0x98>
   1fc94:	88 e0       	ldi	r24, 0x08	; 8
   1fc96:	c1 38       	cpi	r28, 0x81	; 129
   1fc98:	09 f0       	breq	.+2      	; 0x1fc9c <main+0x98>
   1fc9a:	83 e0       	ldi	r24, 0x03	; 3
   1fc9c:	ad d0       	rcall	.+346    	; 0x1fdf8 <putch>
   1fc9e:	80 e1       	ldi	r24, 0x10	; 16
   1fca0:	ab d0       	rcall	.+342    	; 0x1fdf8 <putch>
   1fca2:	ee cf       	rjmp	.-36     	; 0x1fc80 <main+0x7c>
   1fca4:	82 34       	cpi	r24, 0x42	; 66
   1fca6:	19 f4       	brne	.+6      	; 0x1fcae <main+0xaa>
   1fca8:	84 e1       	ldi	r24, 0x14	; 20
   1fcaa:	bd d0       	rcall	.+378    	; 0x1fe26 <getNch>
   1fcac:	f8 cf       	rjmp	.-16     	; 0x1fc9e <main+0x9a>
   1fcae:	85 34       	cpi	r24, 0x45	; 69
   1fcb0:	11 f4       	brne	.+4      	; 0x1fcb6 <main+0xb2>
   1fcb2:	85 e0       	ldi	r24, 0x05	; 5
   1fcb4:	fa cf       	rjmp	.-12     	; 0x1fcaa <main+0xa6>
   1fcb6:	85 35       	cpi	r24, 0x55	; 85
   1fcb8:	81 f4       	brne	.+32     	; 0x1fcda <main+0xd6>
   1fcba:	a2 d0       	rcall	.+324    	; 0x1fe00 <getch>
   1fcbc:	08 2f       	mov	r16, r24
   1fcbe:	a0 d0       	rcall	.+320    	; 0x1fe00 <getch>
   1fcc0:	18 2f       	mov	r17, r24
   1fcc2:	87 ff       	sbrs	r24, 7
   1fcc4:	07 c0       	rjmp	.+14     	; 0x1fcd4 <main+0xd0>
   1fcc6:	8b b7       	in	r24, 0x3b	; 59
   1fcc8:	81 60       	ori	r24, 0x01	; 1
   1fcca:	8b bf       	out	0x3b, r24	; 59
   1fccc:	00 0f       	add	r16, r16
   1fcce:	11 1f       	adc	r17, r17
   1fcd0:	a2 d0       	rcall	.+324    	; 0x1fe16 <verifySpace>
   1fcd2:	e5 cf       	rjmp	.-54     	; 0x1fc9e <main+0x9a>
   1fcd4:	8b b7       	in	r24, 0x3b	; 59
   1fcd6:	8e 7f       	andi	r24, 0xFE	; 254
   1fcd8:	f8 cf       	rjmp	.-16     	; 0x1fcca <main+0xc6>
   1fcda:	86 35       	cpi	r24, 0x56	; 86
   1fcdc:	81 f4       	brne	.+32     	; 0x1fcfe <main+0xfa>
   1fcde:	90 d0       	rcall	.+288    	; 0x1fe00 <getch>
   1fce0:	8d 34       	cpi	r24, 0x4D	; 77
   1fce2:	59 f4       	brne	.+22     	; 0x1fcfa <main+0xf6>
   1fce4:	8d d0       	rcall	.+282    	; 0x1fe00 <getch>
   1fce6:	cb b7       	in	r28, 0x3b	; 59
   1fce8:	8b d0       	rcall	.+278    	; 0x1fe00 <getch>
   1fcea:	c1 70       	andi	r28, 0x01	; 1
   1fcec:	88 0f       	add	r24, r24
   1fcee:	8c 2b       	or	r24, r28
   1fcf0:	8b bf       	out	0x3b, r24	; 59
   1fcf2:	81 e0       	ldi	r24, 0x01	; 1
   1fcf4:	98 d0       	rcall	.+304    	; 0x1fe26 <getNch>
   1fcf6:	80 e0       	ldi	r24, 0x00	; 0
   1fcf8:	d1 cf       	rjmp	.-94     	; 0x1fc9c <main+0x98>
   1fcfa:	83 e0       	ldi	r24, 0x03	; 3
   1fcfc:	fb cf       	rjmp	.-10     	; 0x1fcf4 <main+0xf0>
   1fcfe:	84 36       	cpi	r24, 0x64	; 100
   1fd00:	09 f0       	breq	.+2      	; 0x1fd04 <main+0x100>
   1fd02:	4b c0       	rjmp	.+150    	; 0x1fd9a <main+0x196>
   1fd04:	7d d0       	rcall	.+250    	; 0x1fe00 <getch>
   1fd06:	e8 2e       	mov	r14, r24
   1fd08:	f1 2c       	mov	r15, r1
   1fd0a:	fe 2c       	mov	r15, r14
   1fd0c:	ee 24       	eor	r14, r14
   1fd0e:	78 d0       	rcall	.+240    	; 0x1fe00 <getch>
   1fd10:	e8 2a       	or	r14, r24
   1fd12:	76 d0       	rcall	.+236    	; 0x1fe00 <getch>
   1fd14:	58 2e       	mov	r5, r24
   1fd16:	e7 01       	movw	r28, r14
   1fd18:	c1 2c       	mov	r12, r1
   1fd1a:	dd 24       	eor	r13, r13
   1fd1c:	d3 94       	inc	r13
   1fd1e:	46 01       	movw	r8, r12
   1fd20:	8f ef       	ldi	r24, 0xFF	; 255
   1fd22:	c8 1a       	sub	r12, r24
   1fd24:	d8 0a       	sbc	r13, r24
   1fd26:	6c d0       	rcall	.+216    	; 0x1fe00 <getch>
   1fd28:	f4 01       	movw	r30, r8
   1fd2a:	80 83       	st	Z, r24
   1fd2c:	21 97       	sbiw	r28, 0x01	; 1
   1fd2e:	b9 f7       	brne	.-18     	; 0x1fd1e <main+0x11a>
   1fd30:	72 d0       	rcall	.+228    	; 0x1fe16 <verifySpace>
   1fd32:	f5 e4       	ldi	r31, 0x45	; 69
   1fd34:	5f 12       	cpse	r5, r31
   1fd36:	0d c0       	rjmp	.+26     	; 0x1fd52 <main+0x14e>
   1fd38:	fe 01       	movw	r30, r28
   1fd3a:	f3 95       	inc	r31
   1fd3c:	ec 16       	cp	r14, r28
   1fd3e:	fd 06       	cpc	r15, r29
   1fd40:	09 f4       	brne	.+2      	; 0x1fd44 <main+0x140>
   1fd42:	ad cf       	rjmp	.-166    	; 0x1fc9e <main+0x9a>
   1fd44:	60 81       	ld	r22, Z
   1fd46:	ce 01       	movw	r24, r28
   1fd48:	80 0f       	add	r24, r16
   1fd4a:	91 1f       	adc	r25, r17
   1fd4c:	8e d0       	rcall	.+284    	; 0x1fe6a <eeprom_write_byte>
   1fd4e:	21 96       	adiw	r28, 0x01	; 1
   1fd50:	f3 cf       	rjmp	.-26     	; 0x1fd38 <main+0x134>
   1fd52:	f8 01       	movw	r30, r16
   1fd54:	b0 92 68 00 	sts	0x0068, r11	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd58:	e8 95       	spm
   1fd5a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd5e:	80 fd       	sbrc	r24, 0
   1fd60:	fc cf       	rjmp	.-8      	; 0x1fd5a <main+0x156>
   1fd62:	fe 01       	movw	r30, r28
   1fd64:	e0 0f       	add	r30, r16
   1fd66:	f1 1f       	adc	r31, r17
   1fd68:	de 01       	movw	r26, r28
   1fd6a:	b3 95       	inc	r27
   1fd6c:	8d 91       	ld	r24, X+
   1fd6e:	9c 91       	ld	r25, X
   1fd70:	0c 01       	movw	r0, r24
   1fd72:	a0 92 68 00 	sts	0x0068, r10	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd76:	e8 95       	spm
   1fd78:	11 24       	eor	r1, r1
   1fd7a:	22 96       	adiw	r28, 0x02	; 2
   1fd7c:	ec 16       	cp	r14, r28
   1fd7e:	fd 06       	cpc	r15, r29
   1fd80:	81 f7       	brne	.-32     	; 0x1fd62 <main+0x15e>
   1fd82:	f8 01       	movw	r30, r16
   1fd84:	70 92 68 00 	sts	0x0068, r7	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd88:	e8 95       	spm
   1fd8a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd8e:	80 fd       	sbrc	r24, 0
   1fd90:	fc cf       	rjmp	.-8      	; 0x1fd8a <main+0x186>
   1fd92:	60 92 68 00 	sts	0x0068, r6	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fd96:	e8 95       	spm
   1fd98:	82 cf       	rjmp	.-252    	; 0x1fc9e <main+0x9a>
   1fd9a:	84 37       	cpi	r24, 0x74	; 116
   1fd9c:	f9 f4       	brne	.+62     	; 0x1fddc <main+0x1d8>
   1fd9e:	30 d0       	rcall	.+96     	; 0x1fe00 <getch>
   1fda0:	c8 2f       	mov	r28, r24
   1fda2:	d0 e0       	ldi	r29, 0x00	; 0
   1fda4:	dc 2f       	mov	r29, r28
   1fda6:	cc 27       	eor	r28, r28
   1fda8:	2b d0       	rcall	.+86     	; 0x1fe00 <getch>
   1fdaa:	c8 2b       	or	r28, r24
   1fdac:	29 d0       	rcall	.+82     	; 0x1fe00 <getch>
   1fdae:	d8 2e       	mov	r13, r24
   1fdb0:	32 d0       	rcall	.+100    	; 0x1fe16 <verifySpace>
   1fdb2:	78 01       	movw	r14, r16
   1fdb4:	f5 e4       	ldi	r31, 0x45	; 69
   1fdb6:	df 12       	cpse	r13, r31
   1fdb8:	0a c0       	rjmp	.+20     	; 0x1fdce <main+0x1ca>
   1fdba:	c7 01       	movw	r24, r14
   1fdbc:	4e d0       	rcall	.+156    	; 0x1fe5a <eeprom_read_byte>
   1fdbe:	1c d0       	rcall	.+56     	; 0x1fdf8 <putch>
   1fdc0:	21 97       	sbiw	r28, 0x01	; 1
   1fdc2:	8f ef       	ldi	r24, 0xFF	; 255
   1fdc4:	e8 1a       	sub	r14, r24
   1fdc6:	f8 0a       	sbc	r15, r24
   1fdc8:	20 97       	sbiw	r28, 0x00	; 0
   1fdca:	b9 f7       	brne	.-18     	; 0x1fdba <main+0x1b6>
   1fdcc:	68 cf       	rjmp	.-304    	; 0x1fc9e <main+0x9a>
   1fdce:	f7 01       	movw	r30, r14
   1fdd0:	87 91       	elpm	r24, Z+
   1fdd2:	7f 01       	movw	r14, r30
   1fdd4:	11 d0       	rcall	.+34     	; 0x1fdf8 <putch>
   1fdd6:	21 97       	sbiw	r28, 0x01	; 1
   1fdd8:	d1 f7       	brne	.-12     	; 0x1fdce <main+0x1ca>
   1fdda:	61 cf       	rjmp	.-318    	; 0x1fc9e <main+0x9a>
   1fddc:	85 37       	cpi	r24, 0x75	; 117
   1fdde:	31 f4       	brne	.+12     	; 0x1fdec <main+0x1e8>
   1fde0:	1a d0       	rcall	.+52     	; 0x1fe16 <verifySpace>
   1fde2:	8e e1       	ldi	r24, 0x1E	; 30
   1fde4:	09 d0       	rcall	.+18     	; 0x1fdf8 <putch>
   1fde6:	87 e9       	ldi	r24, 0x97	; 151
   1fde8:	07 d0       	rcall	.+14     	; 0x1fdf8 <putch>
   1fdea:	52 cf       	rjmp	.-348    	; 0x1fc90 <main+0x8c>
   1fdec:	81 35       	cpi	r24, 0x51	; 81
   1fdee:	09 f0       	breq	.+2      	; 0x1fdf2 <main+0x1ee>
   1fdf0:	6f cf       	rjmp	.-290    	; 0x1fcd0 <main+0xcc>
   1fdf2:	88 e0       	ldi	r24, 0x08	; 8
   1fdf4:	0c d0       	rcall	.+24     	; 0x1fe0e <watchdogConfig>
   1fdf6:	6c cf       	rjmp	.-296    	; 0x1fcd0 <main+0xcc>

0001fdf8 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
   1fdf8:	5d 9b       	sbis	0x0b, 5	; 11
   1fdfa:	fe cf       	rjmp	.-4      	; 0x1fdf8 <putch>
  UART_UDR = ch;
   1fdfc:	8c b9       	out	0x0c, r24	; 12
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
   1fdfe:	08 95       	ret

0001fe00 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
   1fe00:	5f 9b       	sbis	0x0b, 7	; 11
   1fe02:	fe cf       	rjmp	.-4      	; 0x1fe00 <getch>
  if (!(UART_SRA & _BV(FE0))) {
   1fe04:	5c 99       	sbic	0x0b, 4	; 11
   1fe06:	01 c0       	rjmp	.+2      	; 0x1fe0a <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe08:	a8 95       	wdr
  ch = UART_UDR;
   1fe0a:	8c b1       	in	r24, 0x0c	; 12
}
   1fe0c:	08 95       	ret

0001fe0e <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe0e:	98 e1       	ldi	r25, 0x18	; 24
   1fe10:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
   1fe12:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
   1fe14:	08 95       	ret

0001fe16 <verifySpace>:
  if (getch() != CRC_EOP) {
   1fe16:	f4 df       	rcall	.-24     	; 0x1fe00 <getch>
   1fe18:	80 32       	cpi	r24, 0x20	; 32
   1fe1a:	19 f0       	breq	.+6      	; 0x1fe22 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe1c:	88 e0       	ldi	r24, 0x08	; 8
   1fe1e:	f7 df       	rcall	.-18     	; 0x1fe0e <watchdogConfig>
   1fe20:	ff cf       	rjmp	.-2      	; 0x1fe20 <verifySpace+0xa>
  putch(STK_INSYNC);
   1fe22:	84 e1       	ldi	r24, 0x14	; 20
   1fe24:	e9 cf       	rjmp	.-46     	; 0x1fdf8 <putch>

0001fe26 <getNch>:
void getNch(uint8_t count) {
   1fe26:	cf 93       	push	r28
   1fe28:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe2a:	ea df       	rcall	.-44     	; 0x1fe00 <getch>
   1fe2c:	c1 50       	subi	r28, 0x01	; 1
   1fe2e:	e9 f7       	brne	.-6      	; 0x1fe2a <getNch+0x4>
}
   1fe30:	cf 91       	pop	r28
  verifySpace();
   1fe32:	f1 cf       	rjmp	.-30     	; 0x1fe16 <verifySpace>

0001fe34 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
   1fe34:	fc 01       	movw	r30, r24
   1fe36:	0a 01       	movw	r0, r20
   1fe38:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fe3c:	e8 95       	spm
   1fe3e:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
   1fe40:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fe44:	80 fd       	sbrc	r24, 0
   1fe46:	fc cf       	rjmp	.-8      	; 0x1fe40 <do_spm+0xc>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fe48:	66 70       	andi	r22, 0x06	; 6
   1fe4a:	31 f0       	breq	.+12     	; 0x1fe58 <do_spm+0x24>
   1fe4c:	45 2b       	or	r20, r21
   1fe4e:	21 f4       	brne	.+8      	; 0x1fe58 <do_spm+0x24>
    // Reenable read access to flash
    __boot_rww_enable_short();
   1fe50:	81 e1       	ldi	r24, 0x11	; 17
   1fe52:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
   1fe56:	e8 95       	spm
  }
#endif
}
   1fe58:	08 95       	ret

0001fe5a <eeprom_read_byte>:
   1fe5a:	e1 99       	sbic	0x1c, 1	; 28
   1fe5c:	fe cf       	rjmp	.-4      	; 0x1fe5a <eeprom_read_byte>
   1fe5e:	9f bb       	out	0x1f, r25	; 31
   1fe60:	8e bb       	out	0x1e, r24	; 30
   1fe62:	e0 9a       	sbi	0x1c, 0	; 28
   1fe64:	99 27       	eor	r25, r25
   1fe66:	8d b3       	in	r24, 0x1d	; 29
   1fe68:	08 95       	ret

0001fe6a <eeprom_write_byte>:
   1fe6a:	26 2f       	mov	r18, r22

0001fe6c <eeprom_write_r18>:
   1fe6c:	e1 99       	sbic	0x1c, 1	; 28
   1fe6e:	fe cf       	rjmp	.-4      	; 0x1fe6c <eeprom_write_r18>
   1fe70:	9f bb       	out	0x1f, r25	; 31
   1fe72:	8e bb       	out	0x1e, r24	; 30
   1fe74:	2d bb       	out	0x1d, r18	; 29
   1fe76:	0f b6       	in	r0, 0x3f	; 63
   1fe78:	f8 94       	cli
   1fe7a:	e2 9a       	sbi	0x1c, 2	; 28
   1fe7c:	e1 9a       	sbi	0x1c, 1	; 28
   1fe7e:	0f be       	out	0x3f, r0	; 63
   1fe80:	01 96       	adiw	r24, 0x01	; 1
   1fe82:	08 95       	ret

0001fe84 <f_delimit>:
   1fe84:	ff                                                  .

0001fe85 <f_version>:
   1fe85:	56 65 72 73 69 6f 6e 3d 38 2e 32 00                 Version=8.2.

0001fe91 <f_device>:
   1fe91:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 31 32 38     Device=atmega128
	...

0001fea2 <fF_CPU>:
   1fea2:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0001feb2 <fBIGBOOT>:
   1feb2:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0001febc <f_date>:
   1febc:	42 75 69 6c 74 3a 4a 75 6c 20 31 38 20 32 30 32     Built:Jul 18 202
   1fecc:	31 3a 32 33 3a 31 39 3a 34 39 00                    1:23:19:49.

0001fed7 <fUART>:
   1fed7:	55 41 52 54 3d 30 00                                UART=0.

0001fede <fBAUD_RATE>:
   1fede:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0001feef <f_LED>:
   1feef:	4c 45 44 3d 42 35 00                                LED=B5.

0001fef6 <fLED_START_FLASHES>:
   1fef6:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
   1ff06:	53 3d 32 00                                         S=2.
